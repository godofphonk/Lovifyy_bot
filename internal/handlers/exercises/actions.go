package exercises

import (
	"fmt"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// HandleWeekAction –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –≤–Ω—É—Ç—Ä–∏ –Ω–µ–¥–µ–ª–∏ –∫–∞–∫ –≤ legacy
func (h *Handler) HandleWeekAction(callbackQuery *tgbotapi.CallbackQuery, data string) error {
	// –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: week_<–Ω–æ–º–µ—Ä>_<–¥–µ–π—Å—Ç–≤–∏–µ>
	parts := strings.Split(data, "_")
	if len(parts) < 3 {
		return fmt.Errorf("invalid week action callback data: %s", data)
	}

	weekStr := parts[1]
	action := parts[2]

	weekNum, err := strconv.Atoi(weekStr)
	if err != nil {
		return fmt.Errorf("invalid week number: %s", weekStr)
	}

	exercise, err := h.exerciseManager.GetWeekExercise(weekNum)
	if err != nil || exercise == nil {
		msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, "‚ùå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		_, err := h.bot.Send(msg)
		return err
	}

	var response string

	switch action {
	case "questions":
		if exercise.Questions != "" {
			response = fmt.Sprintf("üë©‚Äç‚ù§Ô∏è‚Äçüë® –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è %d –Ω–µ–¥–µ–ª–∏\n\n%s", weekNum, exercise.Questions)
		} else {
			response = "üë©‚Äç‚ù§Ô∏è‚Äçüë® –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
		}

	case "tips":
		if exercise.Tips != "" {
			response = fmt.Sprintf("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è %d –Ω–µ–¥–µ–ª–∏\n\n%s", weekNum, exercise.Tips)
		} else {
			response = "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏\n\n‚Ä¢ –ë—É–¥—å—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º\n‚Ä¢ –°–ª—É—à–∞–π—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ\n‚Ä¢ –ù–µ —Å—É–¥–∏—Ç–µ, –∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ\n‚Ä¢ –î–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ —á—É–≤—Å—Ç–≤–∞–º–∏ —á–µ—Å—Ç–Ω–æ"
		}

	case "insights":
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≥–µ–Ω–¥–µ—Ä–∞ –¥–ª—è –∏–Ω—Å–∞–π—Ç–∞ –∫–∞–∫ –≤ legacy
		return h.HandleInsightGenderChoice(callbackQuery, weekNum)

	case "joint":
		if exercise.JointQuestions != "" {
			response = fmt.Sprintf("üë´ –°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è %d –Ω–µ–¥–µ–ª–∏\n\n%s", weekNum, exercise.JointQuestions)
		} else {
			response = "üë´ –°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
		}

	case "diary":
		if exercise.DiaryInstructions != "" {
			response = fmt.Sprintf("üìù –ß—Ç–æ –ø–∏—Å–∞—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ –¥–ª—è %d –Ω–µ–¥–µ–ª–∏\n\n%s", weekNum, exercise.DiaryInstructions)
		} else {
			response = "üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
		}

	default:
		response = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –Ω–µ–¥–µ–ª–µ"
	backButton := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–µ–¥–µ–ª–µ", fmt.Sprintf("week_%d", weekNum)),
		),
	)

	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, response)
	msg.ReplyMarkup = backButton
	_, err = h.bot.Send(msg)
	return err
}
