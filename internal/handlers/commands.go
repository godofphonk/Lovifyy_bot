package handlers

import (
	"fmt"
	"strings"

	"Lovifyy_bot/internal/ai"
	"Lovifyy_bot/internal/exercises"
	"Lovifyy_bot/internal/handlers/admin"
	"Lovifyy_bot/internal/handlers/chat"
	"Lovifyy_bot/internal/handlers/diary"
	exerciseHandlers "Lovifyy_bot/internal/handlers/exercises"
	"Lovifyy_bot/internal/handlers/scheduling"
	"Lovifyy_bot/internal/history"
	"Lovifyy_bot/internal/models"
	"Lovifyy_bot/internal/services"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// CommandHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ (—Ä–æ—É—Ç–µ—Ä)
type CommandHandler struct {
	bot                 *tgbotapi.BotAPI
	userManager         *models.UserManager
	exerciseManager     *exercises.Manager
	notificationService *services.NotificationService
	historyManager      *history.Manager
	ai                  *ai.OpenAIClient

	// –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
	adminHandler      *admin.Handler
	exerciseHandler   *exerciseHandlers.Handler
	diaryHandler      *diary.Handler
	chatHandler       *chat.Handler
	schedulingHandler *scheduling.Handler
}

// NewCommandHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
func NewCommandHandler(bot *tgbotapi.BotAPI, userManager *models.UserManager, exerciseManager *exercises.Manager, notificationService *services.NotificationService, historyManager *history.Manager, ai *ai.OpenAIClient) *CommandHandler {
	return &CommandHandler{
		bot:                 bot,
		userManager:         userManager,
		exerciseManager:     exerciseManager,
		notificationService: notificationService,
		historyManager:      historyManager,
		ai:                  ai,
		
		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
		adminHandler:      admin.NewHandler(bot, userManager, exerciseManager, notificationService),
		exerciseHandler:   exerciseHandlers.NewHandler(bot, userManager, exerciseManager),
		diaryHandler:      diary.NewHandler(bot, userManager),
		chatHandler:       chat.NewHandler(bot, userManager),
		schedulingHandler: scheduling.NewHandler(bot, userManager, notificationService),
	}
}

// HandleStart –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ legacy
func (ch *CommandHandler) HandleStart(update tgbotapi.Update) error {
	userID := update.Message.From.ID
	username := update.Message.From.UserName
	
	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
	ch.notificationService.RegisterUser(userID, username)
	ch.notificationService.UpdateUserActivity(userID)
	
	ch.userManager.ClearState(userID)

	// –¢–æ—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ legacy
	welcomeText := "–ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–∏–µ! üëãüíñ –Ø —Ç–∞–∫ —Ä–∞–¥ –≤–∏–¥–µ—Ç—å –≤–∞—Å –∑–¥–µ—Å—å –∏ –≤–º–µ—Å—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ —ç—Ç–æ –º–∞–ª–µ–Ω—å–∫–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –≤–∞—à–∏–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º! ü´Ç\n\n" +
		"–≠—Ç–æ—Ç —á–∞—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–∞—Ö–æ–¥–∏—Ç—å –º–æ–º–µ–Ω—Ç—ã —Ä–∞–¥–æ—Å—Ç–∏, —Ç–µ–ø–ª–∞ –∏ –≤–∑–∞–∏–º–æ–ø–æ–Ω–∏–º–∞–Ω–∏—è, –∑–∞–º–µ—á–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –∏ –≤–º–µ—Å—Ç–µ –¥–µ–ª–∞—Ç—å –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –µ—â—ë –±–æ–ª–µ–µ —Å—á–∞—Å—Ç–ª–∏–≤—ã–º–∏. –ó–¥–µ—Å—å –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º –≤ —ç—Ç–æ–º:\n\n" +
		"1Ô∏è‚É£ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏ üíë\n" +
		"–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é —è –±—É–¥—É –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–æ–≥–∞–µ—Ç –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞, –¥–µ–ª–∏—Ç—å—Å—è —á—É–≤—Å—Ç–≤–∞–º–∏ –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –ø—Ä–∏—è—Ç–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –æ–±—â–µ–Ω–∏—è.\n" +
		"–í–∞–∂–Ω–æ: –≤—Å—ë, —á—Ç–æ –≤—ã –¥–µ–ª–∞–µ—Ç–µ –≤ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è—Ö, –Ω—É–∂–Ω–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤ –º–∏–Ω–∏-–¥–Ω–µ–≤–Ω–∏–∫–µ, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –º–∞–ª–µ–Ω—å–∫–∏–µ —É—Å–ø–µ—Ö–∏. üíó\n\n" +
		"2Ô∏è‚É£ –ú–∏–Ω–∏-–¥–Ω–µ–≤–Ω–∏–∫ üíå\n" +
		"–≠—Ç–æ –º–µ—Å—Ç–æ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∫–æ—Ä–æ—Ç–∫–∏—Ö –∑–∞–º–µ—Ç–æ–∫ –æ –≤–∞—à–∏—Ö –Ω–∞–±–ª—é–¥–µ–Ω–∏—è—Ö, –æ—Ç–∫—Ä—ã—Ç–∏—è—Ö –∏ —à–∞–≥–∞—Ö –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö. –î–∞–∂–µ –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –¥–µ–Ω—å –ø–æ–º–æ–≥–∞–µ—Ç –∑–∞–∫—Ä–µ–ø–ª—è—Ç—å –Ω–∞–≤—ã–∫–∏, –≤–∏–¥–µ—Ç—å —Ä–æ—Å—Ç –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π –∏ –æ—Ç–º–µ—á–∞—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.\n\n" +
		"üí° –°–æ–≤–µ—Ç: –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ –æ —Ñ–æ—Ä–º–µ –∏–ª–∏ –∏–¥–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–µ–π ‚Äî –≥–ª–∞–≤–Ω–æ–µ, —á—Ç–æ–±—ã —ç—Ç–æ –±—ã–ª–æ —á–µ—Å—Ç–Ω–æ –∏ –æ—Ç —Å–µ—Ä–¥—Ü–∞. –ú–∏–Ω–∏-–¥–Ω–µ–≤–Ω–∏–∫ –ø–æ–º–æ–≥–∞–µ—Ç –∑–∞–∫—Ä–µ–ø–ª—è—Ç—å –≤—Å—ë, —á–µ–º—É –≤—ã —É—á–∏—Ç–µ—Å—å –≤ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è—Ö –Ω–µ–¥–µ–ª–∏, –∏ –≤–∏–¥–µ—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö.\n\n" +
		"3Ô∏è‚É£ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö üíí\n" +
		"–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è. –Ø –¥–∞–º —Å–æ–≤–µ—Ç –∏–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∫—É, —á—Ç–æ–±—ã –æ–±—â–µ–Ω–∏–µ –∏ –≤–∑–∞–∏–º–æ–ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å—Ç–∞–ª–æ –µ—â—ë —Ç–µ–ø–ª–µ–µ. –≠—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏ –¥–Ω–µ–≤–Ω–∏–∫–∞, –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—Ç–∏—Ç–µ. ü´∂üèª\n\n" +
		"üíå –°–æ–≤–µ—Ç –æ—Ç –º–µ–Ω—è: –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å–æ–º, –∑–∞–º–µ—á–∞–π—Ç–µ –º–∞–ª–µ–Ω—å–∫–∏–µ —Ä–∞–¥–æ—Å—Ç–∏, –¥–µ–ª–∏—Ç–µ—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –∏ —Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ –≤—Å—ë –≤ –º–∏–Ω–∏-–¥–Ω–µ–≤–Ω–∏–∫–µ.\n" +
		"–í–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã, –∏ –∫–∞–∂–¥–∞—è —á–µ—Å—Ç–Ω–∞—è –±–µ—Å–µ–¥–∞, –∫–∞–∂–¥–æ–µ –º–∞–ª–µ–Ω—å–∫–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –¥—Ä—É–≥ –∫ –¥—Ä—É–≥—É –¥–µ–ª–∞–µ—Ç –∏—Ö –∫—Ä–µ–ø—á–µ –∏ —Ç–µ–ø–ª–µ–µ. üííüéÄ"

	// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç—Ä–µ–º—è –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ legacy
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üíë –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏", "advice"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üíå –ú–∏–Ω–∏-–¥–Ω–µ–≤–Ω–∏–∫", "diary"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üíí –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö", "chat"),
		),
	)

	// –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
	if ch.userManager.IsAdmin(userID) {
		adminRow := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", "adminhelp"),
		)
		keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, adminRow)
	}

	msg := tgbotapi.NewMessage(userID, welcomeText)
	msg.ReplyMarkup = keyboard
	_, err := ch.bot.Send(msg)
	return err
}

// HandleCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ callback queries (–≥–ª–∞–≤–Ω—ã–π —Ä–æ—É—Ç–µ—Ä)
func (ch *CommandHandler) HandleCallback(update tgbotapi.Update) error {
	data := update.CallbackQuery.Data

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback –∫–∞–∫ –≤ legacy
	callback := tgbotapi.NewCallback(update.CallbackQuery.ID, "")
	ch.bot.Request(callback)

	// –†–æ—É—Ç–∏–Ω–≥ –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
	switch {
	// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
	case data == "chat":
		return ch.chatHandler.HandleChat(update.CallbackQuery)
	case data == "advice":
		return ch.exerciseHandler.HandleAdvice(update.CallbackQuery)
	case data == "diary":
		return ch.diaryHandler.HandleDiary(update.CallbackQuery)

	// –ê–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏
	case data == "adminhelp":
		return ch.adminHandler.HandleAdminHelp(update.CallbackQuery)
	case data == "prompt":
		return ch.adminHandler.HandlePrompt(update.CallbackQuery)
	case data == "setprompt_menu":
		return ch.adminHandler.HandleSetPromptMenu(update.CallbackQuery)
	case data == "welcome":
		return ch.adminHandler.HandleWelcome(update.CallbackQuery)
	case data == "setwelcome_menu":
		return ch.adminHandler.HandleSetWelcomeMenu(update.CallbackQuery)
	case data == "exercises_menu":
		return ch.handleExercisesMenu(update.CallbackQuery)
	case data == "notifications_menu":
		return ch.handleNotificationsMenu(update.CallbackQuery)
	case data == "final_insight_menu":
		return ch.adminHandler.HandleFinalInsightMenu(update.CallbackQuery)
	case data == "generate_final_insight":
		return ch.adminHandler.HandleGenerateFinalInsight(update.CallbackQuery, ch.historyManager, ch.ai)
	case data == "schedule_notification":
		return ch.schedulingHandler.HandleScheduleNotification(update.CallbackQuery)
	case data == "view_notifications":
		return ch.handleViewNotifications(update.CallbackQuery)
	case data == "send_now":
		return ch.handleSendNow(update.CallbackQuery)
	case data == "notify_custom":
		return ch.handleCustomNotification(update.CallbackQuery)
	case data == "notify_schedule_custom":
		return ch.handleScheduleCustomNotification(update.CallbackQuery)

	// –î–Ω–µ–≤–Ω–∏–∫
	case data == "diary_gender_male":
		return ch.diaryHandler.HandleDiaryGender(update.CallbackQuery, "male")
	case data == "diary_gender_female":
		return ch.diaryHandler.HandleDiaryGender(update.CallbackQuery, "female")
	case data == "diary_view":
		return ch.diaryHandler.HandleDiaryView(update.CallbackQuery)
	case strings.HasPrefix(data, "diary_week_"):
		return ch.diaryHandler.HandleDiaryWeek(update.CallbackQuery, data)
	case strings.HasPrefix(data, "diary_type_"):
		return ch.diaryHandler.HandleDiaryType(update.CallbackQuery, data)

	// –ù–µ–¥–µ–ª–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
	case data == "week_1":
		return ch.exerciseHandler.HandleWeek(update.CallbackQuery, 1)
	case data == "week_2":
		return ch.exerciseHandler.HandleWeek(update.CallbackQuery, 2)
	case data == "week_3":
		return ch.exerciseHandler.HandleWeek(update.CallbackQuery, 3)
	case data == "week_4":
		return ch.exerciseHandler.HandleWeek(update.CallbackQuery, 4)

	// –ü–∞—Ç—Ç–µ—Ä–Ω—ã callback'–æ–≤
	case strings.HasPrefix(data, "week_"):
		return ch.exerciseHandler.HandleWeekAction(update.CallbackQuery, data)
	case strings.HasPrefix(data, "insight_"):
		return ch.exerciseHandler.HandleInsightGender(update.CallbackQuery, data, ch.historyManager, ch.ai)
	case strings.HasPrefix(data, "notify_send_all_"):
		return ch.handleSendAllNotifications(update.CallbackQuery, data)
	case strings.HasPrefix(data, "notify_"):
		return ch.handleNotificationCallbacks(update.CallbackQuery.From.ID, data)
	case strings.HasPrefix(data, "schedule_date_"):
		return ch.schedulingHandler.HandleScheduleDateCallback(update.CallbackQuery, data)
	case strings.HasPrefix(data, "schedule_time_"):
		return ch.schedulingHandler.HandleScheduleTimeCallback(update.CallbackQuery, data)
	case strings.HasPrefix(data, "schedule_type_"):
		return ch.schedulingHandler.HandleScheduleTypeCallback(update.CallbackQuery, data)
	case strings.HasPrefix(data, "schedule_custom_time_"):
		return ch.schedulingHandler.HandleScheduleCustomTimeCallback(update.CallbackQuery, data)
	case data == "schedule_custom_date":
		return ch.schedulingHandler.HandleScheduleCustomDateCallback(update.CallbackQuery)
	case strings.HasPrefix(data, "admin_"):
		return ch.handleLegacyCallbacks(update.CallbackQuery, data)

	default:
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ legacy callback'–æ–≤
		return ch.handleLegacyCallbacks(update.CallbackQuery, data)
	}
}

// handleLegacyCallbacks –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Å—Ç–∞–≤—à–∏–µ—Å—è legacy callback'–∏
func (ch *CommandHandler) handleLegacyCallbacks(callbackQuery *tgbotapi.CallbackQuery, data string) error {
	// –ó–¥–µ—Å—å –æ—Å—Ç–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–ª–æ–∂–Ω—ã–µ callback'–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∫–∞ –Ω–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã
	switch {
	case strings.HasPrefix(data, "schedule_date_"):
		return ch.handleScheduleDateCallback(callbackQuery, data)
	case strings.HasPrefix(data, "admin_week_"):
		return ch.handleAdminWeekFieldCallback(callbackQuery, data)
	default:
		msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
		_, err := ch.bot.Send(msg)
		return err
	}
}

// –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–±—É–¥—É—Ç –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞–∫–µ—Ç—ã)
func (ch *CommandHandler) handleExercisesMenu(callbackQuery *tgbotapi.CallbackQuery) error {
	userID := callbackQuery.From.ID

	if !ch.userManager.IsAdmin(userID) {
		msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
		_, err := ch.bot.Send(msg)
		return err
	}

	response := "üóìÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:"
	exercisesKeyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("1Ô∏è‚É£ –ù–µ–¥–µ–ª—è", "exercise_week_1"),
			tgbotapi.NewInlineKeyboardButtonData("2Ô∏è‚É£ –ù–µ–¥–µ–ª—è", "exercise_week_2"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("3Ô∏è‚É£ –ù–µ–¥–µ–ª—è", "exercise_week_3"),
			tgbotapi.NewInlineKeyboardButtonData("4Ô∏è‚É£ –ù–µ–¥–µ–ª—è", "exercise_week_4"),
		),
	)

	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, response)
	msg.ReplyMarkup = exercisesKeyboard
	_, err := ch.bot.Send(msg)
	return err
}

func (ch *CommandHandler) handleNotificationsMenu(callbackQuery *tgbotapi.CallbackQuery) error {
	userID := callbackQuery.From.ID

	if !ch.userManager.IsAdmin(userID) {
		msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
		_, err := ch.bot.Send(msg)
		return err
	}

	text := `üì¢ <b>–ü–∞–Ω–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>

–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:`

	kb := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", "schedule_notification"),
			tgbotapi.NewInlineKeyboardButtonData("üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å", "view_notifications"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å", "send_now"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè† –í –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", "adminhelp"),
		),
	)

	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, text)
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = kb
	_, err := ch.bot.Send(msg)
	return err
}

func (ch *CommandHandler) handleScheduleDateCallback(callbackQuery *tgbotapi.CallbackQuery, data string) error {
	userID := callbackQuery.From.ID

	if !ch.userManager.IsAdmin(userID) {
		msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
		_, err := ch.bot.Send(msg)
		return err
	}

	// –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ callback data: schedule_date_12.10.2025
	parts := strings.Split(data, "_")
	if len(parts) < 3 {
		msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
		_, err := ch.bot.Send(msg)
		return err
	}

	selectedDate := parts[2] // 12.10.2025

	response := fmt.Sprintf("üïê –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è %s:\n\n"+
		"‚ö†Ô∏è –í—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ UTC+5 (–ê–ª–º–∞—Ç—ã/–¢–∞—à–∫–µ–Ω—Ç)", selectedDate)

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º –∫–∞–∫ –≤ legacy
	timeButtons := [][]tgbotapi.InlineKeyboardButton{
		{
			tgbotapi.NewInlineKeyboardButtonData("üåÖ 06:00", fmt.Sprintf("schedule_time_%s_06:00", selectedDate)),
			tgbotapi.NewInlineKeyboardButtonData("üåÑ 08:00", fmt.Sprintf("schedule_time_%s_08:00", selectedDate)),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("‚òÄÔ∏è 10:00", fmt.Sprintf("schedule_time_%s_10:00", selectedDate)),
			tgbotapi.NewInlineKeyboardButtonData("üåû 12:00", fmt.Sprintf("schedule_time_%s_12:00", selectedDate)),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("üåá 15:00", fmt.Sprintf("schedule_time_%s_15:00", selectedDate)),
			tgbotapi.NewInlineKeyboardButtonData("üåÜ 18:00", fmt.Sprintf("schedule_time_%s_18:00", selectedDate)),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("üåÉ 20:00", fmt.Sprintf("schedule_time_%s_20:00", selectedDate)),
			tgbotapi.NewInlineKeyboardButtonData("üåô 22:00", fmt.Sprintf("schedule_time_%s_22:00", selectedDate)),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("üïõ 00:00", fmt.Sprintf("schedule_time_%s_00:00", selectedDate)),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("‚è∞ –°–≤–æ–µ –≤—Ä–µ–º—è", fmt.Sprintf("schedule_custom_time_%s", selectedDate)),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –∫ –¥–∞—Ç–∞–º", "schedule_notification"),
		},
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(timeButtons...)
	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, response)
	msg.ReplyMarkup = keyboard
	_, err := ch.bot.Send(msg)
	return err
}

func (ch *CommandHandler) handleAdminWeekFieldCallback(callbackQuery *tgbotapi.CallbackQuery, data string) error {
	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, "üöß –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª–µ–π –Ω–µ–¥–µ–ª—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
	_, err := ch.bot.Send(msg)
	return err
}

// handleViewNotifications –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
func (ch *CommandHandler) handleViewNotifications(callbackQuery *tgbotapi.CallbackQuery) error {
	userID := callbackQuery.From.ID

	if !ch.userManager.IsAdmin(userID) {
		msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
		_, err := ch.bot.Send(msg)
		return err
	}

	return ch.showScheduledNotifications(userID)
}

// handleSendNow –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
func (ch *CommandHandler) handleSendNow(callbackQuery *tgbotapi.CallbackQuery) error {
	userID := callbackQuery.From.ID

	if !ch.userManager.IsAdmin(userID) {
		msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
		_, err := ch.bot.Send(msg)
		return err
	}

	text := "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–µ–π—á–∞—Å\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:"
	kb := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üíå –ú–∏–Ω–∏-–¥–Ω–µ–≤–Ω–∏–∫", "notify_send_all_diary"),
			tgbotapi.NewInlineKeyboardButtonData("üë©üèº‚Äç‚ù§Ô∏è‚Äçüë®üèª –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏", "notify_send_all_exercise"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üíí –ú–æ—Ç–∏–≤–∞—Ü–∏—è", "notify_send_all_motivation"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úèÔ∏è –ö–∞—Å—Ç–æ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", "notify_custom"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "notifications_menu"),
		),
	)

	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, text)
	msg.ReplyMarkup = kb
	_, err := ch.bot.Send(msg)
	return err
}

// handleCustomNotification –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
func (ch *CommandHandler) handleCustomNotification(callbackQuery *tgbotapi.CallbackQuery) error {
	userID := callbackQuery.From.ID

	if !ch.userManager.IsAdmin(userID) {
		msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
		_, err := ch.bot.Send(msg)
		return err
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
	ch.userManager.SetState(userID, "custom_notification")

	text := "‚úèÔ∏è –ö–∞—Å—Ç–æ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n\n" +
		"–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n" +
		"üí° –°–æ–≤–µ—Ç: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–º–æ–¥–∑–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è."

	kb := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∞", "send_now"),
		),
	)

	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, text)
	msg.ReplyMarkup = kb
	_, err := ch.bot.Send(msg)
	return err
}

// handleScheduleCustomNotification –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
func (ch *CommandHandler) handleScheduleCustomNotification(callbackQuery *tgbotapi.CallbackQuery) error {
	userID := callbackQuery.From.ID

	if !ch.userManager.IsAdmin(userID) {
		msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
		_, err := ch.bot.Send(msg)
		return err
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
	ch.userManager.SetState(userID, "custom_notification_schedule")

	text := "‚úèÔ∏è –ö–∞—Å—Ç–æ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n\n" +
		"–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.\n\n" +
		"üí° –°–æ–≤–µ—Ç: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–º–æ–¥–∑–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è."

	kb := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∞", "schedule_notification"),
		),
	)

	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, text)
	msg.ReplyMarkup = kb
	_, err := ch.bot.Send(msg)
	return err
}


// –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã (HandleHelp, HandleAdmin, etc.) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
func (ch *CommandHandler) HandleHelp(update tgbotapi.Update) error {
	userID := update.Message.From.ID
	text := "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É"
	msg := tgbotapi.NewMessage(userID, text)
	_, err := ch.bot.Send(msg)
	return err
}

func (ch *CommandHandler) HandleAdmin(update tgbotapi.Update) error {
	return ch.adminHandler.HandleAdminHelp(&tgbotapi.CallbackQuery{
		From:    update.Message.From,
		Message: update.Message,
	})
}

// simpleMsg –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å notifications.go)
func (ch *CommandHandler) simpleMsg(userID int64, text string) error {
	msg := tgbotapi.NewMessage(userID, text)
	_, err := ch.bot.Send(msg)
	return err
}

// handleSendAllNotifications –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
func (ch *CommandHandler) handleSendAllNotifications(callbackQuery *tgbotapi.CallbackQuery, data string) error {
	userID := callbackQuery.From.ID

	if !ch.userManager.IsAdmin(userID) {
		msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
		_, err := ch.bot.Send(msg)
		return err
	}

	var notificationType string
	var typeName string

	switch data {
	case "notify_send_all_diary":
		notificationType = "diary"
		typeName = "üíå –ú–∏–Ω–∏-–¥–Ω–µ–≤–Ω–∏–∫"
	case "notify_send_all_exercise":
		notificationType = "exercise"
		typeName = "üë©üèº‚Äç‚ù§Ô∏è‚Äçüë®üèª –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏"
	case "notify_send_all_motivation":
		notificationType = "motivation"
		typeName = "üíí –ú–æ—Ç–∏–≤–∞—Ü–∏—è"
	default:
		msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
		_, err := ch.bot.Send(msg)
		return err
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
	processingMsg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, 
		fmt.Sprintf("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ %s –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...", typeName))
	_, err := ch.bot.Send(processingMsg)
	if err != nil {
		return err
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
	var message string
	switch notificationType {
	case "diary":
		message = "üìî <b>–ú–∏–Ω–∏-–¥–Ω–µ–≤–Ω–∏–∫</b>\n\n" +
			"–ü—Ä–∏–≤–µ—Ç! üòä –í—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫!\n\n" +
			"–ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ –∏ —á—É–≤—Å—Ç–≤–∞–º–∏ —Å–µ–≥–æ–¥–Ω—è. " +
			"–ß—Ç–æ –≤–∞–∂–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ? –ö–∞–∫ —Ç–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?\n\n" +
			"–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /diary –¥–ª—è –∑–∞–ø–∏—Å–∏! ‚ú®"
	case "exercise":
		message = "üèÉ‚Äç‚ôÄÔ∏è <b>–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–µ–¥–µ–ª–∏</b>\n\n" +
			"–í—Ä–µ–º—è –¥–ª—è –ø–æ–ª–µ–∑–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π! üí™\n\n" +
			"–ü–æ–ø—Ä–æ–±—É–π –Ω–æ–≤—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π " +
			"–∏ –ª–∏—á–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è.\n\n" +
			"–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /advice –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π! üåü"
	case "motivation":
		message = "üí´ <b>–ú–æ—Ç–∏–≤–∞—Ü–∏—è –¥–Ω—è</b>\n\n" +
			"–ö–∞–∂–¥—ã–π –¥–µ–Ω—å - —ç—Ç–æ –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å –ª—É—á—à–µ! ‚ú®\n\n" +
			"–ü–æ–º–Ω–∏: –º–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –≤–µ–¥—É—Ç –∫ –±–æ–ª—å—à–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è–º. " +
			"–¢—ã —Å–ø–æ—Å–æ–±–µ–Ω –Ω–∞ –º–Ω–æ–≥–æ–µ! üåà\n\n" +
			"–ü—Ä–æ–¥–æ–ª–∂–∞–π –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä–µ–¥! üöÄ"
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
	err = ch.notificationService.SendNotificationToAll(message)
	if err != nil {
		errorMsg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, 
			fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %v", err))
		ch.bot.Send(errorMsg)
		return err
	}

	// –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	userCount, _ := ch.notificationService.GetUserCount()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
	confirmText := fmt.Sprintf("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ %s —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n"+
		"üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: %d –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"+
		"üì§ –°—Ç–∞—Ç—É—Å: –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", typeName, userCount)
	
	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, confirmText)
	_, err = ch.bot.Send(msg)
	return err
}

// –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å bot.go
func (ch *CommandHandler) HandleMenu(update tgbotapi.Update) error {
	return ch.HandleStart(update)
}

func (ch *CommandHandler) HandleNotify(update tgbotapi.Update) error {
	userID := update.Message.From.ID
	text := "üì¢ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
	msg := tgbotapi.NewMessage(userID, text)
	_, err := ch.bot.Send(msg)
	return err
}

func (ch *CommandHandler) HandleSetWeek(update tgbotapi.Update) error {
	userID := update.Message.From.ID
	text := "‚öôÔ∏è –ö–æ–º–∞–Ω–¥–∞ /setweek –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
	msg := tgbotapi.NewMessage(userID, text)
	_, err := ch.bot.Send(msg)
	return err
}

func (ch *CommandHandler) HandleAdminHelp(update tgbotapi.Update) error {
	return ch.HandleAdmin(update)
}

func (ch *CommandHandler) HandleUnknownCommand(update tgbotapi.Update) error {
	userID := update.Message.From.ID
	text := "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
	msg := tgbotapi.NewMessage(userID, text)
	_, err := ch.bot.Send(msg)
	return err
}

func (ch *CommandHandler) HandleAdminPanel(update tgbotapi.Update) error {
	return ch.adminHandler.HandleAdminHelp(&tgbotapi.CallbackQuery{
		From:    update.CallbackQuery.From,
		Message: update.CallbackQuery.Message,
	})
}
