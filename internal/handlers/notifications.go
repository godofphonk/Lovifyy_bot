package handlers

import (
	"fmt"
	"strconv"
	"strings"
	"time"

	"Lovifyy_bot/internal/models"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// showNotificationTypeActions –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
func (ch *CommandHandler) showNotificationTypeActions(userID int64, typ string) error {
	title := map[string]string{
		string(models.NotificationDiary):      "üíå –ú–∏–Ω–∏‚Äë–¥–Ω–µ–≤–Ω–∏–∫",
		string(models.NotificationExercise):   "üë©üèº‚Äç‚ù§Ô∏è‚Äçüë®üèª –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è",
		string(models.NotificationMotivation): "üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è",
	}[typ]
	if title == "" {
		title = "üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
	}

	text := fmt.Sprintf("%s\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", title)
	kb := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", "notify_preview_"+typ),
			tgbotapi.NewInlineKeyboardButtonData("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º", "notify_send_all_"+typ),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", "notify_schedule_"+typ),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "admin_notifications"),
		),
	)
	msg := tgbotapi.NewMessage(userID, text)
	msg.ReplyMarkup = kb
	_, err := ch.bot.Send(msg)
	return err
}

// previewNotification ‚Äî GPT –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
func (ch *CommandHandler) previewNotification(userID int64, typ string) error {
	nt := models.NotificationType(typ)
	text, err := ch.notificationService.GenerateNotification(nt)
	if err != nil {
		return ch.simpleMsg(userID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: %v", err))
	}
	msg := tgbotapi.NewMessage(userID, "üìù –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:\n\n"+text)
	msg.ParseMode = "HTML"
	_, err = ch.bot.Send(msg)
	return err
}

// sendNowNotification ‚Äî –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
func (ch *CommandHandler) sendNowNotification(userID int64, typ string) error {
	nt := models.NotificationType(typ)
	if err := ch.notificationService.SendInstantNotification(nt, nil); err != nil {
		return ch.simpleMsg(userID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %v", err))
	}
	return ch.simpleMsg(userID, "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º.")
}

// showSchedulePresets ‚Äî –ø—Ä–µ—Å–µ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
func (ch *CommandHandler) showSchedulePresets(userID int64, typ string) error {
	now := time.Now()
	today10 := time.Date(now.Year(), now.Month(), now.Day(), 10, 0, 0, 0, now.Location()).Unix()
	today20 := time.Date(now.Year(), now.Month(), now.Day(), 20, 0, 0, 0, now.Location()).Unix()
	tomorrow := now.Add(24 * time.Hour)
	tomorrow10 := time.Date(tomorrow.Year(), tomorrow.Month(), tomorrow.Day(), 10, 0, 0, 0, now.Location()).Unix()
	tomorrow20 := time.Date(tomorrow.Year(), tomorrow.Month(), tomorrow.Day(), 20, 0, 0, 0, now.Location()).Unix()

	text := "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:"
	kb := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–°–µ–≥–æ–¥–Ω—è 10:00", fmt.Sprintf("notify_schedule_preset_%s_%d", typ, today10)),
			tgbotapi.NewInlineKeyboardButtonData("–°–µ–≥–æ–¥–Ω—è 20:00", fmt.Sprintf("notify_schedule_preset_%s_%d", typ, today20)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ó–∞–≤—Ç—Ä–∞ 10:00", fmt.Sprintf("notify_schedule_preset_%s_%d", typ, tomorrow10)),
			tgbotapi.NewInlineKeyboardButtonData("–ó–∞–≤—Ç—Ä–∞ 20:00", fmt.Sprintf("notify_schedule_preset_%s_%d", typ, tomorrow20)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "admin_notifications"),
		),
	)
	msg := tgbotapi.NewMessage(userID, text)
	msg.ReplyMarkup = kb
	_, err := ch.bot.Send(msg)
	return err
}

// scheduleNotificationAt ‚Äî –∑–∞–ø–∏—Å—å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
func (ch *CommandHandler) scheduleNotificationAt(userID int64, typ string, at time.Time) error {
	nt := models.NotificationType(typ)
	if _, err := ch.notificationService.ScheduleNotification(at, nt, nil); err != nil {
		return ch.simpleMsg(userID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: %v", err))
	}
	return ch.simpleMsg(userID, fmt.Sprintf("‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ %s", at.Format("02.01 15:04")))
}

// showScheduledNotifications ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
func (ch *CommandHandler) showScheduledNotifications(userID int64) error {
	items, err := ch.notificationService.ListScheduled()
	if err != nil {
		return ch.simpleMsg(userID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: %v", err))
	}
	if len(items) == 0 {
		return ch.simpleMsg(userID, "üìã –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ—Ç.")
	}
	
	text := "üìã –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n\n"
	var rows [][]tgbotapi.InlineKeyboardButton
	
	// –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å UTC+5 –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
	utc5 := time.FixedZone("UTC+5", 5*60*60)
	
	for i, it := range items {
		// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ UTC+5 –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
		localTime := it.SendAt.In(utc5)
		
		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
		var typeEmoji, typeName string
		switch string(it.Type) {
		case "diary":
			typeEmoji = "üíå"
			typeName = "–ú–∏–Ω–∏-–¥–Ω–µ–≤–Ω–∏–∫"
		case "exercise":
			typeEmoji = "üë©üèº‚Äç‚ù§Ô∏è‚Äçüë®üèª"
			typeName = "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏"
		case "motivation":
			typeEmoji = "üíí"
			typeName = "–ú–æ—Ç–∏–≤–∞—Ü–∏—è"
		case "custom":
			typeEmoji = "‚úèÔ∏è"
			typeName = "–ö–∞—Å—Ç–æ–º–Ω–æ–µ"
		default:
			typeEmoji = "üì¢"
			typeName = string(it.Type)
		}
		
		// –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
		text += fmt.Sprintf("üîπ **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ #%d**\n", i+1)
		text += fmt.Sprintf("üìÖ **–î–∞—Ç–∞:** %s\n", localTime.Format("02.01.2006 15:04"))
		text += fmt.Sprintf("üì¢ **–¢–∏–ø:** %s %s\n", typeEmoji, typeName)
		
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
		var messageText string
		if it.CustomText != "" {
			// –î–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–µ–∫—Å—Ç
			messageText = it.CustomText
		} else if it.Message != "" {
			// –î–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			messageText = it.Message
		} else {
			messageText = "–¢–µ–∫—Å—Ç –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ"
		}
		
		text += fmt.Sprintf("üí¨ **–¢–µ–∫—Å—Ç:** %s\n", messageText)
		text += fmt.Sprintf("üÜî **ID:** `%s`\n\n", it.ID)
		
		// –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å #%d", i+1), "notify_cancel_"+it.ID),
		))
	}
	
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "notifications_menu"),
	))
	
	kb := tgbotapi.NewInlineKeyboardMarkup(rows...)
	msg := tgbotapi.NewMessage(userID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = kb
	_, err = ch.bot.Send(msg)
	return err
}

// cancelScheduledNotification ‚Äî –æ—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏
func (ch *CommandHandler) cancelScheduledNotification(userID int64, id string) error {
	if err := ch.notificationService.CancelScheduled(id); err != nil {
		return ch.simpleMsg(userID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã: %v", err))
	}
	return ch.simpleMsg(userID, "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
}

// simpleMsg ‚Äî —É—Ç–∏–ª–∏—Ç–∞


// handleNotificationCallbacks –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–æ–ª–±—ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
func (ch *CommandHandler) handleNotificationCallbacks(userID int64, data string) error {
	// preview GPT
	if strings.HasPrefix(data, "notify_preview_") {
		typ := strings.TrimPrefix(data, "notify_preview_")
		return ch.previewNotification(userID, typ)
	}
	// send now
	if strings.HasPrefix(data, "notify_send_all_") {
		typ := strings.TrimPrefix(data, "notify_send_all_")
		return ch.sendNowNotification(userID, typ)
	}
	// schedule presets or menu
	if strings.HasPrefix(data, "notify_schedule_") {
		if strings.HasPrefix(data, "notify_schedule_preset_") {
			rest := strings.TrimPrefix(data, "notify_schedule_preset_")
			parts := strings.Split(rest, "_")
			if len(parts) < 2 {
				return ch.simpleMsg(userID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–µ—Å–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
			}
			typ := parts[0]
			ts, err := strconv.ParseInt(parts[1], 10, 64)
			if err != nil {
				return ch.simpleMsg(userID, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ –ø—Ä–µ—Å–µ—Ç–∞")
			}
			return ch.scheduleNotificationAt(userID, typ, time.Unix(ts, 0))
		}
		typ := strings.TrimPrefix(data, "notify_schedule_")
		return ch.showSchedulePresets(userID, typ)
	}
	// cancel scheduled
	if strings.HasPrefix(data, "notify_cancel_") {
		id := strings.TrimPrefix(data, "notify_cancel_")
		return ch.cancelScheduledNotification(userID, id)
	}
	return nil
}


