package scheduling

import (
	"fmt"
	"strings"
	"time"

	"Lovifyy_bot/internal/models"
	"Lovifyy_bot/internal/services"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// Handler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
type Handler struct {
	bot                 *tgbotapi.BotAPI
	userManager         *models.UserManager
	notificationService *services.NotificationService
}

// NewHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
func NewHandler(bot *tgbotapi.BotAPI, userManager *models.UserManager, notificationService *services.NotificationService) *Handler {
	return &Handler{
		bot:                 bot,
		userManager:         userManager,
		notificationService: notificationService,
	}
}

// HandleScheduleNotification –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –≤ legacy
func (h *Handler) HandleScheduleNotification(callbackQuery *tgbotapi.CallbackQuery) error {
	userID := callbackQuery.From.ID

	if !h.userManager.IsAdmin(userID) {
		msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
		_, err := h.bot.Send(msg)
		return err
	}

	response := "‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n\n" +
		"üóìÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏:\n" +
		"üïê –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: UTC+5 (–ê–ª–º–∞—Ç—ã/–¢–∞—à–∫–µ–Ω—Ç)"

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –¥–∞—Ç–∞–º–∏ (—Å–µ–≥–æ–¥–Ω—è + —Å–ª–µ–¥—É—é—â–∏–µ 6 –¥–Ω–µ–π) –∫–∞–∫ –≤ legacy
	var buttons [][]tgbotapi.InlineKeyboardButton

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC+5 (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π offset)
	utc5 := time.FixedZone("UTC+5", 5*60*60) // 5 —á–∞—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
	nowUTC5 := time.Now().In(utc5)

	for i := 0; i < 7; i++ {
		date := nowUTC5.AddDate(0, 0, i)
		dateStr := date.Format("02.01.2006")
		var dayName string

		switch i {
		case 0:
			dayName = "–°–µ–≥–æ–¥–Ω—è"
		case 1:
			dayName = "–ó–∞–≤—Ç—Ä–∞"
		default:
			dayName = date.Format("Mon") // Wed, Thu, Fri, Sat, Sun
		}

		buttonText := fmt.Sprintf("%s (%s)", dayName, dateStr)
		callbackData := fmt.Sprintf("schedule_date_%s", dateStr)
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(buttonText, callbackData),
		))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–≤–æ—è –¥–∞—Ç–∞"
	buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üìÖ –°–≤–æ—è –¥–∞—Ç–∞", "schedule_custom_date"),
	))

	// –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
	buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "notifications_menu"),
	))

	keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)
	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, response)
	msg.ReplyMarkup = keyboard
	_, err := h.bot.Send(msg)
	return err
}

// HandleScheduleDateCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
func (h *Handler) HandleScheduleDateCallback(callbackQuery *tgbotapi.CallbackQuery, data string) error {
	userID := callbackQuery.From.ID

	if !h.userManager.IsAdmin(userID) {
		msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
		_, err := h.bot.Send(msg)
		return err
	}

	// –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ callback: schedule_date_13.10.2025
	parts := strings.Split(data, "_")
	if len(parts) < 3 {
		msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
		_, err := h.bot.Send(msg)
		return err
	}

	selectedDate := parts[2] // 13.10.2025

	response := fmt.Sprintf("üïê –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è %s:\n\n"+
		"‚ö†Ô∏è –í—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ UTC+5 (–ê–ª–º–∞—Ç—ã/–¢–∞—à–∫–µ–Ω—Ç)", selectedDate)

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º –∫–∞–∫ –≤ legacy
	timeButtons := [][]tgbotapi.InlineKeyboardButton{
		{
			tgbotapi.NewInlineKeyboardButtonData("üåÖ 06:00", fmt.Sprintf("schedule_time_%s_06:00", selectedDate)),
			tgbotapi.NewInlineKeyboardButtonData("üåÑ 08:00", fmt.Sprintf("schedule_time_%s_08:00", selectedDate)),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("‚òÄÔ∏è 10:00", fmt.Sprintf("schedule_time_%s_10:00", selectedDate)),
			tgbotapi.NewInlineKeyboardButtonData("üåû 12:00", fmt.Sprintf("schedule_time_%s_12:00", selectedDate)),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("üåá 15:00", fmt.Sprintf("schedule_time_%s_15:00", selectedDate)),
			tgbotapi.NewInlineKeyboardButtonData("üåÜ 18:00", fmt.Sprintf("schedule_time_%s_18:00", selectedDate)),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("üåÉ 20:00", fmt.Sprintf("schedule_time_%s_20:00", selectedDate)),
			tgbotapi.NewInlineKeyboardButtonData("üåô 22:00", fmt.Sprintf("schedule_time_%s_22:00", selectedDate)),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("üïõ 00:00", fmt.Sprintf("schedule_time_%s_00:00", selectedDate)),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("‚è∞ –°–≤–æ–µ –≤—Ä–µ–º—è", fmt.Sprintf("schedule_custom_time_%s", selectedDate)),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –∫ –¥–∞—Ç–∞–º", "schedule_notification"),
		},
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(timeButtons...)
	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, response)
	msg.ReplyMarkup = keyboard
	_, err := h.bot.Send(msg)
	return err
}

// HandleScheduleTimeCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
func (h *Handler) HandleScheduleTimeCallback(callbackQuery *tgbotapi.CallbackQuery, data string) error {
	userID := callbackQuery.From.ID

	if !h.userManager.IsAdmin(userID) {
		msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
		_, err := h.bot.Send(msg)
		return err
	}

	// –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: schedule_time_13.10.2025_10:00
	parts := strings.Split(data, "_")
	if len(parts) < 4 {
		msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
		_, err := h.bot.Send(msg)
		return err
	}

	selectedDate := parts[2] // 13.10.2025
	selectedTime := parts[3] // 10:00

	response := fmt.Sprintf("üì¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:\n\n"+
		"üìÖ –î–∞—Ç–∞: %s\n"+
		"üïê –í—Ä–µ–º—è: %s (UTC+5)", selectedDate, selectedTime)

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–∏–ø–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –≤ legacy
	typeButtons := [][]tgbotapi.InlineKeyboardButton{
		{
			tgbotapi.NewInlineKeyboardButtonData("üíå –ú–∏–Ω–∏-–¥–Ω–µ–≤–Ω–∏–∫", fmt.Sprintf("schedule_type_%s_%s_diary", selectedDate, selectedTime)),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("üë©üèº‚Äç‚ù§Ô∏è‚Äçüë®üèª –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏", fmt.Sprintf("schedule_type_%s_%s_exercise", selectedDate, selectedTime)),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("üíí –ú–æ—Ç–∏–≤–∞—Ü–∏—è", fmt.Sprintf("schedule_type_%s_%s_motivation", selectedDate, selectedTime)),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("‚úèÔ∏è –ö–∞—Å—Ç–æ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", fmt.Sprintf("schedule_type_%s_%s_custom", selectedDate, selectedTime)),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –∫ –≤—Ä–µ–º–µ–Ω–∏", fmt.Sprintf("schedule_date_%s", selectedDate)),
		},
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(typeButtons...)
	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, response)
	msg.ReplyMarkup = keyboard
	_, err := h.bot.Send(msg)
	return err
}
