package scheduling

import (
	"fmt"
	"strings"
	"time"

	"Lovifyy_bot/internal/models"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// HandleScheduleTypeCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É
func (h *Handler) HandleScheduleTypeCallback(callbackQuery *tgbotapi.CallbackQuery, data string) error {
	userID := callbackQuery.From.ID

	if !h.userManager.IsAdmin(userID) {
		msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
		_, err := h.bot.Send(msg)
		return err
	}

	// –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: schedule_type_13.10.2025_10:00_diary
	parts := strings.Split(data, "_")
	if len(parts) < 5 {
		msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
		_, err := h.bot.Send(msg)
		return err
	}

	selectedDate := parts[2] // 13.10.2025
	selectedTime := parts[3] // 10:00
	notificationType := parts[4] // diary/exercise/motivation/custom

	// –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ UTC+5, –∑–∞—Ç–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC
	utc5 := time.FixedZone("UTC+5", 5*60*60) // 5 —á–∞—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

	// –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
	dateTimeStr := fmt.Sprintf("%s %s", selectedDate, selectedTime)
	scheduledTime, err := time.ParseInLocation("02.01.2006 15:04", dateTimeStr, utc5)
	if err != nil {
		msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏")
		_, err := h.bot.Send(msg)
		return err
	}

	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC (–æ—Ç–Ω–∏–º–∞–µ–º 5 —á–∞—Å–æ–≤)
	scheduledTimeUTC := scheduledTime.UTC()

	var typeName string
	switch notificationType {
	case "diary":
		typeName = "üíå –ú–∏–Ω–∏-–¥–Ω–µ–≤–Ω–∏–∫"
	case "exercise":
		typeName = "üë©üèº‚Äç‚ù§Ô∏è‚Äçüë®üèª –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏"
	case "motivation":
		typeName = "üíí –ú–æ—Ç–∏–≤–∞—Ü–∏—è"
	case "custom":
		// –î–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω—É–∂–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
		h.userManager.SetState(userID, "schedule_custom_text")
		msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, 
			fmt.Sprintf("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n\n"+
				"üìÖ –î–∞—Ç–∞: %s\n"+
				"üïê –í—Ä–µ–º—è: %s (UTC+5)\n\n"+
				"–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", selectedDate, selectedTime))
		_, err := h.bot.Send(msg)
		return err
	default:
		msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
		_, err := h.bot.Send(msg)
		return err
	}

	// –°–æ–∑–¥–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ NotificationService
	var modelType models.NotificationType
	switch notificationType {
	case "diary":
		modelType = models.NotificationDiary
	case "exercise":
		modelType = models.NotificationExercise
	case "motivation":
		modelType = models.NotificationMotivation
	}

	// –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
	scheduleID, err := h.notificationService.ScheduleNotification(scheduledTimeUTC, modelType, nil)
	if err != nil {
		response := fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %v", err)
		msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, response)
		_, err := h.bot.Send(msg)
		return err
	}

	response := fmt.Sprintf("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ!\n\n"+
		"üÜî ID –∑–∞–¥–∞—á–∏: %s\n"+
		"üì¢ –¢–∏–ø: %s\n"+
		"üìÖ –î–∞—Ç–∞: %s\n"+
		"üïê –í—Ä–µ–º—è: %s (UTC+5)\n"+
		"üåç UTC –≤—Ä–µ–º—è: %s\n\n"+
		"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.",
		scheduleID, typeName, selectedDate, selectedTime, scheduledTimeUTC.Format("02.01.2006 15:04"))

	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, response)
	_, err = h.bot.Send(msg)
	return err
}

// HandleScheduleCustomTimeCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–°–≤–æ–µ –≤—Ä–µ–º—è"
func (h *Handler) HandleScheduleCustomTimeCallback(callbackQuery *tgbotapi.CallbackQuery, data string) error {
	userID := callbackQuery.From.ID

	if !h.userManager.IsAdmin(userID) {
		msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
		_, err := h.bot.Send(msg)
		return err
	}

	// –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ callback: schedule_custom_time_13.10.2025
	parts := strings.Split(data, "_")
	if len(parts) < 4 {
		msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
		_, err := h.bot.Send(msg)
		return err
	}

	selectedDate := parts[3] // 13.10.2025

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
	h.userManager.SetState(userID, fmt.Sprintf("custom_time_%s", selectedDate))

	text := fmt.Sprintf("‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è %s\n\n"+
		"–§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30)\n"+
		"–í—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ UTC+5", selectedDate)

	kb := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∞", fmt.Sprintf("schedule_date_%s", selectedDate)),
		),
	)

	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, text)
	msg.ReplyMarkup = kb
	_, err := h.bot.Send(msg)
	return err
}

// HandleScheduleCustomDateCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–°–≤–æ—è –¥–∞—Ç–∞"
func (h *Handler) HandleScheduleCustomDateCallback(callbackQuery *tgbotapi.CallbackQuery) error {
	userID := callbackQuery.From.ID

	if !h.userManager.IsAdmin(userID) {
		msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
		_, err := h.bot.Send(msg)
		return err
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
	h.userManager.SetState(userID, "custom_date")

	text := "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É\n\n" +
		"–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.10.2025)\n" +
		"–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ —Ä–∞–Ω—å—à–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è"

	kb := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∞", "schedule_notification"),
		),
	)

	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, text)
	msg.ReplyMarkup = kb
	_, err := h.bot.Send(msg)
	return err
}
