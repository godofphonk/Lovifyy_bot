package diary

import (
	"fmt"
	"strings"

	"github.com/godofphonk/lovifyy-bot/internal/exercises"
	"github.com/godofphonk/lovifyy-bot/internal/history"
	"github.com/godofphonk/lovifyy-bot/internal/models"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// Handler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–Ω–µ–≤–Ω–∏–∫–∞
type Handler struct {
	bot             *tgbotapi.BotAPI
	userManager     *models.UserManager
	exerciseManager *exercises.Manager
	historyManager  *history.Manager
}

// NewHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–Ω–µ–≤–Ω–∏–∫–∞
func NewHandler(bot *tgbotapi.BotAPI, userManager *models.UserManager, exerciseManager *exercises.Manager, historyManager *history.Manager) *Handler {
	return &Handler{
		bot:             bot,
		userManager:     userManager,
		exerciseManager: exerciseManager,
		historyManager:  historyManager,
	}
}

// HandleDiary –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ú–∏–Ω–∏-–¥–Ω–µ–≤–Ω–∏–∫" –∫–∞–∫ –≤ legacy
func (h *Handler) HandleDiary(callbackQuery *tgbotapi.CallbackQuery) error {
	response := "üìù –ú–∏–Ω–∏ –¥–Ω–µ–≤–Ω–∏–∫\n\n" +
		"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤ –∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫:"

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≥–µ–Ω–¥–µ—Ä–∞ –∫–∞–∫ –≤ legacy
	buttons := [][]tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üë® –ü–∞—Ä–µ–Ω—å", "diary_gender_male"),
			tgbotapi.NewInlineKeyboardButtonData("üë© –î–µ–≤—É—à–∫–∞", "diary_gender_female"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏", "diary_view"),
		),
	}

	diaryKeyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)

	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, response)
	msg.ReplyMarkup = diaryKeyboard
	_, err := h.bot.Send(msg)
	return err
}

// HandleDiaryGender –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª–∞ –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–µ–¥–µ–ª–∏
func (h *Handler) HandleDiaryGender(callbackQuery *tgbotapi.CallbackQuery, gender string) error {
	// –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	fmt.Printf("üîç HandleDiaryGender called with gender: %s\n", gender)
	
	var genderEmoji string
	var genderText string
	if gender == "male" {
		genderEmoji = "üë®"
		genderText = "–ø–∞—Ä–Ω—è"
	} else {
		genderEmoji = "üë©"
		genderText = "–¥–µ–≤—É—à–∫–∏"
	}

	response := fmt.Sprintf("üìù –ú–∏–Ω–∏ –¥–Ω–µ–≤–Ω–∏–∫ –¥–ª—è %s %s\n\n"+
		"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è –∑–∞–ø–∏—Å–µ–π:", genderEmoji, genderText)

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏
	buttons := [][]tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("1Ô∏è‚É£ –ù–µ–¥–µ–ª—è 1", fmt.Sprintf("diary_week_%s_1", gender)),
			tgbotapi.NewInlineKeyboardButtonData("2Ô∏è‚É£ –ù–µ–¥–µ–ª—è 2", fmt.Sprintf("diary_week_%s_2", gender)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("3Ô∏è‚É£ –ù–µ–¥–µ–ª—è 3", fmt.Sprintf("diary_week_%s_3", gender)),
			tgbotapi.NewInlineKeyboardButtonData("4Ô∏è‚É£ –ù–µ–¥–µ–ª—è 4", fmt.Sprintf("diary_week_%s_4", gender)),
		),
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)
	
	// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	deleteMsg := tgbotapi.NewDeleteMessage(callbackQuery.Message.Chat.ID, callbackQuery.Message.MessageID)
	h.bot.Send(deleteMsg)
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, response)
	msg.ReplyMarkup = keyboard
	_, err := h.bot.Send(msg)
	return err
}

// HandleDiaryWeek –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–µ–¥–µ–ª–∏ –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞
func (h *Handler) HandleDiaryWeek(callbackQuery *tgbotapi.CallbackQuery, data string) error {
	// –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: diary_week_<gender>_<week>
	parts := strings.Split(data, "_")
	if len(parts) < 4 {
		return fmt.Errorf("invalid diary week callback data: %s", data)
	}

	gender := parts[2]
	week := parts[3]

	var genderEmoji string
	var genderText string
	if gender == "male" {
		genderEmoji = "üë®"
		genderText = "–ø–∞—Ä–Ω—è"
	} else {
		genderEmoji = "üë©"
		genderText = "–¥–µ–≤—É—à–∫–∏"
	}

	response := fmt.Sprintf("üìù –î–Ω–µ–≤–Ω–∏–∫ %s %s - –ù–µ–¥–µ–ª—è %s\n\n"+
		"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø–∏—Å–∏:", genderEmoji, genderText, week)

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–∏–ø–æ–≤ –∑–∞–ø–∏—Å–µ–π
	buttons := [][]tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí≠ –õ–∏—á–Ω—ã–µ –º—ã—Å–ª–∏", fmt.Sprintf("diary_type_%s_%s_personal", gender, week)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùì –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã", fmt.Sprintf("diary_type_%s_%s_questions", gender, week)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üë´ –û—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã", fmt.Sprintf("diary_type_%s_%s_joint", gender, week)),
		),
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)
	
	// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	deleteMsg := tgbotapi.NewDeleteMessage(callbackQuery.Message.Chat.ID, callbackQuery.Message.MessageID)
	h.bot.Send(deleteMsg)
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, response)
	msg.ReplyMarkup = keyboard
	_, err := h.bot.Send(msg)
	return err
}

// HandleDiaryType –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ
func (h *Handler) HandleDiaryType(callbackQuery *tgbotapi.CallbackQuery, data string) error {
	// –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	fmt.Printf("üîç HandleDiaryType called with data: %s\n", data)
	
	// –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: diary_type_<gender>_<week>_<type>
	parts := strings.Split(data, "_")
	if len(parts) < 5 {
		fmt.Printf("‚ùå Invalid callback data format: %s (parts: %v)\n", data, parts)
		return fmt.Errorf("invalid diary type callback data: %s", data)
	}

	gender := parts[2]
	week := parts[3]
	diaryType := parts[4]

	userID := callbackQuery.From.ID
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
	h.userManager.SetState(userID, fmt.Sprintf("diary_%s_%s_%s", gender, week, diaryType))

	var genderEmoji string
	var genderText string
	if gender == "male" {
		genderEmoji = "üë®"
		genderText = "–ø–∞—Ä–Ω—è"
	} else {
		genderEmoji = "üë©"
		genderText = "–¥–µ–≤—É—à–∫–∏"
	}

	var typeText string
	var response string
	
	switch diaryType {
	case "personal":
		typeText = "üí≠ –õ–∏—á–Ω—ã–µ –º—ã—Å–ª–∏"
		response = fmt.Sprintf("üìù –î–Ω–µ–≤–Ω–∏–∫ %s %s - –ù–µ–¥–µ–ª—è %s\n%s\n\n"+
			"–†–µ–∂–∏–º –∑–∞–ø–∏—Å–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –º—ã—Å–ª–∏, –∑–∞–º–µ—Ç–∫–∏ –∏–ª–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è. "+
			"–Ø —Å–æ—Ö—Ä–∞–Ω—é –≤–∞—à—É –∑–∞–ø–∏—Å—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.\n\n"+
			"–≠—Ç–æ –≤–∞—à–µ –ª–∏—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π.", genderEmoji, genderText, week, typeText)
	
	case "questions":
		typeText = "‚ùì –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã"
		// –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –Ω–µ–¥–µ–ª–∏ –∏–∑ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
		weekNum := 1
		switch week {
		case "1": weekNum = 1
		case "2": weekNum = 2
		case "3": weekNum = 3
		case "4": weekNum = 4
		}
		
		weekData, err := h.exerciseManager.GetWeekExercise(weekNum)
		if err != nil || weekData == nil {
			response = fmt.Sprintf("üìù –î–Ω–µ–≤–Ω–∏–∫ %s %s - –ù–µ–¥–µ–ª—è %s\n%s\n\n"+
				"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏.\n\n"+
				"–†–µ–∂–∏–º –∑–∞–ø–∏—Å–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ–¥–µ–ª–∏.", 
				genderEmoji, genderText, week, typeText)
		} else {
			response = fmt.Sprintf("üìù –î–Ω–µ–≤–Ω–∏–∫ %s %s - –ù–µ–¥–µ–ª—è %s\n%s\n\n"+
				"üìã **–í–æ–ø—Ä–æ—Å—ã –Ω–µ–¥–µ–ª–∏:**\n%s\n\n"+
				"–†–µ–∂–∏–º –∑–∞–ø–∏—Å–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã.", 
				genderEmoji, genderText, week, typeText, weekData.Questions)
		}
	
	case "joint":
		typeText = "üë´ –û—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
		// –ü–æ–ª—É—á–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ–¥–µ–ª–∏ –∏–∑ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
		weekNum := 1
		switch week {
		case "1": weekNum = 1
		case "2": weekNum = 2
		case "3": weekNum = 3
		case "4": weekNum = 4
		}
		
		weekData, err := h.exerciseManager.GetWeekExercise(weekNum)
		if err != nil || weekData == nil {
			response = fmt.Sprintf("üìù –î–Ω–µ–≤–Ω–∏–∫ %s %s - –ù–µ–¥–µ–ª—è %s\n%s\n\n"+
				"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏.\n\n"+
				"–†–µ–∂–∏–º –∑–∞–ø–∏—Å–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ–¥–µ–ª–∏.", 
				genderEmoji, genderText, week, typeText)
		} else {
			response = fmt.Sprintf("üìù –î–Ω–µ–≤–Ω–∏–∫ %s %s - –ù–µ–¥–µ–ª—è %s\n%s\n\n"+
				"üë´ **–°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ–¥–µ–ª–∏:**\n%s\n\n"+
				"–†–µ–∂–∏–º –∑–∞–ø–∏—Å–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —ç—Ç–∏ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.", 
				genderEmoji, genderText, week, typeText, weekData.JointQuestions)
		}
	
	default:
		typeText = "üìù –ó–∞–ø–∏—Å—å"
		response = fmt.Sprintf("üìù –î–Ω–µ–≤–Ω–∏–∫ %s %s - –ù–µ–¥–µ–ª—è %s\n%s\n\n"+
			"–†–µ–∂–∏–º –∑–∞–ø–∏—Å–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –º—ã—Å–ª–∏, –∑–∞–º–µ—Ç–∫–∏ –∏–ª–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è.", 
			genderEmoji, genderText, week, typeText)
	}
	
	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, response)
	_, err := h.bot.Send(msg)
	return err
}

// HandleDiaryView –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω–∏–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª–∞
func (h *Handler) HandleDiaryView(callbackQuery *tgbotapi.CallbackQuery) error {
	response := "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω–∏–∫–∞\n\n" +
		"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π:"

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
	buttons := [][]tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üë® –ü–∞—Ä–µ–Ω—å", "diary_view_male"),
			tgbotapi.NewInlineKeyboardButtonData("üë© –î–µ–≤—É—à–∫–∞", "diary_view_female"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "diary"),
		),
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)
	
	// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	editMsg := tgbotapi.NewEditMessageText(callbackQuery.Message.Chat.ID, callbackQuery.Message.MessageID, response)
	editMsg.ReplyMarkup = &keyboard
	_, err := h.bot.Send(editMsg)
	return err
}

// HandleDiaryViewGender –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–µ–¥–µ–ª–∏
func (h *Handler) HandleDiaryViewGender(callbackQuery *tgbotapi.CallbackQuery, data string) error {
	// –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: diary_view_<gender>
	parts := strings.Split(data, "_")
	if len(parts) < 3 {
		return fmt.Errorf("invalid diary view callback data: %s", data)
	}

	gender := parts[2]
	
	var genderEmoji string
	var genderText string
	if gender == "male" {
		genderEmoji = "üë®"
		genderText = "–ø–∞—Ä–Ω—è"
	} else {
		genderEmoji = "üë©"
		genderText = "–¥–µ–≤—É—à–∫–∏"
	}

	response := fmt.Sprintf("üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω–∏–∫–∞ %s %s\n\n"+
		"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", genderEmoji, genderText)

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
	buttons := [][]tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("1Ô∏è‚É£ –ù–µ–¥–µ–ª—è 1", fmt.Sprintf("diary_view_week_%s_1", gender)),
			tgbotapi.NewInlineKeyboardButtonData("2Ô∏è‚É£ –ù–µ–¥–µ–ª—è 2", fmt.Sprintf("diary_view_week_%s_2", gender)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("3Ô∏è‚É£ –ù–µ–¥–µ–ª—è 3", fmt.Sprintf("diary_view_week_%s_3", gender)),
			tgbotapi.NewInlineKeyboardButtonData("4Ô∏è‚É£ –ù–µ–¥–µ–ª—è 4", fmt.Sprintf("diary_view_week_%s_4", gender)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "diary_view"),
		),
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)
	
	// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	editMsg := tgbotapi.NewEditMessageText(callbackQuery.Message.Chat.ID, callbackQuery.Message.MessageID, response)
	editMsg.ReplyMarkup = &keyboard
	_, err := h.bot.Send(editMsg)
	return err
}

// HandleDiaryViewWeek –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–µ–¥–µ–ª–∏
func (h *Handler) HandleDiaryViewWeek(callbackQuery *tgbotapi.CallbackQuery, data string) error {
	// –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: diary_view_week_<gender>_<week>
	parts := strings.Split(data, "_")
	if len(parts) < 5 {
		return fmt.Errorf("invalid diary view week callback data: %s", data)
	}

	gender := parts[3]
	week := parts[4]
	
	weekNum := 1
	switch week {
	case "1": weekNum = 1
	case "2": weekNum = 2
	case "3": weekNum = 3
	case "4": weekNum = 4
	}
	
	var genderEmoji string
	var genderText string
	if gender == "male" {
		genderEmoji = "üë®"
		genderText = "–ø–∞—Ä–Ω—è"
	} else {
		genderEmoji = "üë©"
		genderText = "–¥–µ–≤—É—à–∫–∏"
	}

	userID := callbackQuery.From.ID
	
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π –Ω–µ–¥–µ–ª–∏ –∏ –ø–æ–ª–∞
	allEntries, err := h.historyManager.GetAllDiaryEntriesForWeekAndGender(userID, gender, weekNum)
	if err != nil || len(allEntries) == 0 {
		response := fmt.Sprintf("üëÄ –ó–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞ %s %s - –ù–µ–¥–µ–ª—è %d\n\n"+
			"üìù –ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"+
			"–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"+
			"‚Ä¢ –ö–Ω–æ–ø–∫—É \"üìù –ú–∏–Ω–∏ –¥–Ω–µ–≤–Ω–∏–∫\"\n"+
			"‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ %s %s\n"+
			"‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é %d\n"+
			"‚Ä¢ –°–¥–µ–ª–∞–π—Ç–µ –∑–∞–ø–∏—Å–∏ –≤ –ª—é–±–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
			genderEmoji, genderText, weekNum, genderEmoji, genderText, weekNum)

		editMsg := tgbotapi.NewEditMessageText(callbackQuery.Message.Chat.ID, callbackQuery.Message.MessageID, response)
		
		// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
		backButton := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", fmt.Sprintf("diary_view_%s", gender)),
			),
		)
		editMsg.ReplyMarkup = &backButton
		
		_, err = h.bot.Send(editMsg)
		return err
	}

	// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ —Ç–∏–ø–∞–º
	entriesByType := make(map[string][]history.DiaryEntry)
	for _, entry := range allEntries {
		entriesByType[entry.Type] = append(entriesByType[entry.Type], entry)
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∑–∞–ø–∏—Å—è–º–∏
	response := fmt.Sprintf("üëÄ –ó–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞ %s %s - –ù–µ–¥–µ–ª—è %d\n\n", genderEmoji, genderText, weekNum)
	
	typeNames := map[string]string{
		"personal": "üí≠ –õ–∏—á–Ω—ã–µ –º—ã—Å–ª–∏",
		"questions": "‚ùì –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã", 
		"joint": "üë´ –û—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
	}
	
	entryCount := 0
	for entryType, entries := range entriesByType {
		if len(entries) > 0 {
			typeName, exists := typeNames[entryType]
			if !exists {
				typeName = fmt.Sprintf("üìù %s", entryType)
			}
			
			response += fmt.Sprintf("%s:\n", typeName)
			for i, entry := range entries {
				entryCount++
				// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
				entryText := entry.Entry
				if len(entryText) > 100 {
					entryText = entryText[:100] + "..."
				}
				response += fmt.Sprintf("%d. %s (%s)\n", i+1, entryText, entry.Timestamp.Format("02.01 15:04"))
			}
			response += "\n"
		}
	}
	
	response += fmt.Sprintf("üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: %d", entryCount)

	editMsg := tgbotapi.NewEditMessageText(callbackQuery.Message.Chat.ID, callbackQuery.Message.MessageID, response)
	
	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
	buttons := [][]tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", fmt.Sprintf("diary_view_%s", gender)),
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"),
		),
	}
	keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)
	editMsg.ReplyMarkup = &keyboard
	
	_, err = h.bot.Send(editMsg)
	return err
}
