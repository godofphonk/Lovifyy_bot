package diary

import (
	"fmt"
	"strings"

	"Lovifyy_bot/internal/models"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// Handler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–Ω–µ–≤–Ω–∏–∫–∞
type Handler struct {
	bot         *tgbotapi.BotAPI
	userManager *models.UserManager
}

// NewHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–Ω–µ–≤–Ω–∏–∫–∞
func NewHandler(bot *tgbotapi.BotAPI, userManager *models.UserManager) *Handler {
	return &Handler{
		bot:         bot,
		userManager: userManager,
	}
}

// HandleDiary –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ú–∏–Ω–∏-–¥–Ω–µ–≤–Ω–∏–∫" –∫–∞–∫ –≤ legacy
func (h *Handler) HandleDiary(callbackQuery *tgbotapi.CallbackQuery) error {
	response := "üìù –ú–∏–Ω–∏ –¥–Ω–µ–≤–Ω–∏–∫\n\n" +
		"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤ –∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫:"

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≥–µ–Ω–¥–µ—Ä–∞ –∫–∞–∫ –≤ legacy
	buttons := [][]tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üë® –ü–∞—Ä–µ–Ω—å", "diary_gender_male"),
			tgbotapi.NewInlineKeyboardButtonData("üë© –î–µ–≤—É—à–∫–∞", "diary_gender_female"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏", "diary_view"),
		),
	}

	diaryKeyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)

	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, response)
	msg.ReplyMarkup = diaryKeyboard
	_, err := h.bot.Send(msg)
	return err
}

// HandleDiaryGender –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª–∞ –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–µ–¥–µ–ª–∏
func (h *Handler) HandleDiaryGender(callbackQuery *tgbotapi.CallbackQuery, gender string) error {
	var genderEmoji string
	var genderText string
	if gender == "male" {
		genderEmoji = "üë®"
		genderText = "–ø–∞—Ä–Ω—è"
	} else {
		genderEmoji = "üë©"
		genderText = "–¥–µ–≤—É—à–∫–∏"
	}

	response := fmt.Sprintf("üìù –ú–∏–Ω–∏ –¥–Ω–µ–≤–Ω–∏–∫ –¥–ª—è %s %s\n\n"+
		"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è –∑–∞–ø–∏—Å–µ–π:", genderEmoji, genderText)

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏
	buttons := [][]tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("1Ô∏è‚É£ –ù–µ–¥–µ–ª—è 1", fmt.Sprintf("diary_week_%s_1", gender)),
			tgbotapi.NewInlineKeyboardButtonData("2Ô∏è‚É£ –ù–µ–¥–µ–ª—è 2", fmt.Sprintf("diary_week_%s_2", gender)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("3Ô∏è‚É£ –ù–µ–¥–µ–ª—è 3", fmt.Sprintf("diary_week_%s_3", gender)),
			tgbotapi.NewInlineKeyboardButtonData("4Ô∏è‚É£ –ù–µ–¥–µ–ª—è 4", fmt.Sprintf("diary_week_%s_4", gender)),
		),
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)
	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, response)
	msg.ReplyMarkup = keyboard
	_, err := h.bot.Send(msg)
	return err
}

// HandleDiaryWeek –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–µ–¥–µ–ª–∏ –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞
func (h *Handler) HandleDiaryWeek(callbackQuery *tgbotapi.CallbackQuery, data string) error {
	// –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: diary_week_<gender>_<week>
	parts := strings.Split(data, "_")
	if len(parts) < 4 {
		return fmt.Errorf("invalid diary week callback data: %s", data)
	}

	gender := parts[2]
	week := parts[3]

	var genderEmoji string
	var genderText string
	if gender == "male" {
		genderEmoji = "üë®"
		genderText = "–ø–∞—Ä–Ω—è"
	} else {
		genderEmoji = "üë©"
		genderText = "–¥–µ–≤—É—à–∫–∏"
	}

	response := fmt.Sprintf("üìù –î–Ω–µ–≤–Ω–∏–∫ %s %s - –ù–µ–¥–µ–ª—è %s\n\n"+
		"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø–∏—Å–∏:", genderEmoji, genderText, week)

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–∏–ø–æ–≤ –∑–∞–ø–∏—Å–µ–π
	buttons := [][]tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí≠ –õ–∏—á–Ω—ã–µ –º—ã—Å–ª–∏", fmt.Sprintf("diary_type_%s_%s_personal", gender, week)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üíï –û –ø–∞—Ä—Ç–Ω–µ—Ä–µ", fmt.Sprintf("diary_type_%s_%s_partner", gender, week)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üåü –û –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö", fmt.Sprintf("diary_type_%s_%s_relationship", gender, week)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìã –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–µ–¥–µ–ª–∏", fmt.Sprintf("diary_type_%s_%s_exercises", gender, week)),
		),
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)
	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, response)
	msg.ReplyMarkup = keyboard
	_, err := h.bot.Send(msg)
	return err
}

// HandleDiaryType –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ
func (h *Handler) HandleDiaryType(callbackQuery *tgbotapi.CallbackQuery, data string) error {
	// –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: diary_type_<gender>_<week>_<type>
	parts := strings.Split(data, "_")
	if len(parts) < 5 {
		return fmt.Errorf("invalid diary type callback data: %s", data)
	}

	gender := parts[2]
	week := parts[3]
	diaryType := parts[4]

	userID := callbackQuery.From.ID
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
	h.userManager.SetState(userID, fmt.Sprintf("diary_%s_%s_%s", gender, week, diaryType))

	var genderEmoji string
	var genderText string
	if gender == "male" {
		genderEmoji = "üë®"
		genderText = "–ø–∞—Ä–Ω—è"
	} else {
		genderEmoji = "üë©"
		genderText = "–¥–µ–≤—É—à–∫–∏"
	}

	var typeText string
	switch diaryType {
	case "personal":
		typeText = "üí≠ –õ–∏—á–Ω—ã–µ –º—ã—Å–ª–∏"
	case "partner":
		typeText = "üíï –û –ø–∞—Ä—Ç–Ω–µ—Ä–µ"
	case "relationship":
		typeText = "üåü –û –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö"
	case "exercises":
		typeText = "üìã –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–µ–¥–µ–ª–∏"
	}

	response := fmt.Sprintf("üìù –î–Ω–µ–≤–Ω–∏–∫ %s %s - –ù–µ–¥–µ–ª—è %s\n%s\n\n"+
		"–†–µ–∂–∏–º –∑–∞–ø–∏—Å–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –º—ã—Å–ª–∏, –∑–∞–º–µ—Ç–∫–∏ –∏–ª–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è. "+
		"–Ø —Å–æ—Ö—Ä–∞–Ω—é –≤–∞—à—É –∑–∞–ø–∏—Å—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.\n\n"+
		"–≠—Ç–æ –≤–∞—à–µ –ª–∏—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π.", genderEmoji, genderText, week, typeText)
	
	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, response)
	_, err := h.bot.Send(msg)
	return err
}

// HandleDiaryView –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω–∏–∫–∞
func (h *Handler) HandleDiaryView(callbackQuery *tgbotapi.CallbackQuery) error {
	response := "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω–∏–∫–∞\n\n" +
		"–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏ –∏–∑ –º–∏–Ω–∏-–¥–Ω–µ–≤–Ω–∏–∫–∞.\n\n" +
		"–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö."
	
	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, response)
	_, err := h.bot.Send(msg)
	return err
}
