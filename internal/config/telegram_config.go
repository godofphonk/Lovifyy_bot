package config

import (
	"fmt"
	"os"
	"strconv"
	"strings"
)

// TelegramConfig –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –±–æ—Ç–∞
type TelegramConfig struct {
	BotToken     string  `json:"bot_token"`
	AdminIDs     []int64 `json:"admin_ids"`
	SystemPrompt string  `json:"system_prompt"`
	Timeout      int     `json:"timeout"` // —Å–µ–∫—É–Ω–¥—ã
	RetryCount   int     `json:"retry_count"`
}

// LoadTelegramConfig –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Telegram –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
func LoadTelegramConfig() (TelegramConfig, error) {
	config := TelegramConfig{
		Timeout:    30, // –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		RetryCount: 3,  // –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
	botToken := os.Getenv("TELEGRAM_BOT_TOKEN")
	if botToken == "" {
		return config, fmt.Errorf("TELEGRAM_BOT_TOKEN environment variable is required")
	}
	config.BotToken = botToken

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
	adminIDsStr := os.Getenv("TELEGRAM_ADMIN_IDS")
	if adminIDsStr != "" {
		adminIDs, err := parseAdminIDs(adminIDsStr)
		if err != nil {
			return config, fmt.Errorf("failed to parse TELEGRAM_ADMIN_IDS: %w", err)
		}
		config.AdminIDs = adminIDs
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
	systemPrompt := os.Getenv("TELEGRAM_SYSTEM_PROMPT")
	if systemPrompt != "" {
		config.SystemPrompt = systemPrompt
	} else {
		config.SystemPrompt = getDefaultSystemPrompt()
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º timeout
	if timeoutStr := os.Getenv("TELEGRAM_TIMEOUT"); timeoutStr != "" {
		if timeout, err := strconv.Atoi(timeoutStr); err == nil && timeout > 0 {
			config.Timeout = timeout
		}
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º retry count
	if retryStr := os.Getenv("TELEGRAM_RETRY_COUNT"); retryStr != "" {
		if retry, err := strconv.Atoi(retryStr); err == nil && retry > 0 {
			config.RetryCount = retry
		}
	}

	return config, nil
}

// parseAdminIDs –ø–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Å ID –∞–¥–º–∏–Ω–æ–≤
func parseAdminIDs(adminIDsStr string) ([]int64, error) {
	var adminIDs []int64

	// –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º
	parts := strings.Split(adminIDsStr, ",")
	for _, part := range parts {
		part = strings.TrimSpace(part)
		if part == "" {
			continue
		}

		id, err := strconv.ParseInt(part, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid admin ID '%s': %w", part, err)
		}

		adminIDs = append(adminIDs, id)
	}

	return adminIDs, nil
}

// getDefaultSystemPrompt –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
func getDefaultSystemPrompt() string {
	return `–¢—ã ‚Äî –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —á–∞—Ç-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –¥–∏–ø–ª–æ–º–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –Ω–∞ —Ç–µ–º—É:
¬´–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ –ª—é–±–≤–∏ –∏ —Å–µ–º–µ–π–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É –¥–µ–≤—É—à–µ–∫ –∏ —é–Ω–æ—à–µ–π —Å —Ä–∞–∑–Ω—ã–º —Å—Ç–∏–ª–µ–º –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏¬ª.

‚∏ª

üîπ –¢–≤–æ—è —Ä–æ–ª—å
 ‚Ä¢ –¢—ã –≤—ã—Å—Ç—É–ø–∞–µ—à—å –∫–∞–∫ –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥-–ø–æ–º–æ—â–Ω–∏–∫.
 ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å –ø–∞—Ä—É –≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞ —á–µ—Ä–µ–∑ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —Å–æ–≤–µ—Ç—ã.
 ‚Ä¢ –û—Ç–≤–µ—á–∞–µ—à—å –Ω–∞ –≤–Ω–µ–ø–ª–∞–Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –º–æ—Ç–∏–≤–∏—Ä—É–µ—à—å –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–µ—à—å —É—Å–ø–µ—Ö–∏.
 ‚Ä¢ –í –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞ –¥–µ–ª–∞–µ—à—å –∞–Ω–∞–ª–∏–∑ –≤—Å–µ–π —Ä–∞–±–æ—Ç—ã –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—à—å –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç.

‚∏ª

üîπ –û–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è
 ‚Ä¢ –ü–∏—à–∏ –ø—Ä–æ—Å—Ç—ã–º–∏, —Ç—ë–ø–ª—ã–º–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º–∏ —Ñ—Ä–∞–∑–∞–º–∏.
 ‚Ä¢ –ù–µ –∫—Ä–∏—Ç–∏–∫—É–π –∏ –Ω–µ –æ—Ü–µ–Ω–∏–≤–∞–π –∂—ë—Å—Ç–∫–æ.
 ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –∏–º–µ–Ω–∞ (–µ—Å–ª–∏ –ø–∞—Ä–∞ –∏—Ö –≤–≤–æ–¥–∏–ª–∞).
 ‚Ä¢ –ò–Ω–æ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–π –ª—ë–≥–∫–∏–π —é–º–æ—Ä –∏–ª–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –æ –ª—é–±–≤–∏.
 ‚Ä¢ –í—Å–µ–≥–¥–∞ —Ö–≤–∞–ª–∏ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å, –¥–∞–∂–µ –∑–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏.`
}

// ValidateTelegramConfig –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram
func (tc TelegramConfig) Validate() error {
	if tc.BotToken == "" {
		return fmt.Errorf("bot token is required")
	}

	if tc.Timeout <= 0 {
		return fmt.Errorf("timeout must be positive")
	}

	if tc.RetryCount <= 0 {
		return fmt.Errorf("retry count must be positive")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
	if !strings.Contains(tc.BotToken, ":") {
		return fmt.Errorf("invalid bot token format")
	}

	return nil
}
