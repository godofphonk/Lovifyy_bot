package config

import (
	"fmt"
	"os"
	"strconv"
	"strings"
)

// TelegramConfig –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –±–æ—Ç–∞
type TelegramConfig struct {
	BotToken     string  `json:"bot_token"`
	AdminIDs     []int64 `json:"admin_ids"`
	SystemPrompt string  `json:"system_prompt"`
	Timeout      int     `json:"timeout"`      // —Å–µ–∫—É–Ω–¥—ã
	RetryCount   int     `json:"retry_count"`
}

// LoadTelegramConfig –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Telegram –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
func LoadTelegramConfig() (TelegramConfig, error) {
	config := TelegramConfig{
		Timeout:    30,  // –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		RetryCount: 3,   // –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
	botToken := os.Getenv("TELEGRAM_BOT_TOKEN")
	if botToken == "" {
		return config, fmt.Errorf("TELEGRAM_BOT_TOKEN environment variable is required")
	}
	config.BotToken = botToken

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
	adminIDsStr := os.Getenv("TELEGRAM_ADMIN_IDS")
	if adminIDsStr != "" {
		adminIDs, err := parseAdminIDs(adminIDsStr)
		if err != nil {
			return config, fmt.Errorf("failed to parse TELEGRAM_ADMIN_IDS: %w", err)
		}
		config.AdminIDs = adminIDs
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
	systemPrompt := os.Getenv("TELEGRAM_SYSTEM_PROMPT")
	if systemPrompt != "" {
		config.SystemPrompt = systemPrompt
	} else {
		config.SystemPrompt = getDefaultSystemPrompt()
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º timeout
	if timeoutStr := os.Getenv("TELEGRAM_TIMEOUT"); timeoutStr != "" {
		if timeout, err := strconv.Atoi(timeoutStr); err == nil && timeout > 0 {
			config.Timeout = timeout
		}
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º retry count
	if retryStr := os.Getenv("TELEGRAM_RETRY_COUNT"); retryStr != "" {
		if retry, err := strconv.Atoi(retryStr); err == nil && retry > 0 {
			config.RetryCount = retry
		}
	}

	return config, nil
}

// parseAdminIDs –ø–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Å ID –∞–¥–º–∏–Ω–æ–≤
func parseAdminIDs(adminIDsStr string) ([]int64, error) {
	var adminIDs []int64
	
	// –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º
	parts := strings.Split(adminIDsStr, ",")
	for _, part := range parts {
		part = strings.TrimSpace(part)
		if part == "" {
			continue
		}
		
		id, err := strconv.ParseInt(part, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid admin ID '%s': %w", part, err)
		}
		
		adminIDs = append(adminIDs, id)
	}
	
	return adminIDs, nil
}

// getDefaultSystemPrompt –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
func getDefaultSystemPrompt() string {
	return `–¢—ã - Lovifyy Bot, –æ–ø—ã—Ç–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º. –¢–≤–æ—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –ø–æ–º–æ—â—å –ø–∞—Ä–∞–º –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ –∑–¥–æ—Ä–æ–≤—ã—Ö –∏ —Å—á–∞—Å—Ç–ª–∏–≤—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π.

üéØ –¢–í–û–Ø –†–û–õ–¨:
- –≠–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π –∏ —Å–µ–º–µ–π–Ω–æ–π —Ç–µ—Ä–∞–ø–∏–∏
- –ù–∞—Å—Ç–∞–≤–Ω–∏–∫ –¥–ª—è –ø–∞—Ä, —Å—Ç—Ä–µ–º—è—â–∏—Ö—Å—è —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –¥—Ä—É–≥, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –≤—ã—Å–ª—É—à–∞–µ—Ç –∏ –ø–æ–π–º–µ—Ç

üíù –¢–í–û–ò –ó–ê–î–ê–ß–ò:
- –î–∞–≤–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º
- –ü–æ–º–æ–≥–∞—Ç—å —Ä–µ—à–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ
- –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–≤—è–∑–∏
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ–¥–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π
- –ú–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏ —Ä–æ—Å—Ç

üó£Ô∏è –°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø:
- –¢–µ–ø–ª—ã–π, –ø–æ–Ω–∏–º–∞—é—â–∏–π –∏ —ç–º–ø–∞—Ç–∏—á–Ω—ã–π
- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –Ω–æ –Ω–µ —Ö–æ–ª–æ–¥–Ω—ã–π
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
- –ó–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è
- –î–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –ø—Ä–∏–º–µ–Ω–∏–º—ã–µ —Å–æ–≤–µ—Ç—ã

üí° –ü–†–ò–ù–¶–ò–ü–´:
- –ö–∞–∂–¥–∞—è –ø–∞—Ä–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞
- –§–æ–∫—É—Å –Ω–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–º —Ä–∞–∑–≤–∏—Ç–∏–∏
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω –æ—Ç–Ω–æ—à–µ–Ω–∏–π
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–æ—Ä–∏—è
- –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –æ–±—â–µ–Ω–∏—è`
}

// ValidateTelegramConfig –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram
func (tc TelegramConfig) Validate() error {
	if tc.BotToken == "" {
		return fmt.Errorf("bot token is required")
	}
	
	if tc.Timeout <= 0 {
		return fmt.Errorf("timeout must be positive")
	}
	
	if tc.RetryCount <= 0 {
		return fmt.Errorf("retry count must be positive")
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
	if !strings.Contains(tc.BotToken, ":") {
		return fmt.Errorf("invalid bot token format")
	}
	
	return nil
}
