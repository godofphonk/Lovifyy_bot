package bot

import (
	"fmt"
	"strings"
	"time"

	"Lovifyy_bot/internal/ai"
	"Lovifyy_bot/internal/history"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// handleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
func (b *EnterpriseBot) handleMessage(update tgbotapi.Update) error {
	userID := update.Message.From.ID
	messageText := update.Message.Text
	
	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
	b.notificationService.RegisterUser(userID, update.Message.From.UserName)
	
	// –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	b.notificationService.UpdateUserActivity(userID)

	// –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	if validation := b.validator.ValidateMessage(messageText); !validation.Valid {
		b.logger.WithFields(map[string]interface{}{
			"user_id": userID,
			"errors":  validation.Errors,
		}).Warn("Invalid message received")
		
		if b.metrics != nil {
			b.metrics.RecordError("invalid_message", "validation")
		}
		
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
		errorMsg := "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"
		msg := tgbotapi.NewMessage(userID, errorMsg)
		b.telegram.Send(msg)
		return nil
	}

	// –°–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	sanitizedText := b.validator.SanitizeMessage(messageText)

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
	if b.metrics != nil {
		b.metrics.RecordMessage("text", "received")
		b.metrics.RecordMessageLength("user", float64(len(sanitizedText)))
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	state := b.userManager.GetState(userID)

	switch state {
	case "chat":
		return b.handleChatMessage(userID, sanitizedText)
	case "diary":
		return b.handleDiaryMessage(userID, sanitizedText)
	case "custom_notification":
		return b.handleCustomNotificationMessage(userID, sanitizedText)
	case "custom_notification_schedule":
		return b.handleCustomNotificationScheduleMessage(userID, sanitizedText)
	case "schedule_custom_text":
		return b.handleScheduleCustomTextMessage(userID, sanitizedText)
	default:
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –¥–Ω–µ–≤–Ω–∏–∫–∞
		if strings.HasPrefix(state, "diary_") {
			return b.handleDiaryMessage(userID, sanitizedText)
		}
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
		if strings.HasPrefix(state, "custom_time_") {
			return b.handleCustomTimeMessage(userID, sanitizedText, state)
		}
		if state == "custom_date" {
			return b.handleCustomDateMessage(userID, sanitizedText)
		}
		return b.suggestMode(userID)
	}
}

// handleChatMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞
func (b *EnterpriseBot) handleChatMessage(userID int64, messageText string) error {
	startTime := time.Now()
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å AI
	if b.ai == nil {
		msg := tgbotapi.NewMessage(userID, "‚ùå AI —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
		_, err := b.telegram.Send(msg)
		return err
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
	historyMessages, err := b.historyManager.GetOpenAIHistory(userID, b.config.Telegram.SystemPrompt, 10)
	if err != nil {
		b.logger.WithError(err).Error("Failed to get chat history")
		// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏ - —Å–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
		historyMessages = []history.OpenAIMessage{
			{
				Role:    "system",
				Content: b.config.Telegram.SystemPrompt,
			},
		}
	}
	
	// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	historyMessages = append(historyMessages, history.OpenAIMessage{
		Role:    "user",
		Content: messageText,
	})

	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç ai –ø–∞–∫–µ—Ç–∞
	aiMessages := make([]ai.OpenAIMessage, len(historyMessages))
	for i, msg := range historyMessages {
		aiMessages[i] = ai.OpenAIMessage{
			Role:    msg.Role,
			Content: msg.Content,
		}
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
	response, err := b.ai.GenerateWithHistory(aiMessages)
	if err != nil {
		b.logger.WithError(err).Error("Failed to generate AI response")
		
		if b.metrics != nil {
			b.metrics.RecordError("ai_generation", "openai")
		}
		
		msg := tgbotapi.NewMessage(userID, "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞")
		_, err := b.telegram.Send(msg)
		return err
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
	if err := b.historyManager.SaveMessage(userID, messageText, response, "chat", "user"); err != nil {
		b.logger.WithError(err).Error("Failed to save message to history")
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
	msg := tgbotapi.NewMessage(userID, response)
	_, err = b.telegram.Send(msg)

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
	if b.metrics != nil {
		duration := time.Since(startTime)
		b.metrics.RecordResponseDuration("ai_chat", "openai", duration)
		b.metrics.RecordMessage("text", "sent")
		b.metrics.RecordMessageLength("bot", float64(len(response)))
	}

	return err
}

// handleDiaryMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ –¥–Ω–µ–≤–Ω–∏–∫–∞
func (b *EnterpriseBot) handleDiaryMessage(userID int64, messageText string) error {
	state := b.userManager.GetState(userID)
	
	// –ü–∞—Ä—Å–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: diary_<gender>_<week>_<type>
	if strings.HasPrefix(state, "diary_") {
		parts := strings.Split(state, "_")
		if len(parts) >= 4 {
			gender := parts[1]
			week := parts[2]
			diaryType := parts[3]
			
			// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–¥–µ–ª—é –≤ —á–∏—Å–ª–æ
			weekNum := 1
			switch week {
			case "1":
				weekNum = 1
			case "2":
				weekNum = 2
			case "3":
				weekNum = 3
			case "4":
				weekNum = 4
			}
			
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
			err := b.historyManager.SaveDiaryEntryWithGender(userID, "user", messageText, weekNum, diaryType, gender)
			if err != nil {
				b.logger.WithError(err).Error("Failed to save diary entry")
				msg := tgbotapi.NewMessage(userID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏")
				_, err := b.telegram.Send(msg)
				return err
			}
			
			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞
			var genderEmoji string
			var typeEmoji string
			var typeText string
			
			if gender == "male" {
				genderEmoji = "üë®"
			} else {
				genderEmoji = "üë©"
			}
			
			switch diaryType {
			case "personal":
				typeEmoji = "üí≠"
				typeText = "–õ–∏—á–Ω—ã–µ –º—ã—Å–ª–∏"
			case "questions":
				typeEmoji = "‚ùì"
				typeText = "–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã"
			case "joint":
				typeEmoji = "üë´"
				typeText = "–û—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
			default:
				typeEmoji = "üìù"
				typeText = "–ó–∞–ø–∏—Å—å"
			}
			
			response := fmt.Sprintf("‚úÖ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"+
				"%s %s - –ù–µ–¥–µ–ª—è %s\n"+
				"%s %s\n\n"+
				"üìù –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–∏—Å–∞—Ç—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", 
				genderEmoji, 
				map[string]string{"male": "–ü–∞—Ä–µ–Ω—å", "female": "–î–µ–≤—É—à–∫–∞"}[gender], 
				week, typeEmoji, typeText)
			
			msg := tgbotapi.NewMessage(userID, response)
			_, err = b.telegram.Send(msg)
			return err
		}
	}
	
	// –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ "diary" (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
	if state == "diary" {
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –æ–±—â—É—é –∑–∞–ø–∏—Å—å
		err := b.historyManager.SaveDiaryEntry(userID, "user", messageText, 1, "general")
		if err != nil {
			b.logger.WithError(err).Error("Failed to save diary entry")
			msg := tgbotapi.NewMessage(userID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏")
			_, err := b.telegram.Send(msg)
			return err
		}
		
		msg := tgbotapi.NewMessage(userID, "üìù –ó–∞–ø–∏—Å–∞–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–∏—Å–∞—Ç—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
		_, err = b.telegram.Send(msg)
		return err
	}
	
	// –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞
	msg := tgbotapi.NewMessage(userID, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
	_, err := b.telegram.Send(msg)
	return err
}
