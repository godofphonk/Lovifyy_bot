package bot

import (
	"encoding/json"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strconv"
	"strings"
	"sync"
	"time"
	"unicode/utf8"

	"Lovifyy_bot/internal/ai"
	"Lovifyy_bot/internal/exercises"
	"Lovifyy_bot/internal/history"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// RateLimiter –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
type RateLimiter struct {
	Users map[int64]time.Time
	Mutex sync.RWMutex
}

// NewRateLimiter —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π rate limiter
func NewRateLimiter() *RateLimiter {
	return &RateLimiter{
		Users: make(map[int64]time.Time),
	}
}

// IsAllowed –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
func (rl *RateLimiter) IsAllowed(userID int64) bool {
	rl.Mutex.Lock()
	defer rl.Mutex.Unlock()

	lastMessage, exists := rl.Users[userID]
	now := time.Now()

	// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: 1 —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ 3 —Å–µ–∫—É–Ω–¥—ã
	if exists && now.Sub(lastMessage) < 3*time.Second {
		return false
	}

	rl.Users[userID] = now
	return true
}

// isAdmin –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
func (b *Bot) isAdmin(userID int64) bool {
	for _, adminID := range b.adminIDs {
		if adminID == userID {
			return true
		}
	}
	return false
}

// setUserState —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (b *Bot) setUserState(userID int64, state string) {
	b.stateMutex.Lock()
	defer b.stateMutex.Unlock()
	b.userStates[userID] = state
}

// getUserState –ø–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (b *Bot) getUserState(userID int64) string {
	b.stateMutex.RLock()
	defer b.stateMutex.RUnlock()
	state, exists := b.userStates[userID]
	if !exists {
		return "" // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
	}
	return state
}

// Bot –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç Telegram –±–æ—Ç–∞ —Å –ò–ò
type Bot struct {
	telegram        *tgbotapi.BotAPI
	ai              *ai.OpenAIClient
	history         *history.Manager
	exercises       *exercises.Manager
	rateLimiter     *RateLimiter
	systemPrompt    string
	welcomeMessage  string
	adminIDs        []int64
	userStates      map[int64]string // —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (chat, diary)
	stateMutex      sync.RWMutex     // –º—å—é—Ç–µ–∫—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º
}

// NewBot —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
func NewBot(telegramToken, systemPrompt string, adminIDs []int64) *Bot {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –±–æ—Ç–∞
	bot, err := tgbotapi.NewBotAPI(telegramToken)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Telegram –±–æ—Ç–∞: %v", err)
		panic(fmt.Sprintf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Telegram –±–æ—Ç–∞: %v", err))
	}

	bot.Debug = false
	log.Printf("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ %s", bot.Self.UserName)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ (–ø–æ—è–≤—è—Ç—Å—è –≤ –º–µ–Ω—é —Å–ª–µ–≤–∞)
	log.Println("üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞...")

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–µ–Ω—é
	commands := []tgbotapi.BotCommand{
		{Command: "start", Description: "üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"},
		{Command: "chat", Description: "üíí –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö"},
		{Command: "advice", Description: "üíë –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏"},
		{Command: "diary", Description: "üíå –ú–∏–Ω–∏-–¥–Ω–µ–≤–Ω–∏–∫"},
		{Command: "clear", Description: "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"},
		{Command: "help", Description: "‚ùì –°–ø—Ä–∞–≤–∫–∞"},
		{Command: "adminhelp", Description: "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"},
	}

	setCommands := tgbotapi.NewSetMyCommands(commands...)
	if _, err := bot.Request(setCommands); err != nil {
		log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã: %v", err)
	} else {
		log.Println("‚úÖ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –º–µ–Ω—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI –∫–ª–∏–µ–Ω—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º OpenAI)
	aiClient := ai.NewOpenAIClient("gpt-4o-mini")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å AI (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)
	skipAICheck := os.Getenv("SKIP_AI_CHECK") == "true"
	if skipAICheck {
		log.Println("‚è≠Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ AI –ø—Ä–æ–ø—É—â–µ–Ω–∞ (SKIP_AI_CHECK=true)")
		log.Println("ü§ñ –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ AI —Ñ—É–Ω–∫—Ü–∏–π")
	} else {
		if err := aiClient.TestConnection(); err != nil {
			log.Printf("‚ö†Ô∏è AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: %v", err)
			log.Println("ü§ñ –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ AI —Ñ—É–Ω–∫—Ü–∏–π")
		} else {
			log.Println("‚úÖ AI –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
		}
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –∏—Å—Ç–æ—Ä–∏–∏
	historyManager := history.NewManager()
	log.Println("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
	exercisesManager := exercises.NewManager()
	log.Println("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")

	// –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	defaultWelcome := "–ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–∏–µ! üëãüíñ –Ø —Ç–∞–∫ —Ä–∞–¥ –≤–∏–¥–µ—Ç—å –≤–∞—Å –∑–¥–µ—Å—å –∏ –≤–º–µ—Å—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ —ç—Ç–æ –º–∞–ª–µ–Ω—å–∫–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –≤–∞—à–∏–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º! ü´Ç\n\n" +
		"–≠—Ç–æ—Ç —á–∞—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–∞—Ö–æ–¥–∏—Ç—å –º–æ–º–µ–Ω—Ç—ã —Ä–∞–¥–æ—Å—Ç–∏, —Ç–µ–ø–ª–∞ –∏ –≤–∑–∞–∏–º–æ–ø–æ–Ω–∏–º–∞–Ω–∏—è, –∑–∞–º–µ—á–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –∏ –≤–º–µ—Å—Ç–µ –¥–µ–ª–∞—Ç—å –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –µ—â—ë –±–æ–ª–µ–µ —Å—á–∞—Å—Ç–ª–∏–≤—ã–º–∏. –ó–¥–µ—Å—å –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º –≤ —ç—Ç–æ–º:\n\n" +
		"1Ô∏è‚É£ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏ üíë\n" +
		"–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é —è –±—É–¥—É –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–æ–≥–∞–µ—Ç –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞, –¥–µ–ª–∏—Ç—å—Å—è —á—É–≤—Å—Ç–≤–∞–º–∏ –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –ø—Ä–∏—è—Ç–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –æ–±—â–µ–Ω–∏—è.\n" +
		"–í–∞–∂–Ω–æ: –≤—Å—ë, —á—Ç–æ –≤—ã –¥–µ–ª–∞–µ—Ç–µ –≤ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è—Ö, –Ω—É–∂–Ω–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤ –º–∏–Ω–∏-–¥–Ω–µ–≤–Ω–∏–∫–µ, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –º–∞–ª–µ–Ω—å–∫–∏–µ —É—Å–ø–µ—Ö–∏. üíó\n\n" +
		"2Ô∏è‚É£ –ú–∏–Ω–∏-–¥–Ω–µ–≤–Ω–∏–∫ üíå\n" +
		"–≠—Ç–æ –º–µ—Å—Ç–æ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∫–æ—Ä–æ—Ç–∫–∏—Ö –∑–∞–º–µ—Ç–æ–∫ –æ –≤–∞—à–∏—Ö –Ω–∞–±–ª—é–¥–µ–Ω–∏—è—Ö, –æ—Ç–∫—Ä—ã—Ç–∏—è—Ö –∏ —à–∞–≥–∞—Ö –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö. –î–∞–∂–µ –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –¥–µ–Ω—å –ø–æ–º–æ–≥–∞–µ—Ç –∑–∞–∫—Ä–µ–ø–ª—è—Ç—å –Ω–∞–≤—ã–∫–∏, –≤–∏–¥–µ—Ç—å —Ä–æ—Å—Ç –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π –∏ –æ—Ç–º–µ—á–∞—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.\n\n" +
		"üí° –°–æ–≤–µ—Ç: –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ –æ —Ñ–æ—Ä–º–µ –∏–ª–∏ –∏–¥–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–µ–π ‚Äî –≥–ª–∞–≤–Ω–æ–µ, —á—Ç–æ–±—ã —ç—Ç–æ –±—ã–ª–æ —á–µ—Å—Ç–Ω–æ –∏ –æ—Ç —Å–µ—Ä–¥—Ü–∞. –ú–∏–Ω–∏-–¥–Ω–µ–≤–Ω–∏–∫ –ø–æ–º–æ–≥–∞–µ—Ç –∑–∞–∫—Ä–µ–ø–ª—è—Ç—å –≤—Å—ë, —á–µ–º—É –≤—ã —É—á–∏—Ç–µ—Å—å –≤ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è—Ö –Ω–µ–¥–µ–ª–∏, –∏ –≤–∏–¥–µ—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö.\n\n" +
		"3Ô∏è‚É£ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö üíí\n" +
		"–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è. –Ø –¥–∞–º —Å–æ–≤–µ—Ç –∏–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∫—É, —á—Ç–æ–±—ã –æ–±—â–µ–Ω–∏–µ –∏ –≤–∑–∞–∏–º–æ–ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å—Ç–∞–ª–æ –µ—â—ë —Ç–µ–ø–ª–µ–µ. –≠—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏ –¥–Ω–µ–≤–Ω–∏–∫–∞, –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—Ç–∏—Ç–µ. ü´∂üèª\n\n" +
		"üíå –°–æ–≤–µ—Ç –æ—Ç –º–µ–Ω—è: –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å–æ–º, –∑–∞–º–µ—á–∞–π—Ç–µ –º–∞–ª–µ–Ω—å–∫–∏–µ —Ä–∞–¥–æ—Å—Ç–∏, –¥–µ–ª–∏—Ç–µ—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –∏ —Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ –≤—Å—ë –≤ –º–∏–Ω–∏-–¥–Ω–µ–≤–Ω–∏–∫–µ.\n" +
		"–í–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã, –∏ –∫–∞–∂–¥–∞—è —á–µ—Å—Ç–Ω–∞—è –±–µ—Å–µ–¥–∞, –∫–∞–∂–¥–æ–µ –º–∞–ª–µ–Ω—å–∫–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –¥—Ä—É–≥ –∫ –¥—Ä—É–≥—É –¥–µ–ª–∞–µ—Ç –∏—Ö –∫—Ä–µ–ø—á–µ –∏ —Ç–µ–ø–ª–µ–µ. üííüéÄ"

	return &Bot{
		telegram:       bot,
		ai:             aiClient,
		history:        historyManager,
		exercises:      exercisesManager,
		rateLimiter:    NewRateLimiter(),
		systemPrompt:   systemPrompt,
		welcomeMessage: defaultWelcome,
		adminIDs:       adminIDs,
		userStates:     make(map[int64]string),
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
func (b *Bot) Start() {
	// –£–¥–∞–ª—è–µ–º webhook –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
	del := tgbotapi.DeleteWebhookConfig{DropPendingUpdates: true}
	if _, err := b.telegram.Request(del); err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook: %v", err)
	}

	// –†—É—á–Ω–æ–π polling —Å offset –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
	offset := 0
	for {
		u := tgbotapi.UpdateConfig{
			Offset:  offset,
			Limit:   100,
			Timeout: 60,
		}

		updates, err := b.telegram.GetUpdates(u)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ø–¥–µ–π—Ç–æ–≤: %v", err)
			time.Sleep(3 * time.Second)
			continue
		}

		for _, update := range updates {
			if update.Message != nil {
				go b.handleMessage(update.Message)
			} else if update.CallbackQuery != nil {
				go b.handleCallbackQuery(update.CallbackQuery)
			}
			offset = update.UpdateID + 1
		}
	}
}

// handleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) handleMessage(message *tgbotapi.Message) {
	userID := message.From.ID
	username := message.From.UserName
	if username == "" {
		username = message.From.FirstName
	}

	log.Printf("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s (ID: %d): %s", username, userID, message.Text)

	// –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
	if !b.validateMessage(message) {
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
	if !b.rateLimiter.IsAllowed(userID) {
		b.sendMessage(message.Chat.ID, "‚è∞ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
	if message.IsCommand() {
		b.handleCommand(message)
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –ò–ò —Å –∏—Å—Ç–æ—Ä–∏–µ–π
	b.handleAIMessage(message)
}

// validateMessage –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) validateMessage(message *tgbotapi.Message) bool {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if message.Text == "" {
		return false
	}

	// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤)
	if len(message.Text) > 4000 {
		b.sendMessage(message.Chat.ID, "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤.")
		return false
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º (–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã)
	if b.isSpamMessage(message.Text) {
		b.sendMessage(message.Chat.ID, "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ —Å–ø–∞–º.")
		return false
	}

	return true
}

// isSpamMessage –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø–∞–º–æ–º
func (b *Bot) isSpamMessage(text string) bool {
	// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã
	if len(text) > 10 {
		charCount := make(map[rune]int)
		for _, char := range text {
			charCount[char]++
		}

		// –ï—Å–ª–∏ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–æ–ª—å—à–µ 70% —Å–æ–æ–±—â–µ–Ω–∏—è
		for _, count := range charCount {
			if float64(count)/float64(len(text)) > 0.7 {
				return true
			}
		}
	}

	return false
}

// handleCallbackQuery –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è inline –∫–Ω–æ–ø–æ–∫
func (b *Bot) handleCallbackQuery(callbackQuery *tgbotapi.CallbackQuery) {
	data := callbackQuery.Data
	userID := callbackQuery.From.ID

	log.Printf("–ü–æ–ª—É—á–µ–Ω callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %s", userID, data)

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
	callback := tgbotapi.NewCallback(callbackQuery.ID, "")
	b.telegram.Request(callback)

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –Ω–∞–ø—Ä—è–º—É—é –ø–æ –¥–∞–Ω–Ω—ã–º
	switch data {
	case "chat":
		b.handleChatCallback(callbackQuery)
	case "advice":
		b.handleAdviceCallback(callbackQuery)
	case "diary":
		b.handleDiaryCallback(callbackQuery)
	case "diary_view":
		b.handleDiaryViewCallback(callbackQuery)
	case "diary_gender_male":
		b.handleDiaryGenderCallback(callbackQuery, "male")
	case "diary_gender_female":
		b.handleDiaryGenderCallback(callbackQuery, "female")
	case "week_1":
		b.handleWeekCallback(callbackQuery, 1)
	case "week_2":
		b.handleWeekCallback(callbackQuery, 2)
	case "week_3":
		b.handleWeekCallback(callbackQuery, 3)
	case "week_4":
		b.handleWeekCallback(callbackQuery, 4)
	case "adminhelp":
		b.handleAdminHelpCallback(callbackQuery)
	case "prompt":
		b.handlePromptCallback(callbackQuery)
	case "setprompt_menu":
		b.handleSetPromptMenuCallback(callbackQuery)
	case "welcome":
		b.handleWelcomeCallback(callbackQuery)
	case "setwelcome_menu":
		b.handleSetWelcomeMenuCallback(callbackQuery)
	case "exercises_menu":
		b.handleExercisesMenuCallback(callbackQuery)
	case "notifications_menu":
		b.handleNotificationsMenuCallback(callbackQuery)
	case "schedule_notification":
		b.handleScheduleNotificationCallback(callbackQuery)
	case "view_notifications":
		b.handleViewNotificationsCallback(callbackQuery)
	case "send_now":
		b.handleSendNowCallback(callbackQuery)
	case "exercise_week_1":
		b.handleExerciseWeekCallback(callbackQuery, 1)
	case "exercise_week_2":
		b.handleExerciseWeekCallback(callbackQuery, 2)
	case "exercise_week_3":
		b.handleExerciseWeekCallback(callbackQuery, 3)
	case "exercise_week_4":
		b.handleExerciseWeekCallback(callbackQuery, 4)
	default:
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
		if strings.HasPrefix(data, "schedule_date_") {
			dateStr := strings.TrimPrefix(data, "schedule_date_")
			b.handleScheduleDateCallback(callbackQuery, dateStr)
			return
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
		if strings.HasPrefix(data, "schedule_time_") {
			parts := strings.Split(data, "_")
			if len(parts) >= 4 {
				dateStr := parts[2]
				timeStr := parts[3]
				b.handleScheduleTimeCallback(callbackQuery, dateStr, timeStr)
				return
			}
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ callback –¥–ª—è –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
		if strings.HasPrefix(data, "schedule_template_") {
			parts := strings.Split(data, "_")
			if len(parts) >= 5 {
				dateStr := parts[2]
				timeStr := parts[3]
				templateIndex, err := strconv.Atoi(parts[4])
				if err == nil {
					b.handleScheduleTemplateCallback(callbackQuery, dateStr, timeStr, templateIndex)
					return
				}
			}
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ callback –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —à–∞–±–ª–æ–Ω–∞
		if strings.HasPrefix(data, "send_now_template_") {
			templateIndex, err := strconv.Atoi(strings.TrimPrefix(data, "send_now_template_"))
			if err == nil {
				b.handleSendNowTemplateCallback(callbackQuery, templateIndex)
				return
			}
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º callback –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –¥–∞—Ç—ã
		if data == "schedule_custom_date" {
			b.handleScheduleCustomDateCallback(callbackQuery)
			return
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º callback –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
		if strings.HasPrefix(data, "schedule_custom_time_") {
			dateStr := strings.TrimPrefix(data, "schedule_custom_time_")
			b.handleScheduleCustomTimeCallback(callbackQuery, dateStr)
			return
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º callback –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
		if strings.HasPrefix(data, "delete_notification_") {
			notificationID, err := strconv.Atoi(strings.TrimPrefix(data, "delete_notification_"))
			if err == nil {
				b.handleDeleteNotificationCallback(callbackQuery, notificationID)
				return
			}
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ callback –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–µ–¥–µ–ª–∏
		if strings.HasPrefix(data, "week_") && strings.Contains(data, "_") {
			parts := strings.Split(data, "_")
			if len(parts) >= 3 {
				week, err := strconv.Atoi(parts[1])
				if err == nil && week >= 1 && week <= 4 {
					action := strings.Join(parts[2:], "_")
					b.handleWeekActionCallback(callbackQuery, week, action)
					return
				}
			}
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ callback –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ–¥–µ–ª–∏
		if strings.HasPrefix(data, "admin_week_") {
			parts := strings.Split(data, "_")
			if len(parts) >= 4 {
				week, err := strconv.Atoi(parts[2])
				if err == nil && week >= 1 && week <= 4 {
					field := strings.Join(parts[3:], "_")
					b.handleAdminWeekFieldCallback(callbackQuery, week, field)
					return
				}
			}
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ callback –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞ —Å –≥–µ–Ω–¥–µ—Ä–æ–º
		if strings.HasPrefix(data, "diary_week_") {
			parts := strings.Split(data, "_")
			if len(parts) >= 4 { // diary_week_[gender]_[week]
				gender := parts[2]
				week, err := strconv.Atoi(parts[3])
				if err == nil && week >= 1 && week <= 4 && (gender == "male" || gender == "female") {
					b.handleDiaryWeekGenderCallback(callbackQuery, gender, week)
					return
				}
			}
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ callback –¥–ª—è —Ç–∏–ø–∞ –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞ —Å –≥–µ–Ω–¥–µ—Ä–æ–º
		if strings.HasPrefix(data, "diary_") && strings.Contains(data, "_type_") {
			parts := strings.Split(data, "_")
			if len(parts) >= 5 { // diary_[gender]_[week]_type_[entryType]
				gender := parts[1]
				week, err := strconv.Atoi(parts[2])
				if err == nil && week >= 1 && week <= 4 && (gender == "male" || gender == "female") {
					entryType := strings.Join(parts[4:], "_")
					b.handleDiaryTypeGenderCallback(callbackQuery, gender, week, entryType)
					return
				}
			}
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ callback –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π —Å –≥–µ–Ω–¥–µ—Ä–æ–º
		if strings.HasPrefix(data, "diary_view_gender_") {
			parts := strings.Split(data, "_")
			if len(parts) >= 4 {
				gender := parts[3]
				if gender == "male" || gender == "female" {
					b.handleDiaryViewGenderCallback(callbackQuery, gender)
					return
				}
			}
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ callback –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π –Ω–µ–¥–µ–ª–∏ —Å –≥–µ–Ω–¥–µ—Ä–æ–º
		if strings.HasPrefix(data, "diary_view_week_") {
			parts := strings.Split(data, "_")
			if len(parts) >= 5 { // diary_view_week_[gender]_[week]
				gender := parts[3]
				week, err := strconv.Atoi(parts[4])
				if err == nil && week >= 1 && week <= 4 && (gender == "male" || gender == "female") {
					b.handleDiaryViewWeekGenderCallback(callbackQuery, gender, week)
					return
				}
			}
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ callback –¥–ª—è –∏–Ω—Å–∞–π—Ç–∞ —Å –≥–µ–Ω–¥–µ—Ä–æ–º
		if strings.HasPrefix(data, "insight_") {
			parts := strings.Split(data, "_")
			if len(parts) >= 3 { // insight_[gender]_[week]
				gender := parts[1]
				week, err := strconv.Atoi(parts[2])
				if err == nil && week >= 1 && week <= 4 && (gender == "male" || gender == "female") {
					b.generatePersonalInsightWithGender(callbackQuery, gender, week)
					return
				}
			}
		}
		// –ï—Å–ª–∏ callback –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		fakeMessage := &tgbotapi.Message{
			MessageID: callbackQuery.Message.MessageID,
			From:      callbackQuery.From,
			Chat:      callbackQuery.Message.Chat,
			Date:      callbackQuery.Message.Date,
			Text:      "/" + data,
		}
		b.handleCommand(fakeMessage)
	}
}

// handleChatCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–û–±—ã—á–Ω–∞—è –±–µ—Å–µ–¥–∞"
func (b *Bot) handleChatCallback(callbackQuery *tgbotapi.CallbackQuery) {
	userID := callbackQuery.From.ID
	b.setUserState(userID, "chat")

	response := "üí¨ –†–µ–∂–∏–º –æ–±—ã—á–Ω–æ–π –±–µ—Å–µ–¥—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n" +
		"–¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫. " +
		"–Ø –±—É–¥—É –ø–æ–º–Ω–∏—Ç—å –Ω–∞—à—É –±–µ—Å–µ–¥—É –∏ –æ—Ç–≤–µ—á–∞—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–∞—à–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞.\n\n" +
		"–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /advice"
	b.sendMessage(callbackQuery.Message.Chat.ID, response)
}

// handleAdviceCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–µ–¥–µ–ª–∏"
func (b *Bot) handleAdviceCallback(callbackQuery *tgbotapi.CallbackQuery) {
	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–µ–¥–µ–ª—å
	activeWeeks := b.exercises.GetActiveWeeks()

	if len(activeWeeks) == 0 {
		response := "üóìÔ∏è –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–µ–¥–µ–ª–∏\n\n" +
			"‚ö†Ô∏è –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–µ–¥–µ–ª—å.\n" +
			"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –µ—â–µ –Ω–µ –æ—Ç–∫—Ä—ã–ª–∏ –¥–æ—Å—Ç—É–ø –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º."
		b.sendMessage(callbackQuery.Message.Chat.ID, response)
		return
	}

	response := "üóìÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –Ω–µ–¥–µ–ª—é:\n\n" +
		"–ö–∞–∂–¥–∞—è –Ω–µ–¥–µ–ª—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π."

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–µ–¥–µ–ª—å
	var buttons [][]tgbotapi.InlineKeyboardButton
	var currentRow []tgbotapi.InlineKeyboardButton

	weekEmojis := []string{"1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£"}

	for _, week := range activeWeeks {
		button := tgbotapi.NewInlineKeyboardButtonData(
			fmt.Sprintf("%s –ù–µ–¥–µ–ª—è", weekEmojis[week-1]),
			fmt.Sprintf("week_%d", week),
		)
		currentRow = append(currentRow, button)

		// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
		if len(currentRow) == 2 {
			buttons = append(buttons, currentRow)
			currentRow = []tgbotapi.InlineKeyboardButton{}
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
	if len(currentRow) > 0 {
		buttons = append(buttons, currentRow)
	}

	weekKeyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)

	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, response)
	msg.ReplyMarkup = weekKeyboard
	b.telegram.Send(msg)
}

// handleWeekCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–µ–¥–µ–ª–∏
func (b *Bot) handleWeekCallback(callbackQuery *tgbotapi.CallbackQuery, week int) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –Ω–µ–¥–µ–ª—è
	if !b.exercises.IsWeekActive(week) {
		response := fmt.Sprintf("üóìÔ∏è –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è %d –Ω–µ–¥–µ–ª–∏\n\n‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –∑–∞–∫—Ä—ã—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –Ω–µ–¥–µ–ª—é.", week)
		b.sendMessage(callbackQuery.Message.Chat.ID, response)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –Ω–µ–¥–µ–ª–∏
	exercise, err := b.exercises.GetWeekExercise(week)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –Ω–µ–¥–µ–ª–∏ %d: %v", week, err)
		b.sendMessage(callbackQuery.Message.Chat.ID, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.")
		return
	}

	// –ï—Å–ª–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	if exercise == nil {
		response := fmt.Sprintf("üóìÔ∏è –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è %d –Ω–µ–¥–µ–ª–∏\n\n‚ö†Ô∏è –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", week)
		b.sendMessage(callbackQuery.Message.Chat.ID, response)
		return
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	welcomeText := exercise.WelcomeMessage
	if welcomeText == "" {
		welcomeText = fmt.Sprintf("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ %d –Ω–µ–¥–µ–ª—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π!", week)
	}

	response := fmt.Sprintf("%s\n\n%s", exercise.Title, welcomeText)

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–µ–¥–µ–ª–∏
	var buttons [][]tgbotapi.InlineKeyboardButton

	if exercise.Questions != "" {
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üë©‚Äç‚ù§Ô∏è‚Äçüë® –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", fmt.Sprintf("week_%d_questions", week)),
		))
	}

	buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏", fmt.Sprintf("week_%d_tips", week)),
	))

	if exercise.Insights != "" {
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîç –ò–Ω—Å–∞–π—Ç", fmt.Sprintf("week_%d_insights", week)),
		))
	}

	if exercise.JointQuestions != "" {
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üë´ –°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã", fmt.Sprintf("week_%d_joint", week)),
		))
	}

	if exercise.DiaryInstructions != "" {
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìù –ß—Ç–æ –ø–∏—Å–∞—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ", fmt.Sprintf("week_%d_diary", week)),
		))
	}

	weekKeyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)

	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, response)
	msg.ReplyMarkup = weekKeyboard
	b.telegram.Send(msg)
}

// handleWeekActionCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –≤–Ω—É—Ç—Ä–∏ –Ω–µ–¥–µ–ª–∏
func (b *Bot) handleWeekActionCallback(callbackQuery *tgbotapi.CallbackQuery, week int, action string) {
	exercise, err := b.exercises.GetWeekExercise(week)
	if err != nil || exercise == nil {
		b.sendMessage(callbackQuery.Message.Chat.ID, "‚ùå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		return
	}

	var response string

	switch action {
	case "questions":
		if exercise.Questions != "" {
			response = fmt.Sprintf("üí™ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è %d –Ω–µ–¥–µ–ª–∏\n\n%s", week, exercise.Questions)
		} else {
			response = "üí™ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
		}

	case "tips":
		if exercise.Tips != "" {
			response = fmt.Sprintf("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è %d –Ω–µ–¥–µ–ª–∏\n\n%s", week, exercise.Tips)
		} else {
			response = "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏\n\n‚Ä¢ –ë—É–¥—å—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º\n‚Ä¢ –°–ª—É—à–∞–π—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ\n‚Ä¢ –ù–µ —Å—É–¥–∏—Ç–µ, –∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ\n‚Ä¢ –î–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ —á—É–≤—Å—Ç–≤–∞–º–∏ —á–µ—Å—Ç–Ω–æ"
		}

	case "insights":
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≥–µ–Ω–¥–µ—Ä–∞ –¥–ª—è –∏–Ω—Å–∞–π—Ç–∞
		b.handleInsightGenderChoice(callbackQuery, week)
		return

	case "joint":
		if exercise.JointQuestions != "" {
			response = fmt.Sprintf("üë´ –°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è %d –Ω–µ–¥–µ–ª–∏\n\n%s", week, exercise.JointQuestions)
		} else {
			response = "üë´ –°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
		}

	case "diary":
		if exercise.DiaryInstructions != "" {
			response = fmt.Sprintf("üìù –ß—Ç–æ –ø–∏—Å–∞—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ (%d –Ω–µ–¥–µ–ª—è)\n\n%s", week, exercise.DiaryInstructions)
		} else {
			response = "üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
		}

	default:
		response = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
	}

	b.sendMessage(callbackQuery.Message.Chat.ID, response)
}

// handleDiaryCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ú–∏–Ω–∏ –¥–Ω–µ–≤–Ω–∏–∫"
func (b *Bot) handleDiaryCallback(callbackQuery *tgbotapi.CallbackQuery) {
	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–µ–¥–µ–ª—å
	activeWeeks := b.exercises.GetActiveWeeks()

	if len(activeWeeks) == 0 {
		response := "üìù –ú–∏–Ω–∏ –¥–Ω–µ–≤–Ω–∏–∫\n\n" +
			"‚ö†Ô∏è –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–µ–¥–µ–ª—å –¥–ª—è –∑–∞–ø–∏—Å–µ–π.\n" +
			"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –µ—â–µ –Ω–µ –æ—Ç–∫—Ä—ã–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –Ω–µ–¥–µ–ª—è–º."
		b.sendMessage(callbackQuery.Message.Chat.ID, response)
		return
	}

	response := "üìù –ú–∏–Ω–∏ –¥–Ω–µ–≤–Ω–∏–∫\n\n" +
		"–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ, –∑–∞ –∫–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–Ω–µ–≤–Ω–∏–∫:"

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≥–µ–Ω–¥–µ—Ä–∞
	buttons := [][]tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üë® –ü–∞—Ä–µ–Ω—å", "diary_gender_male"),
			tgbotapi.NewInlineKeyboardButtonData("üë© –î–µ–≤—É—à–∫–∞", "diary_gender_female"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏", "diary_view"),
		),
	}

	diaryKeyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)

	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, response)
	msg.ReplyMarkup = diaryKeyboard
	b.telegram.Send(msg)
}

// handleDiaryWeekCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–µ–¥–µ–ª–∏ –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞
func (b *Bot) handleDiaryWeekCallback(callbackQuery *tgbotapi.CallbackQuery, week int) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –Ω–µ–¥–µ–ª—è
	if !b.exercises.IsWeekActive(week) {
		response := fmt.Sprintf("üìù –î–Ω–µ–≤–Ω–∏–∫ - %d –Ω–µ–¥–µ–ª—è\n\n‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∫ –∑–∞–ø–∏—Å—è–º —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏ –∑–∞–∫—Ä—ã—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –Ω–µ–¥–µ–ª—é.", week)
		b.sendMessage(callbackQuery.Message.Chat.ID, response)
		return
	}

	response := fmt.Sprintf("üìù –î–Ω–µ–≤–Ω–∏–∫ - %d –Ω–µ–¥–µ–ª—è\n\n"+
		"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø–∏—Å–∏:", week)

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–∏–ø–æ–≤ –∑–∞–ø–∏—Å–µ–π
	typeKeyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùì –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã", fmt.Sprintf("diary_%d_type_questions", week)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üë´ –û—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã", fmt.Sprintf("diary_%d_type_joint", week)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí≠ –õ–∏—á–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏ –º—ã—Å–ª–∏", fmt.Sprintf("diary_%d_type_personal", week)),
		),
	)

	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, response)
	msg.ReplyMarkup = typeKeyboard
	b.telegram.Send(msg)
}

// handleDiaryTypeCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞
func (b *Bot) handleDiaryTypeCallback(callbackQuery *tgbotapi.CallbackQuery, week int, entryType string) {
	userID := callbackQuery.From.ID

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞
	b.setUserState(userID, fmt.Sprintf("diary_%d_%s", week, entryType))

	var response string
	var typeName string

	switch entryType {
	case "questions":
		typeName = "–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã"
		// –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏
		exercise, err := b.exercises.GetWeekExercise(week)
		if err == nil && exercise != nil && exercise.Questions != "" {
			response = fmt.Sprintf("‚ùì %s (%d –Ω–µ–¥–µ–ª—è)\n\n"+
				"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤:\n%s\n\n"+
				"–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã:", typeName, week, exercise.Questions)
		} else {
			response = fmt.Sprintf("‚ùì %s (%d –Ω–µ–¥–µ–ª—è)\n\n"+
				"–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ–¥–µ–ª–∏:", typeName, week)
		}

	case "joint":
		typeName = "–û—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
		// –ü–æ–ª—É—á–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏
		exercise, err := b.exercises.GetWeekExercise(week)
		if err == nil && exercise != nil && exercise.JointQuestions != "" {
			response = fmt.Sprintf("üë´ %s (%d –Ω–µ–¥–µ–ª—è)\n\n"+
				"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:\n%s\n\n"+
				"–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è:", typeName, week, exercise.JointQuestions)
		} else {
			response = fmt.Sprintf("üë´ %s (%d –Ω–µ–¥–µ–ª—è)\n\n"+
				"–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:", typeName, week)
		}

	case "personal":
		typeName = "–õ–∏—á–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏ –º—ã—Å–ª–∏"
		// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞
		exercise, err := b.exercises.GetWeekExercise(week)
		if err == nil && exercise != nil && exercise.DiaryInstructions != "" {
			response = fmt.Sprintf("üí≠ %s (%d –Ω–µ–¥–µ–ª—è)\n\n"+
				"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∑–∞–ø–∏—Å–µ–π:\n%s\n\n"+
				"–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –ª–∏—á–Ω—ã–µ –º—ã—Å–ª–∏ –∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è:", typeName, week, exercise.DiaryInstructions)
		} else {
			response = fmt.Sprintf("üí≠ %s (%d –Ω–µ–¥–µ–ª—è)\n\n"+
				"–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –ª–∏—á–Ω—ã–µ –º—ã—Å–ª–∏ –∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è:", typeName, week)
		}

	default:
		response = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–ø–∏—Å–∏"
	}

	b.sendMessage(callbackQuery.Message.Chat.ID, response)
}

// handleAdminHelpCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"
func (b *Bot) handleAdminHelpCallback(callbackQuery *tgbotapi.CallbackQuery) {
	userID := callbackQuery.From.ID

	if !b.isAdmin(userID) {
		b.sendMessage(callbackQuery.Message.Chat.ID, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
		return
	}

	response := "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å Lovifyy Bot\n\n" +
		"üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
		"/setprompt <—Ç–µ–∫—Å—Ç> - –∏–∑–º–µ–Ω–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç\n" +
		"/prompt - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç\n" +
		"/adminhelp - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n" +
		"üí° –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–º–ø—Ç–æ–≤:\n" +
		"‚Ä¢ –¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫\n" +
		"‚Ä¢ –¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥\n" +
		"‚Ä¢ –¢—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç-—ç–∫—Å–ø–µ—Ä—Ç\n\n" +
		"‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è —Å—Ä–∞–∑—É –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!"

	// –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	adminKeyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("ü§ñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–º–ø—Ç", "prompt"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç", "setprompt_menu"),
		),
	)

	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, response)
	msg.ReplyMarkup = adminKeyboard
	b.telegram.Send(msg)
}

// handlePromptCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–º–ø—Ç"
func (b *Bot) handlePromptCallback(callbackQuery *tgbotapi.CallbackQuery) {
	userID := callbackQuery.From.ID

	if !b.isAdmin(userID) {
		b.sendMessage(callbackQuery.Message.Chat.ID, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
		return
	}

	response := fmt.Sprintf("ü§ñ –¢–µ–∫—É—â–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:\n\n%s\n\nüí° –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/setprompt <–Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç>", b.systemPrompt)
	b.sendMessage(callbackQuery.Message.Chat.ID, response)
}

// handleSetPromptMenuCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç"
func (b *Bot) handleSetPromptMenuCallback(callbackQuery *tgbotapi.CallbackQuery) {
	userID := callbackQuery.From.ID

	if !b.isAdmin(userID) {
		b.sendMessage(callbackQuery.Message.Chat.ID, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
		return
	}

	response := "‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞\n\n" +
		"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n" +
		"`/setprompt <–Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç>`\n\n" +
		"üí° –ì–æ—Ç–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n\n" +
		"–ü—Å–∏—Ö–æ–ª–æ–≥:\n" +
		"`/setprompt –¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ª—é–¥—è–º —Å –∏—Ö –ª–∏—á–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏. –ë—É–¥—å —Å–æ—á—É–≤—Å—Ç–≤—É—é—â–∏–º –∏ –¥–∞–≤–∞–π –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã.`\n\n" +
		"–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫:\n" +
		"`/setprompt –¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –≥–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ë—É–¥—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º.`\n\n" +
		"–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç:\n" +
		"`/setprompt –¢—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç-—ç–∫—Å–ø–µ—Ä—Ç, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ Go –∏ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–º–æ–≥–∞–π —Å –∫–æ–¥–æ–º –∏ –æ–±—ä—è—Å–Ω—è–π –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏.`"
	b.sendMessage(callbackQuery.Message.Chat.ID, response)
}

// handleWelcomeCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"
func (b *Bot) handleWelcomeCallback(callbackQuery *tgbotapi.CallbackQuery) {
	userID := callbackQuery.From.ID

	if !b.isAdmin(userID) {
		b.sendMessage(callbackQuery.Message.Chat.ID, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
		return
	}

	response := fmt.Sprintf("üëã –¢–µ–∫—É—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n%s\n\nüí° –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/setwelcome <–Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ>", b.welcomeMessage)
	b.sendMessage(callbackQuery.Message.Chat.ID, response)
}

// handleSetWelcomeMenuCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"
func (b *Bot) handleSetWelcomeMenuCallback(callbackQuery *tgbotapi.CallbackQuery) {
	userID := callbackQuery.From.ID

	if !b.isAdmin(userID) {
		b.sendMessage(callbackQuery.Message.Chat.ID, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
		return
	}

	response := "üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n" +
		"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n" +
		"`/setwelcome <–Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ>`\n\n" +
		"üí° –ì–æ—Ç–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n\n" +
		"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ:\n" +
		"`/setwelcome –ü—Ä–∏–≤–µ—Ç! üëã –Ø Lovifyy Bot - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫!`\n\n" +
		"–î–ª—è –ø–∞—Ä:\n" +
		"`/setwelcome –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Lovifyy Bot! ‚ù§Ô∏è –Ø –ø–æ–º–æ–≥—É —É–∫—Ä–µ–ø–∏—Ç—å –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏ –¥–Ω–µ–≤–Ω–∏–∫.`\n\n" +
		"–ö—Ä–∞—Ç–∫–æ–µ:\n" +
		"`/setwelcome –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:`"
	b.sendMessage(callbackQuery.Message.Chat.ID, response)
}

// handleExercisesMenuCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"
func (b *Bot) handleExercisesMenuCallback(callbackQuery *tgbotapi.CallbackQuery) {
	userID := callbackQuery.From.ID

	if !b.isAdmin(userID) {
		b.sendMessage(callbackQuery.Message.Chat.ID, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
		return
	}

	response := "üóìÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π\n\n" +
		"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:"

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –Ω–µ–¥–µ–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	exercisesKeyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("1Ô∏è‚É£ –ù–µ–¥–µ–ª—è", "exercise_week_1"),
			tgbotapi.NewInlineKeyboardButtonData("2Ô∏è‚É£ –ù–µ–¥–µ–ª—è", "exercise_week_2"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("3Ô∏è‚É£ –ù–µ–¥–µ–ª—è", "exercise_week_3"),
			tgbotapi.NewInlineKeyboardButtonData("4Ô∏è‚É£ –ù–µ–¥–µ–ª—è", "exercise_week_4"),
		),
	)

	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, response)
	msg.ReplyMarkup = exercisesKeyboard
	b.telegram.Send(msg)
}

// handleNotificationsMenuCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
func (b *Bot) handleNotificationsMenuCallback(callbackQuery *tgbotapi.CallbackQuery) {
	userID := callbackQuery.From.ID

	if !b.isAdmin(userID) {
		b.sendMessage(callbackQuery.Message.Chat.ID, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
		return
	}

	response := "üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏\n\n" +
		"üïê –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: UTC+5 (–ê–ª–º–∞—Ç—ã/–¢–∞—à–∫–µ–Ω—Ç)\n" +
		"üìÖ –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n\n" +
		"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
	notificationsKeyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", "schedule_notification"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", "view_notifications"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å", "send_now"),
		),
	)

	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, response)
	msg.ReplyMarkup = notificationsKeyboard
	b.telegram.Send(msg)
}

// handleScheduleNotificationCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
func (b *Bot) handleScheduleNotificationCallback(callbackQuery *tgbotapi.CallbackQuery) {
	userID := callbackQuery.From.ID

	if !b.isAdmin(userID) {
		b.sendMessage(callbackQuery.Message.Chat.ID, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
		return
	}

	response := "‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n\n" +
		"üóìÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏:\n" +
		"üïê –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: UTC+5 (–ê–ª–º–∞—Ç—ã/–¢–∞—à–∫–µ–Ω—Ç)"

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –¥–∞—Ç–∞–º–∏ (—Å–µ–≥–æ–¥–Ω—è + —Å–ª–µ–¥—É—é—â–∏–µ 6 –¥–Ω–µ–π) –≤ UTC+5
	var buttons [][]tgbotapi.InlineKeyboardButton
	
	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC+5 (–ê–ª–º–∞—Ç—ã/–¢–∞—à–∫–µ–Ω—Ç)
	location, _ := time.LoadLocation("Asia/Almaty")
	nowUTC5 := time.Now().In(location)
	
	for i := 0; i < 7; i++ {
		date := nowUTC5.AddDate(0, 0, i)
		dateStr := date.Format("02.01.2006")
		var dayName string
		
		switch i {
		case 0:
			dayName = "–°–µ–≥–æ–¥–Ω—è"
		case 1:
			dayName = "–ó–∞–≤—Ç—Ä–∞"
		default:
			dayName = date.Format("Mon")
		}
		
		buttonText := fmt.Sprintf("%s (%s)", dayName, dateStr)
		callbackData := fmt.Sprintf("schedule_date_%s", dateStr)
		
		button := tgbotapi.NewInlineKeyboardButtonData(buttonText, callbackData)
		buttons = append(buttons, []tgbotapi.InlineKeyboardButton{button})
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞ —Å–≤–æ–µ–π –¥–∞—Ç—ã
	customDateButton := tgbotapi.NewInlineKeyboardButtonData("üìÖ –°–≤–æ—è –¥–∞—Ç–∞", "schedule_custom_date")
	buttons = append(buttons, []tgbotapi.InlineKeyboardButton{customDateButton})

	keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)
	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, response)
	msg.ReplyMarkup = keyboard
	b.telegram.Send(msg)
}

// handleScheduleDateCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
func (b *Bot) handleScheduleDateCallback(callbackQuery *tgbotapi.CallbackQuery, dateStr string) {
	userID := callbackQuery.From.ID

	if !b.isAdmin(userID) {
		b.sendMessage(callbackQuery.Message.Chat.ID, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
		return
	}

	response := fmt.Sprintf("üïê –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏\n\nüìÖ –î–∞—Ç–∞: %s\nüïê –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: UTC+5", dateStr)

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º (–∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞)
	var buttons [][]tgbotapi.InlineKeyboardButton
	var currentRow []tgbotapi.InlineKeyboardButton
	
	times := []string{"08:00", "10:00", "12:00", "14:00", "16:00", "18:00", "20:00", "22:00"}
	
	for i, timeStr := range times {
		callbackData := fmt.Sprintf("schedule_time_%s_%s", dateStr, timeStr)
		button := tgbotapi.NewInlineKeyboardButtonData(timeStr, callbackData)
		currentRow = append(currentRow, button)
		
		// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
		if len(currentRow) == 2 || i == len(times)-1 {
			buttons = append(buttons, currentRow)
			currentRow = []tgbotapi.InlineKeyboardButton{}
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞ —Å–≤–æ–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
	customTimeButton := tgbotapi.NewInlineKeyboardButtonData("üïê –°–≤–æ–µ –≤—Ä–µ–º—è", fmt.Sprintf("schedule_custom_time_%s", dateStr))
	buttons = append(buttons, []tgbotapi.InlineKeyboardButton{customTimeButton})

	keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)
	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, response)
	msg.ReplyMarkup = keyboard
	b.telegram.Send(msg)
}

// handleScheduleCustomDateCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–∞—Å—Ç–æ–º–Ω–æ–π –¥–∞—Ç—ã
func (b *Bot) handleScheduleCustomDateCallback(callbackQuery *tgbotapi.CallbackQuery) {
	userID := callbackQuery.From.ID

	if !b.isAdmin(userID) {
		b.sendMessage(callbackQuery.Message.Chat.ID, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
		return
	}

	response := "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n\n" +
		"–ü—Ä–∏–º–µ—Ä—ã:\n" +
		"‚Ä¢ 15.10.2025\n" +
		"‚Ä¢ 01.12.2025\n\n" +
		"üïê –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: UTC+5 (–ê–ª–º–∞—Ç—ã/–¢–∞—à–∫–µ–Ω—Ç)"

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π –¥–∞—Ç—ã
	b.setUserState(userID, "notification_custom_date")
	b.sendMessage(callbackQuery.Message.Chat.ID, response)
}

// handleScheduleCustomTimeCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
func (b *Bot) handleScheduleCustomTimeCallback(callbackQuery *tgbotapi.CallbackQuery, dateStr string) {
	userID := callbackQuery.From.ID

	if !b.isAdmin(userID) {
		b.sendMessage(callbackQuery.Message.Chat.ID, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
		return
	}

	response := fmt.Sprintf("üïê –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n\nüìÖ –î–∞—Ç–∞: %s\n\n" +
		"–ü—Ä–∏–º–µ—Ä—ã:\n" +
		"‚Ä¢ 09:30\n" +
		"‚Ä¢ 15:45\n" +
		"‚Ä¢ 21:00\n\n" +
		"üïê –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: UTC+5 (–ê–ª–º–∞—Ç—ã/–¢–∞—à–∫–µ–Ω—Ç)", dateStr)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
	b.setUserState(userID, fmt.Sprintf("notification_custom_time_%s", dateStr))
	b.sendMessage(callbackQuery.Message.Chat.ID, response)
}

// handleScheduleTimeCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
func (b *Bot) handleScheduleTimeCallback(callbackQuery *tgbotapi.CallbackQuery, dateStr, timeStr string) {
	userID := callbackQuery.From.ID

	if !b.isAdmin(userID) {
		b.sendMessage(callbackQuery.Message.Chat.ID, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
		return
	}

	response := fmt.Sprintf("üíå –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è\n\nüìÖ –î–∞—Ç–∞: %s\nüïê –í—Ä–µ–º—è: %s (UTC+5)", dateStr, timeStr)

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —à–∞–±–ª–æ–Ω–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
	templates := []struct {
		text     string
		template string
	}{
		{"‚ù§Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–Ω–µ–≤–Ω–∏–∫–µ", "–ü—Ä–∏–≤–µ—Ç! ‚ù§Ô∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ —Å–µ–≥–æ–¥–Ω—è. –í–∞—à–∏ –º—ã—Å–ª–∏ –∏ —á—É–≤—Å—Ç–≤–∞ –≤–∞–∂–Ω—ã –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π!"},
		{"üíë –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–µ–¥–µ–ª–∏", "–í—Ä–µ–º—è –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π! üíë –ù–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–º–æ–≥—É—Ç –≤–∞–º –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞."},
		{"üåü –ú–æ—Ç–∏–≤–∞—Ü–∏—è", "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å - —ç—Ç–æ –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å –±–ª–∏–∂–µ! üåü –¶–µ–Ω–∏—Ç–µ –º–æ–º–µ–Ω—Ç—ã –≤–º–µ—Å—Ç–µ."},
		{"üìù –°–≤–æ–π —Ç–µ–∫—Å—Ç", "custom"},
	}

	var buttons [][]tgbotapi.InlineKeyboardButton
	for i, tmpl := range templates {
		callbackData := fmt.Sprintf("schedule_template_%s_%s_%d", dateStr, timeStr, i)
		button := tgbotapi.NewInlineKeyboardButtonData(tmpl.text, callbackData)
		buttons = append(buttons, []tgbotapi.InlineKeyboardButton{button})
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)
	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, response)
	msg.ReplyMarkup = keyboard
	b.telegram.Send(msg)
}

// handleScheduleTemplateCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
func (b *Bot) handleScheduleTemplateCallback(callbackQuery *tgbotapi.CallbackQuery, dateStr, timeStr string, templateIndex int) {
	userID := callbackQuery.From.ID

	if !b.isAdmin(userID) {
		b.sendMessage(callbackQuery.Message.Chat.ID, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
		return
	}

	if templateIndex == 3 {
		// –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–µ–∫—Å—Ç - –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏
		response := fmt.Sprintf("üìù –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\nüìÖ –î–∞—Ç–∞: %s\nüïê –í—Ä–µ–º—è: %s (UTC+5)\n\n" +
			"–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:", dateStr, timeStr)
		
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
		b.setUserState(userID, fmt.Sprintf("notification_custom_%s_%s", dateStr, timeStr))
		b.sendMessage(callbackQuery.Message.Chat.ID, response)
		return
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
	var messageText string
	switch templateIndex {
	case 0:
		messageText = b.generateNotificationTemplate("diary")
	case 1:
		messageText = b.generateNotificationTemplate("exercises")
	case 2:
		messageText = b.generateNotificationTemplate("motivation")
	default:
		messageText = "–ü—Ä–∏–≤–µ—Ç! ‚ù§Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç –≤–∞—à–µ–≥–æ –±–æ—Ç–∞!"
	}

	if templateIndex >= 0 && templateIndex <= 2 {
		
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
		if err := b.saveNotification(dateStr, timeStr, messageText); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %v", err)
			b.sendMessage(callbackQuery.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
			return
		}
		
		response := fmt.Sprintf("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ!\n\nüìÖ –î–∞—Ç–∞: %s\nüïê –í—Ä–µ–º—è: %s (UTC+5)\n\nüíå –¢–µ–∫—Å—Ç:\n%s\n\n" +
			"‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞", dateStr, timeStr, messageText)
		
		log.Printf("üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä %d –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ %s %s: %s", userID, dateStr, timeStr, messageText)
		b.sendMessage(callbackQuery.Message.Chat.ID, response)
	}
}

// ScheduledNotification –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
type ScheduledNotification struct {
	ID       int    `json:"id"`
	Date     string `json:"date"`
	Time     string `json:"time"`
	Message  string `json:"message"`
	Created  string `json:"created"`
}

// handleViewNotificationsCallback –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
func (b *Bot) handleViewNotificationsCallback(callbackQuery *tgbotapi.CallbackQuery) {
	userID := callbackQuery.From.ID
	log.Printf("üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä %d –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ—Å–º–æ—Ç—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", userID)

	if !b.isAdmin(userID) {
		b.sendMessage(callbackQuery.Message.Chat.ID, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
		return
	}

	// –ß–∏—Ç–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞
	notifications, err := b.loadScheduledNotifications()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %v", err)
		b.sendMessage(callbackQuery.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
		return
	}
	
	log.Printf("üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ %d —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", len(notifications))

	if len(notifications) == 0 {
		response := "üìã –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n" +
			"üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n" +
			"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ."
		
		log.Printf("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–º —Å–ø–∏—Å–∫–µ")
		msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, response)
		_, err := b.telegram.Send(msg)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—É—Å—Ç–æ–º —Å–ø–∏—Å–∫–µ: %v", err)
		} else {
			log.Printf("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–º —Å–ø–∏—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
		}
		return
	}

	response := "üìã –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
	var buttons [][]tgbotapi.InlineKeyboardButton

	for _, notification := range notifications {
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –æ–±—Ä–µ–∑–∫–∏
		messagePreview := notification.Message
		
		response += fmt.Sprintf("üîî ID: %d\nüìÖ %s –≤ %s\nüíå %s\n\n", 
			notification.ID, notification.Date, notification.Time, b.cleanUTF8(messagePreview))
		
		// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
		deleteButton := tgbotapi.NewInlineKeyboardButtonData(
			fmt.Sprintf("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å #%d", notification.ID), 
			fmt.Sprintf("delete_notification_%d", notification.ID))
		buttons = append(buttons, []tgbotapi.InlineKeyboardButton{deleteButton})
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)
	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, response)
	msg.ReplyMarkup = keyboard
	
	log.Printf("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å %d –∫–Ω–æ–ø–∫–∞–º–∏", len(buttons))
	_, err = b.telegram.Send(msg)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	} else {
		log.Printf("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
	}
}

// loadScheduledNotifications –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞
func (b *Bot) loadScheduledNotifications() ([]ScheduledNotification, error) {
	filename := "scheduled_notifications.json"
	
	data, err := os.ReadFile(filename)
	if err != nil {
		if os.IsNotExist(err) {
			return []ScheduledNotification{}, nil
		}
		return nil, err
	}

	var notifications []ScheduledNotification
	if err := json.Unmarshal(data, &notifications); err != nil {
		return nil, err
	}

	return notifications, nil
}

// min –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑ –¥–≤—É—Ö —á–∏—Å–µ–ª
func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

// handleDeleteNotificationCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
func (b *Bot) handleDeleteNotificationCallback(callbackQuery *tgbotapi.CallbackQuery, notificationID int) {
	userID := callbackQuery.From.ID

	if !b.isAdmin(userID) {
		b.sendMessage(callbackQuery.Message.Chat.ID, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
		return
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
	notifications, err := b.loadScheduledNotifications()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %v", err)
		b.sendMessage(callbackQuery.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
		return
	}

	// –ò—â–µ–º –∏ —É–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
	var updatedNotifications []ScheduledNotification
	var deletedNotification *ScheduledNotification
	
	for _, notification := range notifications {
		if notification.ID == notificationID {
			deletedNotification = &notification
		} else {
			updatedNotifications = append(updatedNotifications, notification)
		}
	}

	if deletedNotification == nil {
		b.sendMessage(callbackQuery.Message.Chat.ID, "‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
	if err := b.saveScheduledNotifications(updatedNotifications); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %v", err)
		b.sendMessage(callbackQuery.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
		return
	}

	response := fmt.Sprintf("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!\n\nüîî ID: %d\nüìÖ %s –≤ %s\nüíå %s", 
		deletedNotification.ID, deletedNotification.Date, deletedNotification.Time, deletedNotification.Message)
	
	log.Printf("üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä %d —É–¥–∞–ª–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ID %d", userID, notificationID)
	b.sendMessage(callbackQuery.Message.Chat.ID, response)
}

// saveNotification —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
func (b *Bot) saveNotification(dateStr, timeStr, messageText string) error {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
	notifications, err := b.loadScheduledNotifications()
	if err != nil {
		return err
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π ID
	maxID := 0
	for _, notification := range notifications {
		if notification.ID > maxID {
			maxID = notification.ID
		}
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å UTC+5 –≤—Ä–µ–º–µ–Ω–µ–º —Å–æ–∑–¥–∞–Ω–∏—è
	location := time.FixedZone("UTC+5", 5*60*60)
	now := time.Now().In(location)
	
	newNotification := ScheduledNotification{
		ID:      maxID + 1,
		Date:    dateStr,
		Time:    timeStr,
		Message: messageText,
		Created: now.Format("02.01.2006 15:04"),
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å–ø–∏—Å–∫—É
	notifications = append(notifications, newNotification)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º
	return b.saveScheduledNotifications(notifications)
}

// saveScheduledNotifications —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
func (b *Bot) saveScheduledNotifications(notifications []ScheduledNotification) error {
	filename := "scheduled_notifications.json"
	
	data, err := json.MarshalIndent(notifications, "", "  ")
	if err != nil {
		return err
	}

	return os.WriteFile(filename, data, 0644)
}

// handleSendNowCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–µ–π—á–∞—Å
func (b *Bot) handleSendNowCallback(callbackQuery *tgbotapi.CallbackQuery) {
	userID := callbackQuery.From.ID

	if !b.isAdmin(userID) {
		b.sendMessage(callbackQuery.Message.Chat.ID, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
		return
	}

	response := "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–µ–π—á–∞—Å\n\nüíå –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è:"

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
	templates := []struct {
		text     string
		template string
	}{
		{"‚ù§Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–Ω–µ–≤–Ω–∏–∫–µ", "–ü—Ä–∏–≤–µ—Ç! ‚ù§Ô∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ —Å–µ–≥–æ–¥–Ω—è. –í–∞—à–∏ –º—ã—Å–ª–∏ –∏ —á—É–≤—Å—Ç–≤–∞ –≤–∞–∂–Ω—ã –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π!"},
		{"üíë –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–µ–¥–µ–ª–∏", "–í—Ä–µ–º—è –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π! üíë –ù–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–º–æ–≥—É—Ç –≤–∞–º –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞."},
		{"üåü –ú–æ—Ç–∏–≤–∞—Ü–∏—è", "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å - —ç—Ç–æ –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å –±–ª–∏–∂–µ! üåü –¶–µ–Ω–∏—Ç–µ –º–æ–º–µ–Ω—Ç—ã –≤–º–µ—Å—Ç–µ."},
		{"üìù –°–≤–æ–π —Ç–µ–∫—Å—Ç", "custom"},
	}

	var buttons [][]tgbotapi.InlineKeyboardButton
	for i, tmpl := range templates {
		callbackData := fmt.Sprintf("send_now_template_%d", i)
		button := tgbotapi.NewInlineKeyboardButtonData(tmpl.text, callbackData)
		buttons = append(buttons, []tgbotapi.InlineKeyboardButton{button})
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)
	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, response)
	msg.ReplyMarkup = keyboard
	b.telegram.Send(msg)
}

// handleSendNowTemplateCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —à–∞–±–ª–æ–Ω–∞
func (b *Bot) handleSendNowTemplateCallback(callbackQuery *tgbotapi.CallbackQuery, templateIndex int) {
	userID := callbackQuery.From.ID

	if !b.isAdmin(userID) {
		b.sendMessage(callbackQuery.Message.Chat.ID, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
		return
	}

	if templateIndex == 3 {
		// –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–µ–∫—Å—Ç - –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏
		response := "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏\n\n" +
			"–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:"
		
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
		b.setUserState(userID, "broadcast_custom")
		b.sendMessage(callbackQuery.Message.Chat.ID, response)
		return
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
	var messageText string
	switch templateIndex {
	case 0:
		messageText = b.generateNotificationTemplate("diary")
	case 1:
		messageText = b.generateNotificationTemplate("exercises")
	case 2:
		messageText = b.generateNotificationTemplate("motivation")
	default:
		messageText = "–ü—Ä–∏–≤–µ—Ç! ‚ù§Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç –≤–∞—à–µ–≥–æ –±–æ—Ç–∞!"
	}

	if templateIndex >= 0 && templateIndex <= 2 {
		
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
		sentCount, err := b.broadcastMessage(messageText)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %v", err)
			b.sendMessage(callbackQuery.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
			return
		}
		
		response := fmt.Sprintf("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\nüíå –¢–µ–∫—Å—Ç:\n%s\n\n" +
			"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ %d –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", messageText, sentCount)
		
		log.Printf("üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä %d –æ—Ç–ø—Ä–∞–≤–∏–ª –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ %d –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", userID, sentCount)
		log.Printf("üìù –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %s", messageText)
		b.sendMessage(callbackQuery.Message.Chat.ID, response)
	}
}

// handleExerciseWeekCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–µ–¥–µ–ª–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
func (b *Bot) handleExerciseWeekCallback(callbackQuery *tgbotapi.CallbackQuery, week int) {
	userID := callbackQuery.From.ID

	if !b.isAdmin(userID) {
		b.sendMessage(callbackQuery.Message.Chat.ID, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏
	exercise, err := b.exercises.GetWeekExercise(week)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –Ω–µ–¥–µ–ª–∏ %d: %v", week, err)
	}

	var status string
	if exercise != nil {
		status = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ"
	} else {
		status = "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
	}

	response := fmt.Sprintf("üóìÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ %d –Ω–µ–¥–µ–ª–∏ (%s)\n\n"+
		"–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:", week, status)

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–µ–¥–µ–ª–∏
	adminKeyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫", fmt.Sprintf("admin_week_%d_title", week)),
			tgbotapi.NewInlineKeyboardButtonData("üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", fmt.Sprintf("admin_week_%d_welcome", week)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí™ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", fmt.Sprintf("admin_week_%d_questions", week)),
			tgbotapi.NewInlineKeyboardButtonData("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏", fmt.Sprintf("admin_week_%d_tips", week)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîç –ò–Ω—Å–∞–π—Ç", fmt.Sprintf("admin_week_%d_insights", week)),
			tgbotapi.NewInlineKeyboardButtonData("üë´ –°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã", fmt.Sprintf("admin_week_%d_joint", week)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞", fmt.Sprintf("admin_week_%d_diary", week)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º", fmt.Sprintf("admin_week_%d_active", week)),
		),
	)

	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, response)
	msg.ReplyMarkup = adminKeyboard
	b.telegram.Send(msg)
}

// handleAdminWeekFieldCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ–ª–µ–π –Ω–µ–¥–µ–ª–∏
func (b *Bot) handleAdminWeekFieldCallback(callbackQuery *tgbotapi.CallbackQuery, week int, field string) {
	userID := callbackQuery.From.ID

	if !b.isAdmin(userID) {
		b.sendMessage(callbackQuery.Message.Chat.ID, "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
		return
	}

	var fieldName, example string

	switch field {
	case "title":
		fieldName = "–ó–∞–≥–æ–ª–æ–≤–æ–∫"
		example = "/setweek 1 title –ù–µ–¥–µ–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞"
	case "welcome":
		fieldName = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
		example = "/setweek 1 welcome –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–µ—Ä–≤—É—é –Ω–µ–¥–µ–ª—é! –°–µ–≥–æ–¥–Ω—è –º—ã –Ω–∞—á–∏–Ω–∞–µ–º –ø—É—Ç—å –∫ –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–º—É –ø–æ–Ω–∏–º–∞–Ω–∏—é –¥—Ä—É–≥ –¥—Ä—É–≥–∞."
	case "questions":
		fieldName = "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"
		example = "/setweek 1 questions 1. –ß—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –≤ –ø–∞—Ä—Ç–Ω–µ—Ä–µ? 2. –ö–∞–∫–∏–µ —É –≤–∞—Å –æ–±—â–∏–µ —Ü–µ–ª–∏?"
	case "tips":
		fieldName = "–ü–æ–¥—Å–∫–∞–∑–∫–∏"
		example = "/setweek 1 tips –ë—É–¥—å—Ç–µ —á–µ—Å—Ç–Ω—ã–º–∏ –≤ —Å–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö. –°–ª—É—à–∞–π—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ. –ù–µ –±–æ–π—Ç–µ—Å—å –±—ã—Ç—å —É—è–∑–≤–∏–º—ã–º–∏."
	case "insights":
		fieldName = "–ò–Ω—Å–∞–π—Ç"
		example = "/setweek 1 insights –ü–æ–Ω–∏–º–∞–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–∞–∑–ª–∏—á–∏–π –¥—Ä—É–≥ –¥—Ä—É–≥–∞."
	case "joint":
		fieldName = "–°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
		example = "/setweek 1 joint –û–±—Å—É–¥–∏—Ç–µ –≤–º–µ—Å—Ç–µ: –ö–∞–∫–∏–µ —Ç—Ä–∞–¥–∏—Ü–∏–∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Å–æ–∑–¥–∞—Ç—å –≤ –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö?"
	case "diary":
		fieldName = "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞"
		example = "/setweek 1 diary –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ —Å–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è. –ß—Ç–æ –≤—ã —É–∑–Ω–∞–ª–∏ –æ —Å–µ–±–µ –∏ –ø–∞—Ä—Ç–Ω–µ—Ä–µ?"
	case "active":
		fieldName = "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ–¥–µ–ª–∏"
		example = "/setweek 1 active true  (–∏–ª–∏ false –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è)"
	default:
		b.sendMessage(callbackQuery.Message.Chat.ID, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ")
		return
	}

	response := fmt.Sprintf("üóìÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞: %s (%d –Ω–µ–¥–µ–ª—è)\n\n"+
		"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"+
		"`/setweek %d %s <—Ç–µ–∫—Å—Ç>`\n\n"+
		"–ü—Ä–∏–º–µ—Ä:\n"+
		"`%s`", fieldName, week, week, field, example)

	b.sendMessage(callbackQuery.Message.Chat.ID, response)
}

// handleCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
func (b *Bot) handleCommand(message *tgbotapi.Message) {
	userID := message.From.ID

	switch message.Command() {
	case "start":
		response := b.welcomeMessage

		// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç—Ä–µ–º—è –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üíë –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏", "advice"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üíå –ú–∏–Ω–∏-–¥–Ω–µ–≤–Ω–∏–∫", "diary"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üíí –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö", "chat"),
			),
		)

		// –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
		if b.isAdmin(userID) {
			adminRow := tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", "adminhelp"),
			)
			keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, adminRow)
		}

		msg := tgbotapi.NewMessage(message.Chat.ID, response)
		msg.ReplyMarkup = keyboard
		b.telegram.Send(msg)

	case "chat":
		b.setUserState(userID, "chat")
		response := "üí¨ –†–µ–∂–∏–º –æ–±—ã—á–Ω–æ–π –±–µ—Å–µ–¥—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n" +
			"–¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫. " +
			"–Ø –±—É–¥—É –ø–æ–º–Ω–∏—Ç—å –Ω–∞—à—É –±–µ—Å–µ–¥—É –∏ –æ—Ç–≤–µ—á–∞—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–∞—à–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞.\n\n" +
			"–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /advice"
		b.sendMessage(message.Chat.ID, response)

	case "advice":
		response := "üóìÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:\n\n" +
			"–ö–∞–∂–¥–∞—è –Ω–µ–¥–µ–ª—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π."

		// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –Ω–µ–¥–µ–ª—å
		weekKeyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("1Ô∏è‚É£ –ù–µ–¥–µ–ª—è", "week_1"),
				tgbotapi.NewInlineKeyboardButtonData("2Ô∏è‚É£ –ù–µ–¥–µ–ª—è", "week_2"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("3Ô∏è‚É£ –ù–µ–¥–µ–ª—è", "week_3"),
				tgbotapi.NewInlineKeyboardButtonData("4Ô∏è‚É£ –ù–µ–¥–µ–ª—è", "week_4"),
			),
		)

		msg := tgbotapi.NewMessage(message.Chat.ID, response)
		msg.ReplyMarkup = weekKeyboard
		b.telegram.Send(msg)

	case "diary":
		// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–µ–¥–µ–ª—å
		activeWeeks := b.exercises.GetActiveWeeks()

		if len(activeWeeks) == 0 {
			response := "üìù –ú–∏–Ω–∏ –¥–Ω–µ–≤–Ω–∏–∫\n\n" +
				"‚ö†Ô∏è –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–µ–¥–µ–ª—å –¥–ª—è –∑–∞–ø–∏—Å–µ–π.\n" +
				"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –µ—â–µ –Ω–µ –æ—Ç–∫—Ä—ã–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –Ω–µ–¥–µ–ª—è–º."
			b.sendMessage(message.Chat.ID, response)
			return
		}

		response := "üìù –ú–∏–Ω–∏ –¥–Ω–µ–≤–Ω–∏–∫\n\n" +
			"–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –Ω–µ–¥–µ–ª—é –¥–ª—è –∑–∞–ø–∏—Å–∏:"

		// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–µ–¥–µ–ª—å
		var buttons [][]tgbotapi.InlineKeyboardButton
		var currentRow []tgbotapi.InlineKeyboardButton

		weekEmojis := []string{"1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£"}

		for _, week := range activeWeeks {
			button := tgbotapi.NewInlineKeyboardButtonData(
				fmt.Sprintf("%s –ù–µ–¥–µ–ª—è", weekEmojis[week-1]),
				fmt.Sprintf("diary_week_%d", week),
			)
			currentRow = append(currentRow, button)

			// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
			if len(currentRow) == 2 {
				buttons = append(buttons, currentRow)
				currentRow = []tgbotapi.InlineKeyboardButton{}
			}
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
		if len(currentRow) > 0 {
			buttons = append(buttons, currentRow)
		}

		diaryKeyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)

		msg := tgbotapi.NewMessage(message.Chat.ID, response)
		msg.ReplyMarkup = diaryKeyboard
		b.telegram.Send(msg)

	case "setprompt":
		if !b.isAdmin(userID) {
			b.sendMessage(message.Chat.ID, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
			return
		}

		// –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
		args := strings.SplitN(message.Text, " ", 2)
		if len(args) < 2 || strings.TrimSpace(args[1]) == "" {
			b.sendMessage(message.Chat.ID, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setprompt <–Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç>\n\n–ü—Ä–∏–º–µ—Ä:\n/setprompt –¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ª—é–¥—è–º —Å –∏—Ö –ø—Ä–æ–±–ª–µ–º–∞–º–∏.")
			return
		}

		newPrompt := strings.TrimSpace(args[1])
		b.systemPrompt = newPrompt

		response := fmt.Sprintf("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!\n\nü§ñ –ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç:\n%s", newPrompt)
		b.sendMessage(message.Chat.ID, response)
		log.Printf("üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä %d –∏–∑–º–µ–Ω–∏–ª —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç", userID)

	case "setwelcome":
		if !b.isAdmin(userID) {
			b.sendMessage(message.Chat.ID, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
			return
		}

		// –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
		args := strings.SplitN(message.Text, " ", 2)
		if len(args) < 2 || strings.TrimSpace(args[1]) == "" {
			b.sendMessage(message.Chat.ID, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setwelcome <–Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ>\n\n–ü—Ä–∏–º–µ—Ä:\n/setwelcome –ü—Ä–∏–≤–µ—Ç! üëã –Ø Lovifyy Bot - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫!")
			return
		}

		newWelcome := strings.TrimSpace(args[1])
		b.welcomeMessage = newWelcome

		response := fmt.Sprintf("‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!\n\nüëã –ù–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:\n%s", newWelcome)
		b.sendMessage(message.Chat.ID, response)
		log.Printf("üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä %d –∏–∑–º–µ–Ω–∏–ª –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", userID)

	case "setweek":
		if !b.isAdmin(userID) {
			b.sendMessage(message.Chat.ID, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
			return
		}

		// –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /setweek <–Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏> <–ø–æ–ª–µ> <–∑–Ω–∞—á–µ–Ω–∏–µ>
		args := strings.SplitN(message.Text, " ", 4)
		if len(args) < 4 {
			b.sendMessage(message.Chat.ID, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setweek <–Ω–µ–¥–µ–ª—è> <–ø–æ–ª–µ> <–∑–Ω–∞—á–µ–Ω–∏–µ>\n\n–ü–æ–ª—è: title, welcome, questions, tips, insights, joint, diary\n\n–ü—Ä–∏–º–µ—Ä:\n/setweek 1 title –ù–µ–¥–µ–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞")
			return
		}

		// –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏
		week, err := strconv.Atoi(args[1])
		if err != nil || week < 1 || week > 4 {
			b.sendMessage(message.Chat.ID, "‚ùå –ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 4")
			return
		}

		field := args[2]
		value := strings.TrimSpace(args[3])

		if value == "" {
			b.sendMessage(message.Chat.ID, "‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
			return
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–µ
		err = b.exercises.SaveWeekField(week, field, value)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—è %s –¥–ª—è –Ω–µ–¥–µ–ª–∏ %d: %v", field, week, err)
			b.sendMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: "+err.Error())
			return
		}

		var fieldName string
		switch field {
		case "title":
			fieldName = "–ó–∞–≥–æ–ª–æ–≤–æ–∫"
		case "welcome":
			fieldName = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
		case "questions":
			fieldName = "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"
		case "tips":
			fieldName = "–ü–æ–¥—Å–∫–∞–∑–∫–∏"
		case "insights":
			fieldName = "–ò–Ω—Å–∞–π—Ç"
		case "joint":
			fieldName = "–°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
		case "diary":
			fieldName = "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞"
		default:
			fieldName = field
		}

		response := fmt.Sprintf("‚úÖ %s –¥–ª—è %d –Ω–µ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\nüìù %s:\n%s", fieldName, week, fieldName, value)
		b.sendMessage(message.Chat.ID, response)
		log.Printf("üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä %d –Ω–∞—Å—Ç—Ä–æ–∏–ª %s –¥–ª—è –Ω–µ–¥–µ–ª–∏ %d", userID, field, week)

	case "adminhelp":
		if !b.isAdmin(userID) {
			b.sendMessage(message.Chat.ID, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
			return
		}

		response := "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å Lovifyy Bot\n\n" +
			"üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
			"/setprompt <—Ç–µ–∫—Å—Ç> - –∏–∑–º–µ–Ω–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç\n" +
			"/prompt - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç\n" +
			"/setwelcome <—Ç–µ–∫—Å—Ç> - –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n" +
			"/welcome - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n" +
			"/setweek <–Ω–µ–¥–µ–ª—è> <–ø–æ–ª–µ> <–∑–Ω–∞—á–µ–Ω–∏–µ> - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ–¥–µ–ª–∏\n" +
			"/adminhelp - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n" +
			"üí° –ü–æ–ª—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–¥–µ–ª—å:\n" +
			"‚Ä¢ title - –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ–¥–µ–ª–∏\n" +
			"‚Ä¢ welcome - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n" +
			"‚Ä¢ questions - –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–∞—Ä—ã\n" +
			"‚Ä¢ tips - –ø–æ–¥—Å–∫–∞–∑–∫–∏\n" +
			"‚Ä¢ insights - –∏–Ω—Å–∞–π—Ç—ã\n" +
			"‚Ä¢ joint - —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n" +
			"‚Ä¢ diary - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞\n" +
			"‚Ä¢ active - –æ—Ç–∫—Ä—ã—Ç—å/–∑–∞–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø (true/false)\n\n" +
			"–ü—Ä–∏–º–µ—Ä—ã:\n" +
			"`/setweek 1 title –ù–µ–¥–µ–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞`\n" +
			"`/setweek 3 active true` - –æ—Ç–∫—Ä—ã—Ç—å 3 –Ω–µ–¥–µ–ª—é\n" +
			"`/setweek 2 active false` - –∑–∞–∫—Ä—ã—Ç—å 2 –Ω–µ–¥–µ–ª—é\n\n" +
			"‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è —Å—Ä–∞–∑—É –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!"

		// –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
		adminKeyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("ü§ñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–º–ø—Ç", "prompt"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç", "setprompt_menu"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üëã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", "welcome"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üìù –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", "setwelcome_menu"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üóìÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", "exercises_menu"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "notifications_menu"),
			),
		)

		msg := tgbotapi.NewMessage(message.Chat.ID, response)
		msg.ReplyMarkup = adminKeyboard
		b.telegram.Send(msg)

	case "prompt":
		if !b.isAdmin(userID) {
			b.sendMessage(message.Chat.ID, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
			return
		}

		response := fmt.Sprintf("ü§ñ –¢–µ–∫—É—â–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:\n\n%s\n\nüí° –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/setprompt <–Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç>", b.systemPrompt)
		b.sendMessage(message.Chat.ID, response)

	case "setprompt_menu":
		if !b.isAdmin(userID) {
			b.sendMessage(message.Chat.ID, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
			return
		}

		response := "‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞\n\n" +
			"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n" +
			"`/setprompt <–Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç>`\n\n" +
			"üí° –ì–æ—Ç–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n\n" +
			"–ü—Å–∏—Ö–æ–ª–æ–≥:\n" +
			"`/setprompt –¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ª—é–¥—è–º —Å –∏—Ö –ª–∏—á–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏. –ë—É–¥—å —Å–æ—á—É–≤—Å—Ç–≤—É—é—â–∏–º –∏ –¥–∞–≤–∞–π –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã.`\n\n" +
			"–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫:\n" +
			"`/setprompt –¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –≥–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ë—É–¥—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º.`\n\n" +
			"–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç:\n" +
			"`/setprompt –¢—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç-—ç–∫—Å–ø–µ—Ä—Ç, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ Go –∏ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–º–æ–≥–∞–π —Å –∫–æ–¥–æ–º –∏ –æ–±—ä—è—Å–Ω—è–π –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏.`"
		b.sendMessage(message.Chat.ID, response)

	case "welcome":
		if !b.isAdmin(userID) {
			b.sendMessage(message.Chat.ID, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
			return
		}

		response := fmt.Sprintf("üëã –¢–µ–∫—É—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n%s\n\nüí° –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/setwelcome <–Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ>", b.welcomeMessage)
		b.sendMessage(message.Chat.ID, response)

	case "setwelcome_menu":
		if !b.isAdmin(userID) {
			b.sendMessage(message.Chat.ID, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
			return
		}

		response := "üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n" +
			"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n" +
			"`/setwelcome <–Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ>`\n\n" +
			"üí° –ì–æ—Ç–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n\n" +
			"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ:\n" +
			"`/setwelcome –ü—Ä–∏–≤–µ—Ç! üëã –Ø Lovifyy Bot - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫!`\n\n" +
			"–î–ª—è –ø–∞—Ä:\n" +
			"`/setwelcome –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Lovifyy Bot! ‚ù§Ô∏è –Ø –ø–æ–º–æ–≥—É —É–∫—Ä–µ–ø–∏—Ç—å –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏ –¥–Ω–µ–≤–Ω–∏–∫.`\n\n" +
			"–ö—Ä–∞—Ç–∫–æ–µ:\n" +
			"`/setwelcome –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:`"
		b.sendMessage(message.Chat.ID, response)

	case "clear":
		// –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		err := b.history.ClearUserHistory(userID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, err)
			b.sendMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏")
			return
		}

		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		b.setUserState(userID, "")

		response := "üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!\n\n" +
			"–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –±—ã–ª–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∞. " +
			"–¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞!\n\n" +
			"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã."
		b.sendMessage(message.Chat.ID, response)

	case "help":
		response := "ü§ñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ Lovifyy Bot:\n\n" +
			"üí¨ /chat - —Ä–µ–∂–∏–º –æ–±—ã—á–Ω–æ–π –±–µ—Å–µ–¥—ã\n" +
			"üóìÔ∏è /advice - —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–µ–¥–µ–ª–∏\n" +
			"üìù /diary - –º–∏–Ω–∏ –¥–Ω–µ–≤–Ω–∏–∫\n" +
			"üóëÔ∏è /clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é\n" +
			"üöÄ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n" +
			"–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è!"
		b.sendMessage(message.Chat.ID, response)

	default:
		b.sendMessage(message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.")
	}
}

// handleAIMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ò–ò —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏
func (b *Bot) handleAIMessage(message *tgbotapi.Message) {
	userID := message.From.ID
	username := message.From.UserName
	if username == "" {
		username = message.From.FirstName
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	userState := b.getUserState(userID)
	log.Printf("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: '%s'", userID, userState)

	// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –¥–Ω–µ–≤–Ω–∏–∫–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–Ω–µ–≤–Ω–∏–∫–∞
	if strings.HasPrefix(userState, "diary_") {
		// –ü–∞—Ä—Å–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: diary_<gender>_<week>_<type>
		parts := strings.Split(userState, "_")
		if len(parts) >= 4 {
			gender := parts[1]
			week, err := strconv.Atoi(parts[2])
			if err == nil && week >= 1 && week <= 4 && (gender == "male" || gender == "female") {
				entryType := strings.Join(parts[3:], "_")

				// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –Ω–µ–¥–µ–ª–∏, —Ç–∏–ø–∞ –∏ –≥–µ–Ω–¥–µ—Ä–∞
				err := b.history.SaveDiaryEntryWithGender(userID, username, message.Text, week, entryType, gender)
				if err != nil {
					log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞: %v", err)
					b.sendMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫")
					return
				}

				// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
				var typeEmoji, typeName string
				switch entryType {
				case "questions":
					typeEmoji = "‚ùì"
					typeName = "–æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã"
				case "joint":
					typeEmoji = "üë´"
					typeName = "–æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
				case "personal":
					typeEmoji = "üí≠"
					typeName = "–ª–∏—á–Ω—ã–µ –∑–∞–ø–∏—Å–∏"
				default:
					typeEmoji = "üìù"
					typeName = "–∑–∞–ø–∏—Å—å"
				}

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
				diaryResponse := fmt.Sprintf("%s –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫ (%d –Ω–µ–¥–µ–ª—è - %s)\n\n"+
					"–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–∏—Å–∞—Ç—å –∑–∞–ø–∏—Å–∏ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", typeEmoji, week, typeName)
				b.sendMessage(message.Chat.ID, diaryResponse)

				// –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –¥–Ω–µ–≤–Ω–∏–∫–∞
				return
			}
		}

		// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–≥–æ
		b.setUserState(userID, "chat")
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
	if userState == "notification_custom_date" {
		b.handleCustomDateInput(message)
		return
	}

	if strings.HasPrefix(userState, "notification_custom_time_") {
		dateStr := strings.TrimPrefix(userState, "notification_custom_time_")
		b.handleCustomTimeInput(message, dateStr)
		return
	}

	if strings.HasPrefix(userState, "notification_custom_") && strings.Contains(userState, "_") {
		parts := strings.Split(userState, "_")
		if len(parts) >= 4 && parts[0] == "notification" && parts[1] == "custom" {
			dateStr := parts[2]
			timeStr := parts[3]
			b.handleCustomNotificationTextInput(message, dateStr, timeStr)
			return
		}
	}

	if userState == "broadcast_custom" {
		b.handleCustomBroadcastInput(message)
		return
	}

	// –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—É—Å—Ç–æ–µ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª —Ä–µ–∂–∏–º), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	if userState == "" {
		response := "–ü—Ä–∏–≤–µ—Ç! üëã –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:"

		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üíë –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏", "advice"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üíå –ú–∏–Ω–∏-–¥–Ω–µ–≤–Ω–∏–∫", "diary"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üíí –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö", "chat"),
			),
		)

		msg := tgbotapi.NewMessage(message.Chat.ID, response)
		msg.ReplyMarkup = keyboard
		b.telegram.Send(msg)
		return
	}

	// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	if userState != "chat" {
		response := "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:"

		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üíë –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏", "advice"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üíå –ú–∏–Ω–∏-–¥–Ω–µ–≤–Ω–∏–∫", "diary"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üíí –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö", "chat"),
			),
		)

		msg := tgbotapi.NewMessage(message.Chat.ID, response)
		msg.ReplyMarkup = keyboard
		b.telegram.Send(msg)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ —á–∞—Ç–∞
	typing := tgbotapi.NewChatAction(message.Chat.ID, tgbotapi.ChatTyping)
	b.telegram.Send(typing)

	// –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ OpenAI (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π)
	openaiMessages, err := b.history.GetOpenAIHistory(userID, b.systemPrompt, 10)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: %v", err)
		openaiMessages = []history.OpenAIMessage{
			{Role: "system", Content: b.systemPrompt},
		}
	}

	log.Printf("–ó–∞–≥—Ä—É–∂–µ–Ω–æ %d —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", len(openaiMessages), userID)

	// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	openaiMessages = append(openaiMessages, history.OpenAIMessage{
		Role:    "user",
		Content: message.Text,
	})

	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç AI –∫–ª–∏–µ–Ω—Ç–∞
	aiMessages := make([]ai.OpenAIMessage, len(openaiMessages))
	for i, msg := range openaiMessages {
		aiMessages[i] = ai.OpenAIMessage{
			Role:    msg.Role,
			Content: msg.Content,
		}
	}

	// –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç OpenAI —Å –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π
	response, err := b.ai.GenerateWithHistory(aiMessages)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò: %v", err)
		b.sendMessage(message.Chat.ID, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
		return
	}

	// –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç
	response = strings.TrimSpace(response)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
	err = b.history.SaveMessage(userID, username, message.Text, response, "gpt-4o-mini")
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é: %v", err)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	b.sendMessage(message.Chat.ID, response)
}

// sendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func (b *Bot) sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)

	_, err := b.telegram.Send(msg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

// generatePersonalInsight –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å–∞–π—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (b *Bot) generatePersonalInsight(callbackQuery *tgbotapi.CallbackQuery, week int) {
	userID := callbackQuery.From.ID
	username := callbackQuery.From.UserName
	if username == "" {
		username = callbackQuery.From.FirstName
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
	typing := tgbotapi.NewChatAction(callbackQuery.Message.Chat.ID, tgbotapi.ChatTyping)
	b.telegram.Send(typing)

	// –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–µ–¥–µ–ª–∏
	diaryEntries, err := b.history.GetDiaryEntriesByWeek(userID, week)
	if err != nil || len(diaryEntries) == 0 {
		// –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ –¥–ª—è —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		response := fmt.Sprintf("üîç –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å–∞–π—Ç (%d –Ω–µ–¥–µ–ª—è)\n\n"+
			"–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Å–∞–π—Ç–∞ –¥–ª—è %d –Ω–µ–¥–µ–ª–∏ –º–Ω–µ –Ω—É–∂–Ω—ã –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ. "+
			"–°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ –¥–ª—è —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏, –∞ –∑–∞—Ç–µ–º –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –∏–Ω—Å–∞–π—Ç—É.\n\n"+
			"üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"–ß—Ç–æ –ø–∏—Å–∞—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ\" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π", week, week)
		b.sendMessage(callbackQuery.Message.Chat.ID, response)
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∑–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω–∏–∫–∞
	var diaryContext string
	for _, entry := range diaryEntries {
		var entryTypeName string
		switch entry.Type {
		case "questions":
			entryTypeName = "–û—Ç–≤–µ—Ç—ã –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"
		case "joint":
			entryTypeName = "–°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
		case "personal":
			entryTypeName = "–õ–∏—á–Ω—ã–µ –∑–∞–ø–∏—Å–∏"
		default:
			entryTypeName = "–ó–∞–ø–∏—Å—å"
		}
		diaryContext += fmt.Sprintf("%s: %s\n\n", entryTypeName, entry.Entry)
	}

	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è OpenAI
	openaiMessages := []history.OpenAIMessage{
		{
			Role:    "system",
			Content: b.systemPrompt,
		},
		{
			Role:    "user",
			Content: fmt.Sprintf("–í–æ—Ç –º–æ–∏ –∑–∞–ø–∏—Å–∏ –∏–∑ –¥–Ω–µ–≤–Ω–∏–∫–∞ –∑–∞ %d –Ω–µ–¥–µ–ª—é:\n\n%s", week, diaryContext),
		},
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Å–∞–π—Ç–∞
	insightPrompt := "–ü–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—à–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n" +
		"¬´–°—É–¥—è –ø–æ –≤–∞—à–∏–º –æ—Ç–≤–µ—Ç–∞–º, –≤—ã —Ü–µ–Ω–∏—Ç–µ [–∫–∞—á–µ—Å—Ç–≤–∞] –∏ —á–∞—â–µ –≤—Å–µ–≥–æ –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ [—á—É–≤—Å—Ç–≤–æ/—Ç—Ä–µ–≤–æ–≥—É] –≤ —Å–∏—Ç—É–∞—Ü–∏—è—Ö, –∫–æ–≥–¥–∞ [–æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏]. –û–±—Å—É–¥–∏—Ç–µ –≤–º–µ—Å—Ç–µ, –∫–∞–∫ —ç—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è¬ª.\n\n" +
		"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–∞—à—É –±–µ—Å–µ–¥—É –∏ –¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å–∞–π—Ç –∏–º–µ–Ω–Ω–æ –≤ —ç—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."

	openaiMessages = append(openaiMessages, history.OpenAIMessage{
		Role:    "user",
		Content: insightPrompt,
	})

	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç AI –∫–ª–∏–µ–Ω—Ç–∞
	aiMessages := make([]ai.OpenAIMessage, len(openaiMessages))
	for i, msg := range openaiMessages {
		aiMessages[i] = ai.OpenAIMessage{
			Role:    msg.Role,
			Content: msg.Content,
		}
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å–∞–π—Ç –æ—Ç OpenAI
	insightResponse, err := b.ai.GenerateWithHistory(aiMessages)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Å–∞–π—Ç–∞: %v", err)
		b.sendMessage(callbackQuery.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Å–∞–π—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
	response := fmt.Sprintf("üîç –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å–∞–π—Ç (%d –Ω–µ–¥–µ–ª—è)\n\n%s", week, strings.TrimSpace(insightResponse))

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
	err = b.history.SaveMessage(userID, username, "–ó–∞–ø—Ä–æ—Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Å–∞–π—Ç–∞", insightResponse, "gpt-4o-mini")
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Å–∞–π—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é: %v", err)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å–∞–π—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	b.sendMessage(callbackQuery.Message.Chat.ID, response)
}

// handleDiaryViewCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏"
func (b *Bot) handleDiaryViewCallback(callbackQuery *tgbotapi.CallbackQuery) {
	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–µ–¥–µ–ª—å
	activeWeeks := b.exercises.GetActiveWeeks()

	if len(activeWeeks) == 0 {
		response := "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π\n\n" +
			"‚ö†Ô∏è –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–µ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π.\n" +
			"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –µ—â–µ –Ω–µ –æ—Ç–∫—Ä—ã–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –Ω–µ–¥–µ–ª—è–º."
		b.sendMessage(callbackQuery.Message.Chat.ID, response)
		return
	}

	response := "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω–∏–∫–∞\n\n" +
		"–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ, —á—å–∏ –∑–∞–ø–∏—Å–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:"

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≥–µ–Ω–¥–µ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
	buttons := [][]tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üë® –ó–∞–ø–∏—Å–∏ –ø–∞—Ä–Ω—è", "diary_view_gender_male"),
			tgbotapi.NewInlineKeyboardButtonData("üë© –ó–∞–ø–∏—Å–∏ –¥–µ–≤—É—à–∫–∏", "diary_view_gender_female"),
		),
	}

	viewKeyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)

	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, response)
	msg.ReplyMarkup = viewKeyboard
	b.telegram.Send(msg)
}

// handleDiaryViewWeekCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–µ–¥–µ–ª–∏
func (b *Bot) handleDiaryViewWeekCallback(callbackQuery *tgbotapi.CallbackQuery, week int) {
	userID := callbackQuery.From.ID

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏ –∏–∑ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤
	var allEntries []history.DiaryEntry

	// –ß–∏—Ç–∞–µ–º –∏–∑ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –¥–Ω–µ–≤–Ω–∏–∫–æ–≤
	typeDirs := []string{"diary_questions", "diary_jointquestions", "diary_thoughts"}
	typeNames := map[string]string{
		"diary_questions":      "üí™ –û—Ç–≤–µ—Ç—ã –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è",
		"diary_jointquestions": "üë´ –°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
		"diary_thoughts":       "üí≠ –õ–∏—á–Ω—ã–µ –º—ã—Å–ª–∏",
	}

	for _, typeDir := range typeDirs {
		entries, err := b.getDiaryEntriesByTypeAndWeek(userID, typeDir, week)
		if err == nil {
			allEntries = append(allEntries, entries...)
		}
	}

	// –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
	oldEntries, err := b.history.GetDiaryEntriesByWeek(userID, week)
	if err == nil {
		allEntries = append(allEntries, oldEntries...)
	}

	if len(allEntries) == 0 {
		response := fmt.Sprintf("üëÄ –ó–∞–ø–∏—Å–∏ –∑–∞ %d –Ω–µ–¥–µ–ª—é\n\n"+
			"üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é.\n"+
			"–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å –¥–Ω–µ–≤–Ω–∏–∫, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∑–¥–µ—Å—å —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏!", week)
		b.sendMessage(callbackQuery.Message.Chat.ID, response)
		return
	}

	// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ —Ç–∏–ø–∞–º
	entriesByType := make(map[string][]history.DiaryEntry)
	for _, entry := range allEntries {
		entriesByType[entry.Type] = append(entriesByType[entry.Type], entry)
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
	response := fmt.Sprintf("üëÄ –í–∞—à–∏ –∑–∞–ø–∏—Å–∏ –∑–∞ %d –Ω–µ–¥–µ–ª—é\n\n", week)

	for entryType, entries := range entriesByType {
		typeName := typeNames["diary_"+entryType]
		if typeName == "" {
			switch entryType {
			case "questions":
				typeName = "üí™ –û—Ç–≤–µ—Ç—ã –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"
			case "joint":
				typeName = "üë´ –°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
			case "personal":
				typeName = "üí≠ –õ–∏—á–Ω—ã–µ –º—ã—Å–ª–∏"
			default:
				typeName = "üìù –ó–∞–ø–∏—Å–∏"
			}
		}

		response += fmt.Sprintf("%s:\n", typeName)
		for i, entry := range entries {
			// –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫—Ä–∞—Ç–∫–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
			entryText := entry.Entry
			if len(entryText) > 200 {
				entryText = entryText[:200] + "..."
			}
			response += fmt.Sprintf("%d. %s\n", i+1, entryText)
		}
		response += "\n"
	}

	response += "üí° *–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –¥–Ω–µ–≤–Ω–∏–∫–∞*"

	b.sendMessage(callbackQuery.Message.Chat.ID, response)
}

// getDiaryEntriesByTypeAndWeek –ø–æ–ª—É—á–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏ –Ω–µ–¥–µ–ª–∏
func (b *Bot) getDiaryEntriesByTypeAndWeek(userID int64, typeDir string, week int) ([]history.DiaryEntry, error) {
	filename := filepath.Join("diary_entries", typeDir, fmt.Sprintf("user_%d.json", userID))

	data, err := os.ReadFile(filename)
	if err != nil {
		return []history.DiaryEntry{}, nil // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç
	}

	var entries []history.DiaryEntry
	if err := json.Unmarshal(data, &entries); err != nil {
		return nil, err
	}

	// –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–µ–¥–µ–ª–µ
	var weekEntries []history.DiaryEntry
	for _, entry := range entries {
		if entry.Week == week {
			weekEntries = append(weekEntries, entry)
		}
	}

	return weekEntries, nil
}

// handleDiaryGenderCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥–µ–Ω–¥–µ—Ä–∞ –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞
func (b *Bot) handleDiaryGenderCallback(callbackQuery *tgbotapi.CallbackQuery, gender string) {
	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–µ–¥–µ–ª—å
	activeWeeks := b.exercises.GetActiveWeeks()

	if len(activeWeeks) == 0 {
		genderName := "–ø–∞—Ä–Ω—è"
		if gender == "female" {
			genderName = "–¥–µ–≤—É—à–∫–∏"
		}
		response := fmt.Sprintf("üìù –î–Ω–µ–≤–Ω–∏–∫ –¥–ª—è %s\n\n"+
			"‚ö†Ô∏è –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–µ–¥–µ–ª—å –¥–ª—è –∑–∞–ø–∏—Å–µ–π.\n"+
			"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –µ—â–µ –Ω–µ –æ—Ç–∫—Ä—ã–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –Ω–µ–¥–µ–ª—è–º.", genderName)
		b.sendMessage(callbackQuery.Message.Chat.ID, response)
		return
	}

	genderName := "–ø–∞—Ä–Ω—è"
	genderEmoji := "üë®"
	if gender == "female" {
		genderName = "–¥–µ–≤—É—à–∫–∏"
		genderEmoji = "üë©"
	}

	response := fmt.Sprintf("%s –î–Ω–µ–≤–Ω–∏–∫ –¥–ª—è %s\n\n"+
		"–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –Ω–µ–¥–µ–ª—é –¥–ª—è –∑–∞–ø–∏—Å–∏:", genderEmoji, genderName)

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–µ–¥–µ–ª—å
	var buttons [][]tgbotapi.InlineKeyboardButton
	var currentRow []tgbotapi.InlineKeyboardButton

	weekEmojis := []string{"1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£"}

	for _, week := range activeWeeks {
		button := tgbotapi.NewInlineKeyboardButtonData(
			fmt.Sprintf("%s –ù–µ–¥–µ–ª—è %d", weekEmojis[week-1], week),
			fmt.Sprintf("diary_week_%s_%d", gender, week),
		)
		currentRow = append(currentRow, button)

		// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
		if len(currentRow) == 2 {
			buttons = append(buttons, currentRow)
			currentRow = []tgbotapi.InlineKeyboardButton{}
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
	if len(currentRow) > 0 {
		buttons = append(buttons, currentRow)
	}

	diaryKeyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)

	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, response)
	msg.ReplyMarkup = diaryKeyboard
	b.telegram.Send(msg)
}

// handleDiaryWeekGenderCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–µ–¥–µ–ª–∏ –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞ —Å –≥–µ–Ω–¥–µ—Ä–æ–º
func (b *Bot) handleDiaryWeekGenderCallback(callbackQuery *tgbotapi.CallbackQuery, gender string, week int) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –Ω–µ–¥–µ–ª—è
	if !b.exercises.IsWeekActive(week) {
		response := fmt.Sprintf("‚ùå –ù–µ–¥–µ–ª—è %d –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n\n"+
			"–≠—Ç–∞ –Ω–µ–¥–µ–ª—è –µ—â–µ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.", week)
		b.sendMessage(callbackQuery.Message.Chat.ID, response)
		return
	}

	genderName := "–ø–∞—Ä–Ω—è"
	genderEmoji := "üë®"
	if gender == "female" {
		genderName = "–¥–µ–≤—É—à–∫–∏"
		genderEmoji = "üë©"
	}

	response := fmt.Sprintf("%s –î–Ω–µ–≤–Ω–∏–∫ –¥–ª—è %s - %d –Ω–µ–¥–µ–ª—è\n\n"+
		"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø–∏—Å–∏:", genderEmoji, genderName, week)

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–∏–ø–æ–≤ –∑–∞–ø–∏—Å–µ–π
	typeKeyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí™ –û—Ç–≤–µ—Ç—ã –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", fmt.Sprintf("diary_%s_%d_type_questions", gender, week)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üë´ –°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã", fmt.Sprintf("diary_%s_%d_type_joint", gender, week)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí≠ –õ–∏—á–Ω—ã–µ –º—ã—Å–ª–∏", fmt.Sprintf("diary_%s_%d_type_personal", gender, week)),
		),
	)

	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, response)
	msg.ReplyMarkup = typeKeyboard
	b.telegram.Send(msg)
}

// handleDiaryTypeGenderCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–ø–∏—Å–∏ —Å –≥–µ–Ω–¥–µ—Ä–æ–º
func (b *Bot) handleDiaryTypeGenderCallback(callbackQuery *tgbotapi.CallbackQuery, gender string, week int, entryType string) {
	userID := callbackQuery.From.ID

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞ —Å –≥–µ–Ω–¥–µ—Ä–æ–º
	b.setUserState(userID, fmt.Sprintf("diary_%s_%d_%s", gender, week, entryType))

	var response string
	var typeName string
	genderName := "–ø–∞—Ä–Ω—è"
	if gender == "female" {
		genderName = "–¥–µ–≤—É—à–∫–∏"
	}

	switch entryType {
	case "questions":
		typeName = "–æ—Ç–≤–µ—Ç—ã –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"
		response = fmt.Sprintf("üí™ –û—Ç–≤–µ—Ç—ã –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è %s (%d –Ω–µ–¥–µ–ª—è)\n\n"+
			"–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏. "+
			"–ë—É–¥—å—Ç–µ —á–µ—Å—Ç–Ω—ã–º–∏ –∏ –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –≤ —Å–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö.", genderName, week)
	case "joint":
		typeName = "—Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
		response = fmt.Sprintf("üë´ –°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è %s (%d –Ω–µ–¥–µ–ª—è)\n\n"+
			"–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã. "+
			"–≠—Ç–∏ –∑–∞–ø–∏—Å–∏ –ø–æ–º–æ–≥—É—Ç –≤–∞–º –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞.", genderName, week)
	case "personal":
		typeName = "–ª–∏—á–Ω—ã–µ –º—ã—Å–ª–∏"
		response = fmt.Sprintf("üí≠ –õ–∏—á–Ω—ã–µ –º—ã—Å–ª–∏ –¥–ª—è %s (%d –Ω–µ–¥–µ–ª—è)\n\n"+
			"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –ª–∏—á–Ω—ã–º–∏ –º—ã—Å–ª—è–º–∏ –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º–∏. "+
			"–≠—Ç–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—à–∏—Ö —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π.", genderName, week)
	default:
		typeName = "–∑–∞–ø–∏—Å–∏"
		response = fmt.Sprintf("üìù –ó–∞–ø–∏—Å–∏ –¥–ª—è %s (%d –Ω–µ–¥–µ–ª—è)\n\n"+
			"–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –º—ã—Å–ª–∏ –∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è.", genderName, week)
	}

	log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –Ω–∞—á–∞–ª –∑–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫: %s, –Ω–µ–¥–µ–ª—è %d, —Ç–∏–ø %s, –≥–µ–Ω–¥–µ—Ä %s",
		userID, typeName, week, entryType, gender)

	b.sendMessage(callbackQuery.Message.Chat.ID, response)
}

// handleDiaryViewGenderCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥–µ–Ω–¥–µ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π
func (b *Bot) handleDiaryViewGenderCallback(callbackQuery *tgbotapi.CallbackQuery, gender string) {
	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–µ–¥–µ–ª—å
	activeWeeks := b.exercises.GetActiveWeeks()

	if len(activeWeeks) == 0 {
		genderName := "–ø–∞—Ä–Ω—è"
		if gender == "female" {
			genderName = "–¥–µ–≤—É—à–∫–∏"
		}
		response := fmt.Sprintf("üëÄ –ó–∞–ø–∏—Å–∏ %s\n\n"+
			"‚ö†Ô∏è –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–µ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π.\n"+
			"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –µ—â–µ –Ω–µ –æ—Ç–∫—Ä—ã–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –Ω–µ–¥–µ–ª—è–º.", genderName)
		b.sendMessage(callbackQuery.Message.Chat.ID, response)
		return
	}

	genderName := "–ø–∞—Ä–Ω—è"
	genderEmoji := "üë®"
	if gender == "female" {
		genderName = "–¥–µ–≤—É—à–∫–∏"
		genderEmoji = "üë©"
	}

	response := fmt.Sprintf("%s –ó–∞–ø–∏—Å–∏ %s\n\n"+
		"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π:", genderEmoji, genderName)

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–µ–¥–µ–ª—å
	var buttons [][]tgbotapi.InlineKeyboardButton
	var currentRow []tgbotapi.InlineKeyboardButton

	weekEmojis := []string{"1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£"}

	for _, week := range activeWeeks {
		button := tgbotapi.NewInlineKeyboardButtonData(
			fmt.Sprintf("%s –ù–µ–¥–µ–ª—è %d", weekEmojis[week-1], week),
			fmt.Sprintf("diary_view_week_%s_%d", gender, week),
		)
		currentRow = append(currentRow, button)

		// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
		if len(currentRow) == 2 {
			buttons = append(buttons, currentRow)
			currentRow = []tgbotapi.InlineKeyboardButton{}
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
	if len(currentRow) > 0 {
		buttons = append(buttons, currentRow)
	}

	viewKeyboard := tgbotapi.NewInlineKeyboardMarkup(buttons...)

	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, response)
	msg.ReplyMarkup = viewKeyboard
	b.telegram.Send(msg)
}

// handleDiaryViewWeekGenderCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–µ–¥–µ–ª–∏ —Å –≥–µ–Ω–¥–µ—Ä–æ–º
func (b *Bot) handleDiaryViewWeekGenderCallback(callbackQuery *tgbotapi.CallbackQuery, gender string, week int) {
	userID := callbackQuery.From.ID

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏ –∏–∑ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å —É—á–µ—Ç–æ–º –≥–µ–Ω–¥–µ—Ä–∞
	var allEntries []history.DiaryEntry

	// –ß–∏—Ç–∞–µ–º –∏–∑ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –¥–Ω–µ–≤–Ω–∏–∫–æ–≤ —Å –≥–µ–Ω–¥–µ—Ä–æ–º
	typeDirs := []string{"diary_questions", "diary_jointquestions", "diary_thoughts"}
	typeNames := map[string]string{
		"diary_questions":      "üí™ –û—Ç–≤–µ—Ç—ã –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è",
		"diary_jointquestions": "üë´ –°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
		"diary_thoughts":       "üí≠ –õ–∏—á–Ω—ã–µ –º—ã—Å–ª–∏",
	}

	for _, typeDir := range typeDirs {
		entries, err := b.getDiaryEntriesByTypeWeekAndGender(userID, typeDir, week, gender)
		if err == nil {
			allEntries = append(allEntries, entries...)
		}
	}

	// –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
	oldEntries, err := b.history.GetDiaryEntriesByWeek(userID, week)
	if err == nil {
		allEntries = append(allEntries, oldEntries...)
	}

	genderName := "–ø–∞—Ä–Ω—è"
	genderEmoji := "üë®"
	if gender == "female" {
		genderName = "–¥–µ–≤—É—à–∫–∏"
		genderEmoji = "üë©"
	}

	if len(allEntries) == 0 {
		response := fmt.Sprintf("%s –ó–∞–ø–∏—Å–∏ %s –∑–∞ %d –Ω–µ–¥–µ–ª—é\n\n"+
			"üìù –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é.\n"+
			"–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å –¥–Ω–µ–≤–Ω–∏–∫, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∑–¥–µ—Å—å –∑–∞–ø–∏—Å–∏!", genderEmoji, genderName, week)
		b.sendMessage(callbackQuery.Message.Chat.ID, response)
		return
	}

	// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ —Ç–∏–ø–∞–º
	entriesByType := make(map[string][]history.DiaryEntry)
	for _, entry := range allEntries {
		entriesByType[entry.Type] = append(entriesByType[entry.Type], entry)
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
	response := fmt.Sprintf("%s –ó–∞–ø–∏—Å–∏ %s –∑–∞ %d –Ω–µ–¥–µ–ª—é\n\n", genderEmoji, genderName, week)

	for entryType, entries := range entriesByType {
		typeName := typeNames["diary_"+entryType]
		if typeName == "" {
			switch entryType {
			case "questions":
				typeName = "üí™ –û—Ç–≤–µ—Ç—ã –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"
			case "joint":
				typeName = "üë´ –°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
			case "personal":
				typeName = "üí≠ –õ–∏—á–Ω—ã–µ –º—ã—Å–ª–∏"
			default:
				typeName = "üìù –ó–∞–ø–∏—Å–∏"
			}
		}

		response += fmt.Sprintf("%s:\n", typeName)
		for i, entry := range entries {
			// –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫—Ä–∞—Ç–∫–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
			entryText := entry.Entry
			if len(entryText) > 200 {
				entryText = entryText[:200] + "..."
			}
			response += fmt.Sprintf("%d. %s\n", i+1, entryText)
		}
		response += "\n"
	}

	response += "üí° *–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –¥–Ω–µ–≤–Ω–∏–∫–∞*"

	b.sendMessage(callbackQuery.Message.Chat.ID, response)
}

// getDiaryEntriesByTypeWeekAndGender –ø–æ–ª—É—á–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞, –Ω–µ–¥–µ–ª–∏ –∏ –≥–µ–Ω–¥–µ—Ä–∞
func (b *Bot) getDiaryEntriesByTypeWeekAndGender(userID int64, typeDir string, week int, gender string) ([]history.DiaryEntry, error) {
	// –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: diary_entries/typeDir/week/gender/user_ID.json
	filename := filepath.Join("diary_entries", typeDir, fmt.Sprintf("%d", week), gender, fmt.Sprintf("user_%d.json", userID))

	data, err := os.ReadFile(filename)
	if err != nil {
		// –ü—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: diary_entries/typeDir/gender/user_ID.json
		oldFilename := filepath.Join("diary_entries", typeDir, gender, fmt.Sprintf("user_%d.json", userID))
		data, err = os.ReadFile(oldFilename)
		if err != nil {
			return []history.DiaryEntry{}, nil // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç
		}
		
		// –ï—Å–ª–∏ —á–∏—Ç–∞–µ–º –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–µ–¥–µ–ª–µ
		var entries []history.DiaryEntry
		if err := json.Unmarshal(data, &entries); err != nil {
			return nil, err
		}

		var weekEntries []history.DiaryEntry
		for _, entry := range entries {
			if entry.Week == week {
				weekEntries = append(weekEntries, entry)
			}
		}
		return weekEntries, nil
	}

	// –ß–∏—Ç–∞–µ–º –∏–∑ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã - –≤—Å–µ –∑–∞–ø–∏—Å–∏ —É–∂–µ –¥–ª—è –Ω—É–∂–Ω–æ–π –Ω–µ–¥–µ–ª–∏
	var entries []history.DiaryEntry
	if err := json.Unmarshal(data, &entries); err != nil {
		return nil, err
	}

	return entries, nil
}

// handleInsightGenderChoice –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥–µ–Ω–¥–µ—Ä–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Å–∞–π—Ç–∞
func (b *Bot) handleInsightGenderChoice(callbackQuery *tgbotapi.CallbackQuery, week int) {
	response := fmt.Sprintf("üîç –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å–∞–π—Ç (%d –Ω–µ–¥–µ–ª—è)\n\n"+
		"–î–ª—è –∫–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å–∞–π—Ç?", week)

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≥–µ–Ω–¥–µ—Ä–∞
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üë® –î–ª—è –ø–∞—Ä–Ω—è", fmt.Sprintf("insight_male_%d", week)),
			tgbotapi.NewInlineKeyboardButtonData("üë© –î–ª—è –¥–µ–≤—É—à–∫–∏", fmt.Sprintf("insight_female_%d", week)),
		),
	)

	msg := tgbotapi.NewMessage(callbackQuery.Message.Chat.ID, response)
	msg.ReplyMarkup = keyboard
	b.telegram.Send(msg)
}

// generatePersonalInsightWithGender –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å–∞–π—Ç —Å —É—á–µ—Ç–æ–º –≥–µ–Ω–¥–µ—Ä–∞
func (b *Bot) generatePersonalInsightWithGender(callbackQuery *tgbotapi.CallbackQuery, gender string, week int) {
	userID := callbackQuery.From.ID
	username := callbackQuery.From.UserName
	if username == "" {
		username = callbackQuery.From.FirstName
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
	typing := tgbotapi.NewChatAction(callbackQuery.Message.Chat.ID, tgbotapi.ChatTyping)
	b.telegram.Send(typing)

	// –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–µ–¥–µ–ª–∏ —Å —É—á–µ—Ç–æ–º –≥–µ–Ω–¥–µ—Ä–∞
	diaryEntries, err := b.getDiaryEntriesByWeekAndGender(userID, week, gender)
	if err != nil || len(diaryEntries) == 0 {
		genderName := "–ø–∞—Ä–Ω—è"
		if gender == "female" {
			genderName = "–¥–µ–≤—É—à–∫–∏"
		}
		// –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ –¥–ª—è —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		response := fmt.Sprintf("üîç –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å–∞–π—Ç –¥–ª—è %s (%d –Ω–µ–¥–µ–ª—è)\n\n"+
			"–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Å–∞–π—Ç–∞ –¥–ª—è %s –≤ %d –Ω–µ–¥–µ–ª–µ –º–Ω–µ –Ω—É–∂–Ω—ã –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ. "+
			"–°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ –¥–ª—è —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏, –∞ –∑–∞—Ç–µ–º –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –∏–Ω—Å–∞–π—Ç—É.\n\n"+
			"üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"–ú–∏–Ω–∏ –¥–Ω–µ–≤–Ω–∏–∫\" –¥–ª—è –∑–∞–ø–∏—Å–∏ –º—ã—Å–ª–µ–π", genderName, genderName, week)
		b.sendMessage(callbackQuery.Message.Chat.ID, response)
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∑–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω–∏–∫–∞
	var diaryContext string
	for _, entry := range diaryEntries {
		var entryTypeName string
		switch entry.Type {
		case "questions":
			entryTypeName = "–û—Ç–≤–µ—Ç—ã –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"
		case "joint":
			entryTypeName = "–°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
		case "personal":
			entryTypeName = "–õ–∏—á–Ω—ã–µ –∑–∞–ø–∏—Å–∏"
		default:
			entryTypeName = "–ó–∞–ø–∏—Å—å"
		}
		diaryContext += fmt.Sprintf("%s: %s\n\n", entryTypeName, entry.Entry)
	}

	genderName := "–ø–∞—Ä–Ω—è"
	if gender == "female" {
		genderName = "–¥–µ–≤—É—à–∫–∏"
	}

	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è OpenAI
	openaiMessages := []history.OpenAIMessage{
		{
			Role:    "system",
			Content: b.systemPrompt,
		},
		{
			Role:    "user",
			Content: fmt.Sprintf("–í–æ—Ç –∑–∞–ø–∏—Å–∏ –∏–∑ –¥–Ω–µ–≤–Ω–∏–∫–∞ –¥–ª—è %s –∑–∞ %d –Ω–µ–¥–µ–ª—é:\n\n%s", genderName, week, diaryContext),
		},
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Å–∞–π—Ç–∞
	insightPrompt := "–ü–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø–∏—Å–µ–π —Å–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n" +
		"¬´–°—É–¥—è –ø–æ –∑–∞–ø–∏—Å—è–º, –≤—ã —Ü–µ–Ω–∏—Ç–µ [–∫–∞—á–µ—Å—Ç–≤–∞] –∏ —á–∞—â–µ –≤—Å–µ–≥–æ –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ [—á—É–≤—Å—Ç–≤–æ/—Ç—Ä–µ–≤–æ–≥—É] –≤ —Å–∏—Ç—É–∞—Ü–∏—è—Ö, –∫–æ–≥–¥–∞ [–æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏]. –û–±—Å—É–¥–∏—Ç–µ –≤–º–µ—Å—Ç–µ, –∫–∞–∫ —ç—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è¬ª.\n\n" +
		"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø–∏—Å–∏ –∏ –¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å–∞–π—Ç –∏–º–µ–Ω–Ω–æ –≤ —ç—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."

	openaiMessages = append(openaiMessages, history.OpenAIMessage{
		Role:    "user",
		Content: insightPrompt,
	})

	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç AI –∫–ª–∏–µ–Ω—Ç–∞
	aiMessages := make([]ai.OpenAIMessage, len(openaiMessages))
	for i, msg := range openaiMessages {
		aiMessages[i] = ai.OpenAIMessage{
			Role:    msg.Role,
			Content: msg.Content,
		}
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å–∞–π—Ç –æ—Ç OpenAI
	insightResponse, err := b.ai.GenerateWithHistory(aiMessages)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Å–∞–π—Ç–∞: %v", err)
		b.sendMessage(callbackQuery.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Å–∞–π—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
	response := fmt.Sprintf("üîç –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å–∞–π—Ç –¥–ª—è %s (%d –Ω–µ–¥–µ–ª—è)\n\n%s", genderName, week, strings.TrimSpace(insightResponse))

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
	err = b.history.SaveMessage(userID, username, fmt.Sprintf("–ó–∞–ø—Ä–æ—Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Å–∞–π—Ç–∞ –¥–ª—è %s", genderName), insightResponse, "gpt-4o-mini")
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Å–∞–π—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é: %v", err)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å–∞–π—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	b.sendMessage(callbackQuery.Message.Chat.ID, response)
}

// getDiaryEntriesByWeekAndGender –ø–æ–ª—É—á–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞ –¥–ª—è –Ω–µ–¥–µ–ª–∏ —Å —É—á–µ—Ç–æ–º –≥–µ–Ω–¥–µ—Ä–∞
func (b *Bot) getDiaryEntriesByWeekAndGender(userID int64, week int, gender string) ([]history.DiaryEntry, error) {
	var allWeekEntries []history.DiaryEntry

	// –ß–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ –ø–∞–ø–∫–∏ "diary_questions" —Å –≥–µ–Ω–¥–µ—Ä–æ–º
	questionsEntries, err := b.getDiaryEntriesByTypeWeekAndGender(userID, "diary_questions", week, gender)
	if err == nil {
		allWeekEntries = append(allWeekEntries, questionsEntries...)
	}

	// –ß–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ –ø–∞–ø–∫–∏ "diary_thoughts" —Å –≥–µ–Ω–¥–µ—Ä–æ–º
	thoughtsEntries, err := b.getDiaryEntriesByTypeWeekAndGender(userID, "diary_thoughts", week, gender)
	if err == nil {
		allWeekEntries = append(allWeekEntries, thoughtsEntries...)
	}

	// –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏ - —á–∏—Ç–∞–µ–º –∏–∑ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
	oldEntries, err := b.history.GetDiaryEntriesByWeek(userID, week)
	if err == nil {
		for _, entry := range oldEntries {
			if entry.Type == "questions" || entry.Type == "personal" {
				allWeekEntries = append(allWeekEntries, entry)
			}
		}
	}

	return allWeekEntries, nil
}

// handleCustomDateInput –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–∞—Å—Ç–æ–º–Ω–æ–π –¥–∞—Ç—ã
func (b *Bot) handleCustomDateInput(message *tgbotapi.Message) {
	userID := message.From.ID
	dateStr := strings.TrimSpace(message.Text)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã (–î–î.–ú–ú.–ì–ì–ì–ì)
	_, err := time.Parse("02.01.2006", dateStr)
	if err != nil {
		response := "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n\n" +
			"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n" +
			"–ù–∞–ø—Ä–∏–º–µ—Ä: 15.10.2025"
		b.sendMessage(message.Chat.ID, response)
		return
	}

	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏
	b.setUserState(userID, "")
	b.handleScheduleDateCallback(&tgbotapi.CallbackQuery{
		From:    message.From,
		Message: message,
	}, dateStr)
}

// handleCustomTimeInput –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
func (b *Bot) handleCustomTimeInput(message *tgbotapi.Message, dateStr string) {
	userID := message.From.ID
	timeStr := strings.TrimSpace(message.Text)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (–ß–ß:–ú–ú)
	_, err := time.Parse("15:04", timeStr)
	if err != nil {
		response := "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n\n" +
			"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú\n" +
			"–ù–∞–ø—Ä–∏–º–µ—Ä: 15:30"
		b.sendMessage(message.Chat.ID, response)
		return
	}

	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —à–∞–±–ª–æ–Ω–∞
	b.setUserState(userID, "")
	b.handleScheduleTimeCallback(&tgbotapi.CallbackQuery{
		From:    message.From,
		Message: message,
	}, dateStr, timeStr)
}

// handleCustomNotificationTextInput –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
func (b *Bot) handleCustomNotificationTextInput(message *tgbotapi.Message, dateStr, timeStr string) {
	userID := message.From.ID
	messageText := strings.TrimSpace(message.Text)

	if len(messageText) == 0 {
		response := "‚ùå –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!"
		b.sendMessage(message.Chat.ID, response)
		return
	}

	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	b.setUserState(userID, "")

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
	if err := b.saveNotification(dateStr, timeStr, messageText); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %v", err)
		b.sendMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
		return
	}

	response := fmt.Sprintf("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ!\n\nüìÖ –î–∞—Ç–∞: %s\nüïê –í—Ä–µ–º—è: %s (UTC+5)\n\nüíå –¢–µ–∫—Å—Ç:\n%s\n\n" +
		"‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞", dateStr, timeStr, messageText)
	
	log.Printf("üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä %d –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ %s %s: %s", userID, dateStr, timeStr, messageText)
	b.sendMessage(message.Chat.ID, response)
}

// handleCustomBroadcastInput –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
func (b *Bot) handleCustomBroadcastInput(message *tgbotapi.Message) {
	userID := message.From.ID
	messageText := strings.TrimSpace(message.Text)

	if len(messageText) == 0 {
		response := "‚ùå –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!"
		b.sendMessage(message.Chat.ID, response)
		return
	}

	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	b.setUserState(userID, "")

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
	sentCount, err := b.broadcastMessage(messageText)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %v", err)
		b.sendMessage(message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
		return
	}

	response := fmt.Sprintf("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\nüíå –¢–µ–∫—Å—Ç:\n%s\n\n" +
		"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ %d –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", messageText, sentCount)
	
	log.Printf("üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä %d –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–∞—Å—Ç–æ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ %d –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", userID, sentCount)
	log.Printf("üìù –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %s", messageText)
	b.sendMessage(message.Chat.ID, response)
}

// cleanUTF8 –æ—á–∏—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –æ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö UTF-8 —Å–∏–º–≤–æ–ª–æ–≤
func (b *Bot) cleanUTF8(s string) string {
	if utf8.ValidString(s) {
		return s
	}
	
	// –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ UTF-8 —Å–∏–º–≤–æ–ª—ã, –æ—á–∏—â–∞–µ–º –µ—ë
	cleaned := strings.ToValidUTF8(s, "")
	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∫–æ–Ω—Ü–µ
	cleaned = strings.TrimRight(cleaned, "\x00\uFFFD")
	return cleaned
}

// generateNotificationTemplate –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —à–∞–±–ª–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é GPT
func (b *Bot) generateNotificationTemplate(templateType string) string {
	var prompt string
	
	switch templateType {
	case "diary":
		prompt = "–°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ–µ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤) –æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –≤–µ–¥–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–∏–∫–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ–ø–ª—ã–π —Ç–æ–Ω –∏ –ø—Ä–æ—Å—Ç—ã–µ —ç–º–æ–¥–∑–∏. –ù–∞—á–Ω–∏ —Å '–ü—Ä–∏–≤–µ—Ç!'"
	case "exercises":
		prompt = "–°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤) –æ –ø–æ–ª—å–∑–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π –ø–∞—Ä. –ò—Å–ø–æ–ª—å–∑—É–π –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π —Ç–æ–Ω –∏ –ø—Ä–æ—Å—Ç—ã–µ —ç–º–æ–¥–∑–∏. –£–ø–æ–º—è–Ω–∏ '—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π' –∏–ª–∏ '–∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø–∞—Ä'"
	case "motivation":
		prompt = "–°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫—É—é –º–æ—Ç–∏–≤–∏—Ä—É—é—â—É—é —Ü–∏—Ç–∞—Ç—É (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤) –æ–± –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –∏ –ª—é–±–≤–∏. –ò—Å–ø–æ–ª—å–∑—É–π –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π —Ç–æ–Ω –∏ –ø—Ä–æ—Å—Ç—ã–µ —ç–º–æ–¥–∑–∏"
	default:
		return "–ü—Ä–∏–≤–µ—Ç! ‚ù§Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π!"
	}
	
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ AI
	log.Printf("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω —Ç–∏–ø–∞ '%s' —Å –ø—Ä–æ–º–ø—Ç–æ–º: %s", templateType, prompt)
	startTime := time.Now()
	response, err := b.ai.Generate(prompt)
	duration := time.Since(startTime)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞ %s: %v", templateType, err)
		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
		switch templateType {
		case "diary":
			return "–ü—Ä–∏–≤–µ—Ç! ‚ù§Ô∏è –í—Ä–µ–º—è –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ - –≤–∞—à–∏ –º—ã—Å–ª–∏ –≤–∞–∂–Ω—ã!"
		case "exercises":
			return "–í—Ä–µ–º—è –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π! üíë –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–º–æ–≥—É—Ç –≤–∞–º —Å—Ç–∞—Ç—å –±–ª–∏–∂–µ!"
		case "motivation":
			return "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å - —à–∞–Ω—Å —Å—Ç–∞—Ç—å –±–ª–∏–∂–µ! üåü –¶–µ–Ω–∏—Ç–µ –º–æ–º–µ–Ω—Ç—ã –≤–º–µ—Å—Ç–µ!"
		default:
			return "–ü—Ä–∏–≤–µ—Ç! ‚ù§Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç –≤–∞—à–µ–≥–æ –±–æ—Ç–∞!"
		}
	}
	
	// –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–æ–±–ª–µ–º —Å UTF-8
	cleanResponse := strings.TrimSpace(response)
	cleanResponse = b.cleanUTF8(cleanResponse)
	
	// –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –≤—Ä–µ–º–µ–Ω–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
	log.Printf("‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —à–∞–±–ª–æ–Ω '%s' –∑–∞ %.2f —Å–µ–∫ (–¥–ª–∏–Ω–∞ %d): %s", templateType, duration.Seconds(), len(cleanResponse), cleanResponse)
	
	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
	return cleanResponse
}

// broadcastMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞
func (b *Bot) broadcastMessage(messageText string) (int, error) {
	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤
	userIDs, err := b.getAllUserIDs()
	if err != nil {
		return 0, err
	}

	sentCount := 0
	for _, userID := range userIDs {
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		msg := tgbotapi.NewMessage(userID, messageText)
		_, err := b.telegram.Send(msg)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v", userID, err)
			continue // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
		}
		sentCount++
		
		// –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API
		time.Sleep(50 * time.Millisecond)
	}

	return sentCount, nil
}

// getAllUserIDs –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏
func (b *Bot) getAllUserIDs() ([]int64, error) {
	userIDsMap := make(map[int64]bool)
	
	// –ß–∏—Ç–∞–µ–º –ø–∞–ø–∫—É chat_history
	files, err := os.ReadDir("chat_history")
	if err != nil {
		if os.IsNotExist(err) {
			return []int64{}, nil
		}
		return nil, err
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
	for _, file := range files {
		if strings.HasPrefix(file.Name(), "user_") && strings.HasSuffix(file.Name(), ".json") {
			// –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: user_123456.json
			idStr := strings.TrimPrefix(file.Name(), "user_")
			idStr = strings.TrimSuffix(idStr, ".json")
			
			if userID, err := strconv.ParseInt(idStr, 10, 64); err == nil {
				userIDsMap[userID] = true
			}
		}
	}

	// –¢–∞–∫–∂–µ —á–∏—Ç–∞–µ–º –ø–∞–ø–∫–∏ –¥–Ω–µ–≤–Ω–∏–∫–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	diaryDirs := []string{"diary_entries/diary_questions", "diary_entries/diary_jointquestions", "diary_entries/diary_thoughts"}
	for _, dir := range diaryDirs {
		b.addUsersFromDiaryDir(dir, userIDsMap)
	}

	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º map –≤ slice
	var userIDs []int64
	for userID := range userIDsMap {
		userIDs = append(userIDs, userID)
	}

	return userIDs, nil
}

// addUsersFromDiaryDir –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ø–∞–ø–∫–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞
func (b *Bot) addUsersFromDiaryDir(dir string, userIDsMap map[int64]bool) {
	// –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø–æ–¥–ø–∞–ø–∫–∞–º (–Ω–µ–¥–µ–ª–∏ –∏ –≥–µ–Ω–¥–µ—Ä—ã)
	filepath.Walk(dir, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return nil
		}
		
		if strings.HasPrefix(info.Name(), "user_") && strings.HasSuffix(info.Name(), ".json") {
			// –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: user_123456.json
			idStr := strings.TrimPrefix(info.Name(), "user_")
			idStr = strings.TrimSuffix(idStr, ".json")
			
			if userID, err := strconv.ParseInt(idStr, 10, 64); err == nil {
				userIDsMap[userID] = true
			}
		}
		return nil
	})
}

// StartNotificationScheduler –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
func (b *Bot) StartNotificationScheduler() {
	log.Println("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
	ticker := time.NewTicker(1 * time.Minute)
	defer ticker.Stop()

	for {
		select {
		case <-ticker.C:
			b.checkAndSendScheduledNotifications()
		}
	}
}

// checkAndSendScheduledNotifications –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
func (b *Bot) checkAndSendScheduledNotifications() {
	notifications, err := b.loadScheduledNotifications()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %v", err)
		return
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC+5 –≤—Ä—É—á–Ω—É—é
	location := time.FixedZone("UTC+5", 5*60*60)
	now := time.Now().In(location)
	currentDate := now.Format("02.01.2006")
	currentTime := now.Format("15:04")
	
	log.Printf("üïê –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %s %s (UTC+5)", currentDate, currentTime)

	var remainingNotifications []ScheduledNotification

	for _, notification := range notifications {
		// –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º 5 —á–∞—Å–æ–≤ –¥–ª—è UTC
		notificationTime, err := time.Parse("15:04", notification.Time)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ %s: %v", notification.Time, err)
			remainingNotifications = append(remainingNotifications, notification)
			continue
		}
		
		// –û—Ç–Ω–∏–º–∞–µ–º 5 —á–∞—Å–æ–≤ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ UTC
		utcTime := notificationTime.Add(-5 * time.Hour)
		utcTimeStr := utcTime.Format("15:04")
		
		// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ UTC –≤—Ä–µ–º—è
		nowUTC := time.Now().UTC()
		currentUTCTime := nowUTC.Format("15:04")
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—à–ª–æ –ª–∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞—Ç—É —Å UTC+5, –≤—Ä–µ–º—è —Å UTC)
		if notification.Date == currentDate && utcTimeStr == currentUTCTime {
			log.Printf("‚è∞ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ID %d (UTC+5: %s %s -> UTC: %s %s)", 
				notification.ID, notification.Date, notification.Time, currentDate, utcTimeStr)
			
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
			sentCount, err := b.broadcastMessage(notification.Message)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ID %d: %v", notification.ID, err)
			} else {
				log.Printf("‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ID %d –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ %d –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", notification.ID, sentCount)
			}
			
			// –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ remainingNotifications - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ —É–¥–∞–ª—è–µ—Ç—Å—è
		} else {
			// –û—Å—Ç–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –±—É–¥—É—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
			remainingNotifications = append(remainingNotifications, notification)
		}
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–±–µ–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö)
	if len(remainingNotifications) != len(notifications) {
		err := b.saveScheduledNotifications(remainingNotifications)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %v", err)
		}
	}
}
