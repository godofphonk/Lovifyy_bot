package bot

import (
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// handleCallbackQuery –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback queries
func (b *EnterpriseBot) handleCallbackQuery(update tgbotapi.Update) error {
	callback := tgbotapi.NewCallback(update.CallbackQuery.ID, "")
	if _, err := b.telegram.Request(callback); err != nil {
		b.logger.WithError(err).Error("Failed to answer callback query")
	}

	data := update.CallbackQuery.Data
	userID := update.CallbackQuery.From.ID

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
	b.notificationService.RegisterUser(userID, update.CallbackQuery.From.UserName)
	
	// –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	b.notificationService.UpdateUserActivity(userID)

	b.logger.WithFields(map[string]interface{}{
		"user_id":       userID,
		"callback_data": data,
	}).Info("Processing callback query")

    // –†–æ—É—Ç–∏–Ω–≥ callback queries –∫–∞–∫ –≤ legacy
    switch {
    case data == "chat":
        return b.commandHandler.HandleCallback(update)
    case data == "advice":
        return b.commandHandler.HandleCallback(update)
    case data == "diary":
        return b.commandHandler.HandleCallback(update)
    case data == "adminhelp":
        return b.commandHandler.HandleCallback(update)
    case data == "notifications_menu":
        return b.commandHandler.HandleCallback(update)
    case data == "schedule_notification":
        return b.commandHandler.HandleCallback(update)
    case data == "view_notifications":
        return b.commandHandler.HandleCallback(update)
    case data == "send_now":
        return b.commandHandler.HandleCallback(update)
    case data == "notify_custom":
        return b.commandHandler.HandleCallback(update)
    case data == "notify_schedule_custom":
        return b.commandHandler.HandleCallback(update)
    case strings.HasPrefix(data, "schedule_date_"):
        return b.commandHandler.HandleCallback(update)
    case strings.HasPrefix(data, "schedule_time_"):
        return b.commandHandler.HandleCallback(update)
    case strings.HasPrefix(data, "schedule_type_"):
        return b.commandHandler.HandleCallback(update)
    case strings.HasPrefix(data, "schedule_custom_time_"):
        return b.commandHandler.HandleCallback(update)
    case strings.HasPrefix(data, "schedule_custom_date"):
        return b.commandHandler.HandleCallback(update)
    case data == "mode_chat":
        return b.handleChatMode(userID)
    case data == "mode_diary":
        return b.handleDiaryMode(userID)
    case data == "exercises":
        // –î–µ–ª–µ–≥–∏—Ä—É–µ–º –ø–æ–∫–∞–∑ –Ω–µ–¥–µ–ª—å –≤ CommandHandler (–∫–∞–∫ –≤ legacy –ª–æ–≥–∏–∫–µ –º–µ–Ω—é)
        return b.commandHandler.HandleCallback(update)
    case data == "exercise_week_1":
        return b.handleExerciseWeekCallbackNew(userID, 1)
    case data == "exercise_week_2":
        return b.handleExerciseWeekCallbackNew(userID, 2)
    case data == "exercise_week_3":
        return b.handleExerciseWeekCallbackNew(userID, 3)
    case data == "exercise_week_4":
        return b.handleExerciseWeekCallbackNew(userID, 4)
    case strings.HasPrefix(data, "diary_type_"):
        return b.handleDiaryTypeCallback(userID, data)
    case strings.HasPrefix(data, "diary_gender_"):
        return b.handleDiaryGenderCallback(userID, data)
    case strings.HasPrefix(data, "week_"):
        // –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–¥–µ–ª—å –≤ CommandHandler
        return b.commandHandler.HandleCallback(update)
    case strings.HasPrefix(data, "notify_send_all_"):
        // –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ CommandHandler
        return b.commandHandler.HandleCallback(update)
    case strings.HasPrefix(data, "notify_"):
        // –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ CommandHandler
        return b.commandHandler.HandleCallback(update)
    case strings.HasPrefix(data, "final_insight") || data == "generate_final_insight":
        // –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Å–∞–π—Ç–∞ –≤ CommandHandler
        return b.commandHandler.HandleCallback(update)
    default:
        b.logger.WithField("callback_data", data).Warn("Unknown callback query")
        return nil
    }
}

// handleExerciseWeekCallbackNew –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–µ–¥–µ–ª–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π (–Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)
func (b *EnterpriseBot) handleExerciseWeekCallbackNew(userID int64, week int) error {
    // –î–µ–ª–µ–≥–∏—Ä—É–µ–º –≤ CommandHandler –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    msg := tgbotapi.NewMessage(userID, "üìÖ –§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–µ–ª—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    _, err := b.telegram.Send(msg)
    return err
}

// handleDiaryGenderCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª–∞ –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞
func (b *EnterpriseBot) handleDiaryGenderCallback(userID int64, data string) error {
    // –ü–∞—Ä—Å–∏–º callback data: diary_gender_male –∏–ª–∏ diary_gender_female
    parts := strings.Split(data, "_")
    if len(parts) < 3 {
        msg := tgbotapi.NewMessage(userID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        _, err := b.telegram.Send(msg)
        return err
    }

    gender := parts[2] // male –∏–ª–∏ female

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø—ã –∑–∞–ø–∏—Å–µ–π
    text := "üìî –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ:"
    
    var genderEmoji string
    if gender == "male" {
        genderEmoji = "üë®"
    } else {
        genderEmoji = "üë©"
    }

    keyboard := tgbotapi.NewInlineKeyboardMarkup(
        tgbotapi.NewInlineKeyboardRow(
            tgbotapi.NewInlineKeyboardButtonData("üìù –õ–∏—á–Ω—ã–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è", "diary_type_personal_"+gender),
        ),
        tgbotapi.NewInlineKeyboardRow(
            tgbotapi.NewInlineKeyboardButtonData("‚ùì –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã", "diary_type_questions_"+gender),
        ),
        tgbotapi.NewInlineKeyboardRow(
            tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "mode_diary"),
        ),
    )

    msg := tgbotapi.NewMessage(userID, genderEmoji+" "+text)
    msg.ReplyMarkup = keyboard
    _, err := b.telegram.Send(msg)
    return err
}

