package bot

import (
	"fmt"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// handleCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
func (b *EnterpriseBot) handleCommand(update tgbotapi.Update) error {
	command := update.Message.Command()
	userID := update.Message.From.ID

	b.logger.WithFields(map[string]interface{}{
		"user_id":  userID,
		"username": update.Message.From.UserName,
		"command":  command,
	}).Info("Processing command")

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
	if b.metrics != nil {
		b.metrics.RecordCommand(command, "telegram")
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
	switch command {
	case "start":
		return b.commandHandler.HandleStart(update)
	case "help":
		return b.commandHandler.HandleHelp(update)
	case "chat":
		return b.handleChatMode(userID)
	case "diary":
		return b.handleDiaryMode(userID)
	case "advice":
		return b.handleExercises(userID)
	case "adminhelp":
		return b.commandHandler.HandleAdmin(update)
	case "metrics":
		return b.handleMetricsCommand(update)
	default:
		msg := tgbotapi.NewMessage(userID, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
		_, err := b.telegram.Send(msg)
		return err
	}
}

// handleMetricsCommand –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
func (b *EnterpriseBot) handleMetricsCommand(update tgbotapi.Update) error {
	userID := update.Message.From.ID
	
	if !b.userManager.IsAdmin(userID) {
		msg := tgbotapi.NewMessage(userID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ—Ç—Ä–∏–∫")
		_, err := b.telegram.Send(msg)
		return err
	}

	// TODO: Implement metrics display
	msg := tgbotapi.NewMessage(userID, "üìä –ú–µ—Ç—Ä–∏–∫–∏ –±–æ—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
	_, err := b.telegram.Send(msg)
	return err
}

// setupCommands –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
func (b *EnterpriseBot) setupCommands() error {
	b.logger.Info("Setting up bot commands...")

	commands := []tgbotapi.BotCommand{
		{Command: "start", Description: "üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"},
		{Command: "advice", Description: "üíë –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏"},
		{Command: "diary", Description: "üìù –ú–∏–Ω–∏-–¥–Ω–µ–≤–Ω–∏–∫"},
		{Command: "chat", Description: "üíí –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö"},
	}

	config := tgbotapi.NewSetMyCommands(commands...)
	_, err := b.telegram.Request(config)
	if err != nil {
		return fmt.Errorf("failed to set bot commands: %w", err)
	}

	b.logger.WithField("commands_count", len(commands)).Info("Bot commands set successfully")
	return nil
}

// processUpdate –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
func (b *EnterpriseBot) processUpdate(update tgbotapi.Update) error {
	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
	if update.Message != nil && update.Message.IsCommand() {
		return b.handleCommand(update)
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback queries
	if update.CallbackQuery != nil {
		return b.handleCallbackQuery(update)
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	if update.Message != nil {
		return b.handleMessage(update)
	}

	return nil
}

// handleUpdateWithMetrics –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
func (b *EnterpriseBot) handleUpdateWithMetrics(update tgbotapi.Update) {
	startTime := time.Now()

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
	if err := b.processUpdate(update); err != nil {
		b.logger.WithError(err).Error("Failed to process update")
		
		if b.metrics != nil {
			b.metrics.RecordError("update_processing", "general")
		}
	}

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
	if b.metrics != nil {
		duration := time.Since(startTime)
		b.metrics.RecordResponseDuration("update_processing", "telegram", duration)
	}
}
