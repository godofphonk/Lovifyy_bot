package bot

import (
	"fmt"
	"strings"
	"time"
	
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// handleDiaryTypeCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ
func (b *EnterpriseBot) handleDiaryTypeCallback(userID int64, data string) error {
	// –ü–∞—Ä—Å–∏–º callback data: diary_type_personal_male –∏–ª–∏ diary_type_questions_female
	parts := strings.Split(data, "_")
	if len(parts) < 4 {
		return fmt.Errorf("invalid diary type callback data: %s", data)
	}
	
	entryType := parts[2] // personal, questions, joint
	gender := parts[3]    // male, female
	
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫
	state := fmt.Sprintf("diary_entry_%s_%s", entryType, gender)
	b.userManager.SetState(userID, state)
	
	genderName := "–ø–∞—Ä–Ω—è"
	genderEmoji := "üë®"
	if gender == "female" {
		genderName = "–¥–µ–≤—É—à–∫–∏"
		genderEmoji = "üë©"
	}
	
	var typeDescription string
	switch entryType {
	case "personal":
		typeDescription = "–ª–∏—á–Ω—ã–µ –º—ã—Å–ª–∏ –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è"
	case "questions":
		typeDescription = "–æ—Ç–≤–µ—Ç—ã –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–µ–¥–µ–ª–∏"
	case "joint":
		typeDescription = "—Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è"
	}
	
	text := fmt.Sprintf("%s **–î–Ω–µ–≤–Ω–∏–∫ –¥–ª—è %s**\n\nüìù –ù–∞–ø–∏—à–∏—Ç–µ %s.\n\n–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è —Å–æ—Ö—Ä–∞–Ω—é –µ–≥–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ.", 
		genderEmoji, genderName, typeDescription)
	
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –∫ —Ç–∏–ø–∞–º", fmt.Sprintf("diary_gender_%s", gender)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"),
		),
	)
	
	msg := tgbotapi.NewMessage(userID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard
	_, err := b.telegram.Send(msg)
	return err
}

// handleDiaryMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ –¥–Ω–µ–≤–Ω–∏–∫–∞ —Å –≥–µ–Ω–¥–µ—Ä–æ–º
func (b *EnterpriseBot) handleDiaryMessageWithGender(userID int64, messageText string, state string) error {
	// –ü–∞—Ä—Å–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: diary_entry_personal_male
	parts := strings.Split(state, "_")
	if len(parts) < 4 {
		return fmt.Errorf("invalid diary state: %s", state)
	}
	
	entryType := parts[2] // personal, questions, joint
	gender := parts[3]    // male, female
	
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫ —Å –≥–µ–Ω–¥–µ—Ä–æ–º
	err := b.saveDiaryEntryWithGender(userID, entryType, gender, messageText)
	if err != nil {
		msg := tgbotapi.NewMessage(userID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫")
		b.telegram.Send(msg)
		return err
	}
	
	genderName := "–ø–∞—Ä–Ω—è"
	genderEmoji := "üë®"
	if gender == "female" {
		genderName = "–¥–µ–≤—É—à–∫–∏"
		genderEmoji = "üë©"
	}
	
	text := fmt.Sprintf("‚úÖ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫ –¥–ª—è %s!\n\n%s –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–∏—Å–∞—Ç—å –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∏–ø –∑–∞–ø–∏—Å–∏.", genderName, genderEmoji)
	
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–∏—Å–∞—Ç—å", fmt.Sprintf("diary_type_%s_%s", entryType, gender)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîÑ –î—Ä—É–≥–æ–π —Ç–∏–ø –∑–∞–ø–∏—Å–∏", fmt.Sprintf("diary_gender_%s", gender)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"),
		),
	)
	
	msg := tgbotapi.NewMessage(userID, text)
	msg.ReplyMarkup = keyboard
	_, err = b.telegram.Send(msg)
	return err
}

// saveDiaryEntryWithGender —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫ —Å —É—á–µ—Ç–æ–º –≥–µ–Ω–¥–µ—Ä–∞
func (b *EnterpriseBot) saveDiaryEntryWithGender(userID int64, entryType, gender, content string) error {
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –ª–æ–≥–∏–∫—É)
	currentWeek := 1 // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–¥–µ–ª—é 1, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–¥–µ–ª–∏
	
	// –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–ø–∏—Å–∏
	entry := struct {
		UserID    int64  `json:"user_id"`
		Week      int    `json:"week"`
		Type      string `json:"type"`
		Gender    string `json:"gender"`
		Content   string `json:"content"`
		Timestamp string `json:"timestamp"`
	}{
		UserID:    userID,
		Week:      currentWeek,
		Type:      entryType,
		Gender:    gender,
		Content:   content,
		Timestamp: fmt.Sprintf("%d", time.Now().Unix()),
	}
	
	// –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª –∏–ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
	// –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏ entry
	b.logger.WithFields(map[string]interface{}{
		"user_id":    entry.UserID,
		"entry_type": entry.Type,
		"gender":     entry.Gender,
		"week":       entry.Week,
		"content":    entry.Content,
	}).Info("Diary entry saved with gender")
	
	return nil
}
