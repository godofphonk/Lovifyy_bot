package services

import (
	"encoding/json"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"time"

	"github.com/godofphonk/lovifyy-bot/internal/ai"
	"github.com/godofphonk/lovifyy-bot/internal/models"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// NotificationService —É–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
type NotificationService struct {
	bot         *tgbotapi.BotAPI
	ai          *ai.OpenAIClient
	templates   []models.NotificationTemplate
	dataDir     string
	userStorage *models.UserStorage
}

// NewNotificationService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
func NewNotificationService(bot *tgbotapi.BotAPI, ai *ai.OpenAIClient) *NotificationService {
	dataDir := "data/notifications"
	service := &NotificationService{
		bot:         bot,
		ai:          ai,
		templates:   models.GetDefaultTemplates(),
		dataDir:     dataDir,
		userStorage: models.NewUserStorage("data"),
	}
	
	// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
	os.MkdirAll(service.dataDir, 0755)
	
	// –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞
	service.loadTemplates()
	
	return service
}

// loadTemplates –∑–∞–≥—Ä—É–∂–∞–µ—Ç —à–∞–±–ª–æ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞
func (ns *NotificationService) loadTemplates() {
	filePath := filepath.Join(ns.dataDir, "templates.json")
	
	data, err := os.ReadFile(filePath)
	if err != nil {
		// –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
		ns.saveTemplates()
		return
	}
	
	var templates []models.NotificationTemplate
	if err := json.Unmarshal(data, &templates); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤: %v", err)
		return
	}
	
	ns.templates = templates
}

// saveTemplates —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —à–∞–±–ª–æ–Ω—ã –≤ —Ñ–∞–π–ª
func (ns *NotificationService) saveTemplates() {
	filePath := filepath.Join(ns.dataDir, "templates.json")
	
	data, err := json.MarshalIndent(ns.templates, "", "  ")
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤: %v", err)
		return
	}
	
	if err := os.WriteFile(filePath, data, 0644); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤: %v", err)
	}
}

// GenerateNotification –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é AI
func (ns *NotificationService) GenerateNotification(notificationType models.NotificationType) (string, error) {
	// –ù–∞—Ö–æ–¥–∏–º —à–∞–±–ª–æ–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
	var template *models.NotificationTemplate
	for i := range ns.templates {
		if ns.templates[i].Type == notificationType && ns.templates[i].IsActive {
			template = &ns.templates[i]
			break
		}
	}
	
	if template == nil {
		return "", fmt.Errorf("—à–∞–±–ª–æ–Ω –¥–ª—è —Ç–∏–ø–∞ %s –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω", notificationType)
	}
	
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é AI
	response, err := ns.ai.Generate(template.Prompt)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %v", err)
	}
	
	return response, nil
}

// SendNotificationToAll –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
func (ns *NotificationService) SendNotificationToAll(message string) error {
	log.Printf("üì¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: %s", message)
	
	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON —Ñ–∞–π–ª–∞
	userIDs, err := ns.userStorage.GetUserIDs()
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v", err)
		// Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º
		userIDs = []int64{1805441944, 1243795198} // ID –∞–¥–º–∏–Ω–æ–≤
	}
	
	if len(userIDs) == 0 {
		log.Printf("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
		return nil
	}
	
	successCount := 0
	errorCount := 0
	
	for _, userID := range userIDs {
		msg := tgbotapi.NewMessage(userID, message)
		msg.ParseMode = "HTML"
		
		_, err := ns.bot.Send(msg)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v", userID, err)
			errorCount++
			continue
		}
		log.Printf("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d", userID)
		successCount++
	}
	
	log.Printf("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: —É—Å–ø–µ—à–Ω–æ %d, –æ—à–∏–±–æ–∫ %d, –≤—Å–µ–≥–æ %d", successCount, errorCount, len(userIDs))
	return nil
}

// SendCustomNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
func (ns *NotificationService) SendCustomNotification(message string) error {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º
	return ns.SendNotificationToAll(message)
}

// SendNotificationToUser –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func (ns *NotificationService) SendNotificationToUser(userID int64, message string) error {
	msg := tgbotapi.NewMessage(userID, message)
	msg.ParseMode = "HTML"
	
	_, err := ns.bot.Send(msg)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v", userID, err)
	}
	
	log.Printf("üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d", userID)
	return nil
}

// SendInstantNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
func (ns *NotificationService) SendInstantNotification(notificationType models.NotificationType, recipients []int64) error {
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	message, err := ns.GenerateNotification(notificationType)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %v", err)
	}
	
	// –ï—Å–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º
	if len(recipients) == 0 {
		return ns.SendNotificationToAll(message)
	}
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
	for _, userID := range recipients {
		if err := ns.SendNotificationToUser(userID, message); err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v", userID, err)
		}
	}
	
	return nil
}

// GetTemplates –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —à–∞–±–ª–æ–Ω—ã
func (ns *NotificationService) GetTemplates() []models.NotificationTemplate {
	return ns.templates
}

// UpdateTemplate –æ–±–Ω–æ–≤–ª—è–µ—Ç —à–∞–±–ª–æ–Ω
func (ns *NotificationService) UpdateTemplate(notificationType models.NotificationType, prompt string, isActive bool) error {
	for i := range ns.templates {
		if ns.templates[i].Type == notificationType {
			ns.templates[i].Prompt = prompt
			ns.templates[i].IsActive = isActive
			ns.templates[i].UpdatedAt = time.Now()
			ns.saveTemplates()
			return nil
		}
	}
	
	return fmt.Errorf("—à–∞–±–ª–æ–Ω —Ç–∏–ø–∞ %s –Ω–µ –Ω–∞–π–¥–µ–Ω", notificationType)
}

// AddTemplate –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω
func (ns *NotificationService) AddTemplate(template models.NotificationTemplate) {
	template.CreatedAt = time.Now()
	template.UpdatedAt = time.Now()
	ns.templates = append(ns.templates, template)
	ns.saveTemplates()
}

// RegisterUser —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
func (ns *NotificationService) RegisterUser(userID int64, username string) error {
	return ns.userStorage.AddUser(userID, username)
}

// UpdateUserActivity –æ–±–Ω–æ–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (ns *NotificationService) UpdateUserActivity(userID int64) error {
	return ns.userStorage.UpdateLastSeen(userID)
}

// GetUserCount –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
func (ns *NotificationService) GetUserCount() (int, error) {
	return ns.userStorage.GetUserCount()
}
